Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.array
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000)

# Run progress: 0.00% complete, ETA 00:19:12
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: ignore trial
	at com.github.zabetak.benchmark.PartialSortBenchmark.ignoreTrial(PartialSortBenchmark.java:200)
	at com.github.zabetak.benchmark.PartialSortBenchmark.array(PartialSortBenchmark.java:284)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_array_jmhTest.array_avgt_jmhStub(PartialSortBenchmark_array_jmhTest.java:326)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_array_jmhTest.array_AverageTime(PartialSortBenchmark_array_jmhTest.java:244)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)




# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.array
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 1000000)

# Run progress: 1.04% complete, ETA 00:00:27
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: ignore trial
	at com.github.zabetak.benchmark.PartialSortBenchmark.ignoreTrial(PartialSortBenchmark.java:200)
	at com.github.zabetak.benchmark.PartialSortBenchmark.array(PartialSortBenchmark.java:284)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_array_jmhTest.array_avgt_jmhStub(PartialSortBenchmark_array_jmhTest.java:326)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_array_jmhTest.array_AverageTime(PartialSortBenchmark_array_jmhTest.java:244)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)




# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.array
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000000)

# Run progress: 2.08% complete, ETA 00:01:52
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: ignore trial
	at com.github.zabetak.benchmark.PartialSortBenchmark.ignoreTrial(PartialSortBenchmark.java:200)
	at com.github.zabetak.benchmark.PartialSortBenchmark.array(PartialSortBenchmark.java:284)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_array_jmhTest.array_avgt_jmhStub(PartialSortBenchmark_array_jmhTest.java:326)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_array_jmhTest.array_AverageTime(PartialSortBenchmark_array_jmhTest.java:244)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)




# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.array
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000)

# Run progress: 3.13% complete, ETA 00:16:25
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 0.122 ms/op
# Warmup Iteration   2: 0.119 ms/op
Iteration   1: 0.119 ms/op
                 comparisons: 10259.000 #
                 stableSort:  1.000 #

Iteration   2: 0.119 ms/op
                 comparisons: 10259.000 #
                 stableSort:  1.000 #

Iteration   3: 0.119 ms/op
                 comparisons: 10259.000 #
                 stableSort:  1.000 #

Iteration   4: 0.119 ms/op
                 comparisons: 10259.000 #
                 stableSort:  1.000 #

Iteration   5: 0.119 ms/op
                 comparisons: 10259.000 #
                 stableSort:  1.000 #

Iteration   6: 0.120 ms/op
                 comparisons: 10259.000 #
                 stableSort:  1.000 #

Iteration   7: 0.119 ms/op
                 comparisons: 10259.000 #
                 stableSort:  1.000 #

Iteration   8: 0.119 ms/op
                 comparisons: 10259.000 #
                 stableSort:  1.000 #

Iteration   9: 0.119 ms/op
                 comparisons: 10259.000 #
                 stableSort:  1.000 #

Iteration  10: 0.119 ms/op
                 comparisons: 10259.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.array":
  0.119 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.119, 0.119, 0.120), stdev = 0.001
  CI (99.9%): [0.119, 0.120] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:comparisons":
  102590.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10259.000, 10259.000, 10259.000), stdev = 0.001
  CI (99.9%): [102590.000, 102590.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.array
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 1000000)

# Run progress: 4.17% complete, ETA 00:16:52
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 20.638 ms/op
# Warmup Iteration   2: 20.537 ms/op
Iteration   1: 20.595 ms/op
                 comparisons: 1000432.000 #
                 stableSort:  1.000 #

Iteration   2: 20.451 ms/op
                 comparisons: 1000432.000 #
                 stableSort:  1.000 #

Iteration   3: 20.436 ms/op
                 comparisons: 1000432.000 #
                 stableSort:  1.000 #

Iteration   4: 20.424 ms/op
                 comparisons: 1000432.000 #
                 stableSort:  1.000 #

Iteration   5: 20.329 ms/op
                 comparisons: 1000432.000 #
                 stableSort:  1.000 #

Iteration   6: 20.356 ms/op
                 comparisons: 1000432.000 #
                 stableSort:  1.000 #

Iteration   7: 20.352 ms/op
                 comparisons: 1000432.000 #
                 stableSort:  1.000 #

Iteration   8: 20.330 ms/op
                 comparisons: 1000432.000 #
                 stableSort:  1.000 #

Iteration   9: 20.398 ms/op
                 comparisons: 1000432.000 #
                 stableSort:  1.000 #

Iteration  10: 20.407 ms/op
                 comparisons: 1000432.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.array":
  20.408 ±(99.9%) 0.120 ms/op [Average]
  (min, avg, max) = (20.329, 20.408, 20.595), stdev = 0.079
  CI (99.9%): [20.288, 20.528] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:comparisons":
  10004320.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1000432.000, 1000432.000, 1000432.000), stdev = 0.001
  CI (99.9%): [10004320.000, 10004320.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.array
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000000)

# Run progress: 5.21% complete, ETA 00:17:38
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 205.336 ms/op
# Warmup Iteration   2: 201.364 ms/op
Iteration   1: 201.336 ms/op
                 comparisons: 10000502.000 #
                 stableSort:  1.000 #

Iteration   2: 201.146 ms/op
                 comparisons: 10000502.000 #
                 stableSort:  1.000 #

Iteration   3: 202.048 ms/op
                 comparisons: 10000502.000 #
                 stableSort:  1.000 #

Iteration   4: 201.388 ms/op
                 comparisons: 10000502.000 #
                 stableSort:  1.000 #

Iteration   5: 201.049 ms/op
                 comparisons: 10000502.000 #
                 stableSort:  1.000 #

Iteration   6: 200.890 ms/op
                 comparisons: 10000502.000 #
                 stableSort:  1.000 #

Iteration   7: 201.167 ms/op
                 comparisons: 10000502.000 #
                 stableSort:  1.000 #

Iteration   8: 200.972 ms/op
                 comparisons: 10000502.000 #
                 stableSort:  1.000 #

Iteration   9: 202.024 ms/op
                 comparisons: 10000502.000 #
                 stableSort:  1.000 #

Iteration  10: 201.463 ms/op
                 comparisons: 10000502.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.array":
  201.348 ±(99.9%) 0.612 ms/op [Average]
  (min, avg, max) = (200.890, 201.348, 202.048), stdev = 0.405
  CI (99.9%): [200.736, 201.961] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:comparisons":
  100005020.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10000502.000, 10000502.000, 10000502.000), stdev = 0.001
  CI (99.9%): [100005020.000, 100005020.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.array
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000)

# Run progress: 6.25% complete, ETA 00:23:32
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 0.209 ms/op
# Warmup Iteration   2: 0.202 ms/op
Iteration   1: 0.202 ms/op
                 comparisons: 13565.000 #
                 stableSort:  1.000 #

Iteration   2: 0.202 ms/op
                 comparisons: 13565.000 #
                 stableSort:  1.000 #

Iteration   3: 0.202 ms/op
                 comparisons: 13565.000 #
                 stableSort:  1.000 #

Iteration   4: 0.202 ms/op
                 comparisons: 13565.000 #
                 stableSort:  1.000 #

Iteration   5: 0.202 ms/op
                 comparisons: 13565.000 #
                 stableSort:  1.000 #

Iteration   6: 0.203 ms/op
                 comparisons: 13565.000 #
                 stableSort:  1.000 #

Iteration   7: 0.203 ms/op
                 comparisons: 13565.000 #
                 stableSort:  1.000 #

Iteration   8: 0.204 ms/op
                 comparisons: 13565.000 #
                 stableSort:  1.000 #

Iteration   9: 0.203 ms/op
                 comparisons: 13565.000 #
                 stableSort:  1.000 #

Iteration  10: 0.203 ms/op
                 comparisons: 13565.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.array":
  0.203 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.202, 0.203, 0.204), stdev = 0.001
  CI (99.9%): [0.202, 0.204] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:comparisons":
  135650.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (13565.000, 13565.000, 13565.000), stdev = 0.001
  CI (99.9%): [135650.000, 135650.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.array
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 1000000)

# Run progress: 7.29% complete, ETA 00:22:32
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 19.187 ms/op
# Warmup Iteration   2: 18.586 ms/op
Iteration   1: 18.667 ms/op
                 comparisons: 1006604.000 #
                 stableSort:  1.000 #

Iteration   2: 18.560 ms/op
                 comparisons: 1006604.000 #
                 stableSort:  1.000 #

Iteration   3: 18.505 ms/op
                 comparisons: 1006604.000 #
                 stableSort:  1.000 #

Iteration   4: 18.499 ms/op
                 comparisons: 1006604.000 #
                 stableSort:  1.000 #

Iteration   5: 18.494 ms/op
                 comparisons: 1006604.000 #
                 stableSort:  1.000 #

Iteration   6: 18.518 ms/op
                 comparisons: 1006604.000 #
                 stableSort:  1.000 #

Iteration   7: 18.556 ms/op
                 comparisons: 1006604.000 #
                 stableSort:  1.000 #

Iteration   8: 18.534 ms/op
                 comparisons: 1006604.000 #
                 stableSort:  1.000 #

Iteration   9: 18.561 ms/op
                 comparisons: 1006604.000 #
                 stableSort:  1.000 #

Iteration  10: 18.531 ms/op
                 comparisons: 1006604.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.array":
  18.543 ±(99.9%) 0.076 ms/op [Average]
  (min, avg, max) = (18.494, 18.543, 18.667), stdev = 0.050
  CI (99.9%): [18.467, 18.619] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:comparisons":
  10066040.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1006604.000, 1006604.000, 1006604.000), stdev = 0.001
  CI (99.9%): [10066040.000, 10066040.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.array
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000000)

# Run progress: 8.33% complete, ETA 00:22:05
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 205.150 ms/op
# Warmup Iteration   2: 196.172 ms/op
Iteration   1: 196.496 ms/op
                 comparisons: 10008493.000 #
                 stableSort:  1.000 #

Iteration   2: 196.386 ms/op
                 comparisons: 10008493.000 #
                 stableSort:  1.000 #

Iteration   3: 196.377 ms/op
                 comparisons: 10008493.000 #
                 stableSort:  1.000 #

Iteration   4: 196.452 ms/op
                 comparisons: 10008493.000 #
                 stableSort:  1.000 #

Iteration   5: 196.657 ms/op
                 comparisons: 10008493.000 #
                 stableSort:  1.000 #

Iteration   6: 196.584 ms/op
                 comparisons: 10008493.000 #
                 stableSort:  1.000 #

Iteration   7: 196.071 ms/op
                 comparisons: 10008493.000 #
                 stableSort:  1.000 #

Iteration   8: 196.495 ms/op
                 comparisons: 10008493.000 #
                 stableSort:  1.000 #

Iteration   9: 196.561 ms/op
                 comparisons: 10008493.000 #
                 stableSort:  1.000 #

Iteration  10: 196.370 ms/op
                 comparisons: 10008493.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.array":
  196.445 ±(99.9%) 0.245 ms/op [Average]
  (min, avg, max) = (196.071, 196.445, 196.657), stdev = 0.162
  CI (99.9%): [196.200, 196.690] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:comparisons":
  100084930.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10008493.000, 10008493.000, 10008493.000), stdev = 0.001
  CI (99.9%): [100084930.000, 100084930.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.array
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000)

# Run progress: 9.38% complete, ETA 00:25:30
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 5.509 ms/op
# Warmup Iteration   2: 5.473 ms/op
Iteration   1: 5.342 ms/op
                 comparisons: 119013.000 #
                 stableSort:  1.000 #

Iteration   2: 5.372 ms/op
                 comparisons: 119013.000 #
                 stableSort:  1.000 #

Iteration   3: 5.303 ms/op
                 comparisons: 119013.000 #
                 stableSort:  1.000 #

Iteration   4: 5.315 ms/op
                 comparisons: 119013.000 #
                 stableSort:  1.000 #

Iteration   5: 5.268 ms/op
                 comparisons: 119013.000 #
                 stableSort:  1.000 #

Iteration   6: 5.278 ms/op
                 comparisons: 119013.000 #
                 stableSort:  1.000 #

Iteration   7: 5.307 ms/op
                 comparisons: 119013.000 #
                 stableSort:  1.000 #

Iteration   8: 5.336 ms/op
                 comparisons: 119013.000 #
                 stableSort:  1.000 #

Iteration   9: 5.359 ms/op
                 comparisons: 119013.000 #
                 stableSort:  1.000 #

Iteration  10: 5.347 ms/op
                 comparisons: 119013.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.array":
  5.323 ±(99.9%) 0.052 ms/op [Average]
  (min, avg, max) = (5.268, 5.323, 5.372), stdev = 0.034
  CI (99.9%): [5.271, 5.375] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:comparisons":
  1190130.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (119013.000, 119013.000, 119013.000), stdev = 0.001
  CI (99.9%): [1190130.000, 1190130.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.array
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 1000000)

# Run progress: 10.42% complete, ETA 00:24:27
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 65.860 ms/op
# Warmup Iteration   2: 64.643 ms/op
Iteration   1: 64.938 ms/op
                 comparisons: 1720160.000 #
                 stableSort:  1.000 #

Iteration   2: 65.186 ms/op
                 comparisons: 1720160.000 #
                 stableSort:  1.000 #

Iteration   3: 65.035 ms/op
                 comparisons: 1720160.000 #
                 stableSort:  1.000 #

Iteration   4: 65.192 ms/op
                 comparisons: 1720160.000 #
                 stableSort:  1.000 #

Iteration   5: 65.563 ms/op
                 comparisons: 1720160.000 #
                 stableSort:  1.000 #

Iteration   6: 65.462 ms/op
                 comparisons: 1720160.000 #
                 stableSort:  1.000 #

Iteration   7: 65.307 ms/op
                 comparisons: 1720160.000 #
                 stableSort:  1.000 #

Iteration   8: 65.328 ms/op
                 comparisons: 1720160.000 #
                 stableSort:  1.000 #

Iteration   9: 65.427 ms/op
                 comparisons: 1720160.000 #
                 stableSort:  1.000 #

Iteration  10: 65.222 ms/op
                 comparisons: 1720160.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.array":
  65.266 ±(99.9%) 0.290 ms/op [Average]
  (min, avg, max) = (64.938, 65.266, 65.563), stdev = 0.192
  CI (99.9%): [64.976, 65.556] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:comparisons":
  17201600.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1720160.000, 1720160.000, 1720160.000), stdev = 0.001
  CI (99.9%): [17201600.000, 17201600.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.array
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000000)

# Run progress: 11.46% complete, ETA 00:23:50
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 311.324 ms/op
# Warmup Iteration   2: 309.128 ms/op
Iteration   1: 307.177 ms/op
                 comparisons: 11027238.000 #
                 stableSort:  1.000 #

Iteration   2: 306.100 ms/op
                 comparisons: 11027238.000 #
                 stableSort:  1.000 #

Iteration   3: 306.097 ms/op
                 comparisons: 11027238.000 #
                 stableSort:  1.000 #

Iteration   4: 306.161 ms/op
                 comparisons: 11027238.000 #
                 stableSort:  1.000 #

Iteration   5: 306.287 ms/op
                 comparisons: 11027238.000 #
                 stableSort:  1.000 #

Iteration   6: 306.744 ms/op
                 comparisons: 11027238.000 #
                 stableSort:  1.000 #

Iteration   7: 306.649 ms/op
                 comparisons: 11027238.000 #
                 stableSort:  1.000 #

Iteration   8: 307.214 ms/op
                 comparisons: 11027238.000 #
                 stableSort:  1.000 #

Iteration   9: 305.419 ms/op
                 comparisons: 11027238.000 #
                 stableSort:  1.000 #

Iteration  10: 306.421 ms/op
                 comparisons: 11027238.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.array":
  306.427 ±(99.9%) 0.821 ms/op [Average]
  (min, avg, max) = (305.419, 306.427, 307.214), stdev = 0.543
  CI (99.9%): [305.606, 307.248] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:comparisons":
  110272380.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (11027238.000, 11027238.000, 11027238.000), stdev = 0.001
  CI (99.9%): [110272380.000, 110272380.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000)

# Run progress: 12.50% complete, ETA 00:26:05
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 2.987 ms/op
# Warmup Iteration   2: 2.668 ms/op
Iteration   1: 2.587 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   2: 2.652 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   3: 2.649 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   4: 2.622 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   5: 2.612 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   6: 2.645 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   7: 2.651 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   8: 2.648 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   9: 2.657 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration  10: 2.653 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort":
  2.638 ±(99.9%) 0.035 ms/op [Average]
  (min, avg, max) = (2.587, 2.638, 2.657), stdev = 0.023
  CI (99.9%): [2.603, 2.672] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort:comparisons":
  1204360.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (120436.000, 120436.000, 120436.000), stdev = 0.001
  CI (99.9%): [1204360.000, 1204360.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 1000000)

# Run progress: 13.54% complete, ETA 00:25:06
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 709.700 ms/op
# Warmup Iteration   2: 671.832 ms/op
Iteration   1: 670.409 ms/op
                 comparisons: 18640601.000 #
                 stableSort:  1.000 #

Iteration   2: 670.971 ms/op
                 comparisons: 18640601.000 #
                 stableSort:  1.000 #

Iteration   3: 669.366 ms/op
                 comparisons: 18640601.000 #
                 stableSort:  1.000 #

Iteration   4: 671.369 ms/op
                 comparisons: 18640601.000 #
                 stableSort:  1.000 #

Iteration   5: 669.953 ms/op
                 comparisons: 18640601.000 #
                 stableSort:  1.000 #

Iteration   6: 673.499 ms/op
                 comparisons: 18640601.000 #
                 stableSort:  1.000 #

Iteration   7: 667.689 ms/op
                 comparisons: 18640601.000 #
                 stableSort:  1.000 #

Iteration   8: 668.816 ms/op
                 comparisons: 18640601.000 #
                 stableSort:  1.000 #

Iteration   9: 670.816 ms/op
                 comparisons: 18640601.000 #
                 stableSort:  1.000 #

Iteration  10: 668.132 ms/op
                 comparisons: 18640601.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort":
  670.102 ±(99.9%) 2.591 ms/op [Average]
  (min, avg, max) = (667.689, 670.102, 673.499), stdev = 1.714
  CI (99.9%): [667.511, 672.693] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort:comparisons":
  186406010.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (18640601.000, 18640601.000, 18640601.000), stdev = 0.001
  CI (99.9%): [186406010.000, 186406010.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000000)

# Run progress: 14.58% complete, ETA 00:24:48
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 12223.567 ms/op
# Warmup Iteration   2: 12875.956 ms/op
Iteration   1: 12330.799 ms/op
                 comparisons: 220246568.000 #
                 stableSort:  1.000 #

Iteration   2: 12187.797 ms/op
                 comparisons: 220246568.000 #
                 stableSort:  1.000 #

Iteration   3: 11417.359 ms/op
                 comparisons: 220246568.000 #
                 stableSort:  1.000 #

Iteration   4: 11434.637 ms/op
                 comparisons: 220246568.000 #
                 stableSort:  1.000 #

Iteration   5: 11432.572 ms/op
                 comparisons: 220246568.000 #
                 stableSort:  1.000 #

Iteration   6: 12782.358 ms/op
                 comparisons: 220246568.000 #
                 stableSort:  1.000 #

Iteration   7: 12241.916 ms/op
                 comparisons: 220246568.000 #
                 stableSort:  1.000 #

Iteration   8: 12239.984 ms/op
                 comparisons: 220246568.000 #
                 stableSort:  1.000 #

Iteration   9: 12131.056 ms/op
                 comparisons: 220246568.000 #
                 stableSort:  1.000 #

Iteration  10: 11974.536 ms/op
                 comparisons: 220246568.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort":
  12017.301 ±(99.9%) 688.925 ms/op [Average]
  (min, avg, max) = (11417.359, 12017.301, 12782.358), stdev = 455.681
  CI (99.9%): [11328.377, 12706.226] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort:comparisons":
  2202465680.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (220246568.000, 220246568.000, 220246568.000), stdev = 0.001
  CI (99.9%): [2202465680.000, 2202465680.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000)

# Run progress: 15.63% complete, ETA 00:38:14
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: ignore trial
	at com.github.zabetak.benchmark.PartialSortBenchmark.ignoreTrial(PartialSortBenchmark.java:200)
	at com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort(PartialSortBenchmark.java:253)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_avgt_jmhStub(PartialSortBenchmark_collectionSort_jmhTest.java:326)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_AverageTime(PartialSortBenchmark_collectionSort_jmhTest.java:244)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)




# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 1000000)

# Run progress: 16.67% complete, ETA 00:35:25
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: ignore trial
	at com.github.zabetak.benchmark.PartialSortBenchmark.ignoreTrial(PartialSortBenchmark.java:200)
	at com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort(PartialSortBenchmark.java:253)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_avgt_jmhStub(PartialSortBenchmark_collectionSort_jmhTest.java:326)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_AverageTime(PartialSortBenchmark_collectionSort_jmhTest.java:244)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)




# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000000)

# Run progress: 17.71% complete, ETA 00:33:05
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: ignore trial
	at com.github.zabetak.benchmark.PartialSortBenchmark.ignoreTrial(PartialSortBenchmark.java:200)
	at com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort(PartialSortBenchmark.java:253)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_avgt_jmhStub(PartialSortBenchmark_collectionSort_jmhTest.java:326)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_AverageTime(PartialSortBenchmark_collectionSort_jmhTest.java:244)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)




# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000)

# Run progress: 18.75% complete, ETA 00:32:35
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: ignore trial
	at com.github.zabetak.benchmark.PartialSortBenchmark.ignoreTrial(PartialSortBenchmark.java:200)
	at com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort(PartialSortBenchmark.java:253)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_avgt_jmhStub(PartialSortBenchmark_collectionSort_jmhTest.java:326)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_AverageTime(PartialSortBenchmark_collectionSort_jmhTest.java:244)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)




# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 1000000)

# Run progress: 19.79% complete, ETA 00:30:29
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: ignore trial
	at com.github.zabetak.benchmark.PartialSortBenchmark.ignoreTrial(PartialSortBenchmark.java:200)
	at com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort(PartialSortBenchmark.java:253)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_avgt_jmhStub(PartialSortBenchmark_collectionSort_jmhTest.java:326)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_AverageTime(PartialSortBenchmark_collectionSort_jmhTest.java:244)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)




# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000000)

# Run progress: 20.83% complete, ETA 00:28:42
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: ignore trial
	at com.github.zabetak.benchmark.PartialSortBenchmark.ignoreTrial(PartialSortBenchmark.java:200)
	at com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort(PartialSortBenchmark.java:253)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_avgt_jmhStub(PartialSortBenchmark_collectionSort_jmhTest.java:326)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_AverageTime(PartialSortBenchmark_collectionSort_jmhTest.java:244)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)




# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000)

# Run progress: 21.88% complete, ETA 00:28:24
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 3.034 ms/op
# Warmup Iteration   2: 2.793 ms/op
Iteration   1: 2.626 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   2: 2.667 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   3: 2.682 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   4: 2.676 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   5: 2.648 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   6: 2.634 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   7: 2.610 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   8: 2.667 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   9: 2.687 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration  10: 2.686 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort":
  2.658 ±(99.9%) 0.041 ms/op [Average]
  (min, avg, max) = (2.610, 2.658, 2.687), stdev = 0.027
  CI (99.9%): [2.617, 2.699] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort:comparisons":
  1204360.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (120436.000, 120436.000, 120436.000), stdev = 0.001
  CI (99.9%): [1204360.000, 1204360.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 1000000)

# Run progress: 22.92% complete, ETA 00:27:26
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: ignore trial
	at com.github.zabetak.benchmark.PartialSortBenchmark.ignoreTrial(PartialSortBenchmark.java:200)
	at com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort(PartialSortBenchmark.java:253)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_avgt_jmhStub(PartialSortBenchmark_collectionSort_jmhTest.java:326)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_AverageTime(PartialSortBenchmark_collectionSort_jmhTest.java:244)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)




# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000000)

# Run progress: 23.96% complete, ETA 00:26:00
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: ignore trial
	at com.github.zabetak.benchmark.PartialSortBenchmark.ignoreTrial(PartialSortBenchmark.java:200)
	at com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort(PartialSortBenchmark.java:253)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_avgt_jmhStub(PartialSortBenchmark_collectionSort_jmhTest.java:326)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_AverageTime(PartialSortBenchmark_collectionSort_jmhTest.java:244)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)




# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.limitSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000)

# Run progress: 25.00% complete, ETA 00:25:46
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 4.796 ms/op
# Warmup Iteration   2: 2.873 ms/op
Iteration   1: 2.855 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   2: 2.826 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   3: 2.810 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   4: 2.839 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   5: 2.810 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   6: 2.875 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   7: 2.848 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   8: 2.849 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   9: 2.854 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration  10: 2.866 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort":
  2.843 ±(99.9%) 0.033 ms/op [Average]
  (min, avg, max) = (2.810, 2.843, 2.875), stdev = 0.022
  CI (99.9%): [2.810, 2.877] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:comparisons":
  1204360.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (120436.000, 120436.000, 120436.000), stdev = 0.001
  CI (99.9%): [1204360.000, 1204360.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.limitSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 1000000)

# Run progress: 26.04% complete, ETA 00:24:59
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 1001.593 ms/op
# Warmup Iteration   2: 725.612 ms/op
Iteration   1: 701.984 ms/op
                 comparisons: 18640601.000 #
                 stableSort:  1.000 #

Iteration   2: 701.391 ms/op
                 comparisons: 18640601.000 #
                 stableSort:  1.000 #

Iteration   3: 702.616 ms/op
                 comparisons: 18640601.000 #
                 stableSort:  1.000 #

Iteration   4: 691.752 ms/op
                 comparisons: 18640601.000 #
                 stableSort:  1.000 #

Iteration   5: 693.926 ms/op
                 comparisons: 18640601.000 #
                 stableSort:  1.000 #

Iteration   6: 690.808 ms/op
                 comparisons: 18640601.000 #
                 stableSort:  1.000 #

Iteration   7: 691.530 ms/op
                 comparisons: 18640601.000 #
                 stableSort:  1.000 #

Iteration   8: 692.227 ms/op
                 comparisons: 18640601.000 #
                 stableSort:  1.000 #

Iteration   9: 684.511 ms/op
                 comparisons: 18640601.000 #
                 stableSort:  1.000 #

Iteration  10: 676.205 ms/op
                 comparisons: 18640601.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort":
  692.695 ±(99.9%) 12.414 ms/op [Average]
  (min, avg, max) = (676.205, 692.695, 702.616), stdev = 8.211
  CI (99.9%): [680.281, 705.109] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:comparisons":
  186406010.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (18640601.000, 18640601.000, 18640601.000), stdev = 0.001
  CI (99.9%): [186406010.000, 186406010.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.limitSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000000)

# Run progress: 27.08% complete, ETA 00:24:30
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 12527.282 ms/op
# Warmup Iteration   2: 12060.805 ms/op
Iteration   1: 11949.441 ms/op
                 comparisons: 220246568.000 #
                 stableSort:  1.000 #

Iteration   2: 12473.726 ms/op
                 comparisons: 220246568.000 #
                 stableSort:  1.000 #

Iteration   3: 12115.722 ms/op
                 comparisons: 220246568.000 #
                 stableSort:  1.000 #

Iteration   4: 11965.874 ms/op
                 comparisons: 220246568.000 #
                 stableSort:  1.000 #

Iteration   5: 11912.712 ms/op
                 comparisons: 220246568.000 #
                 stableSort:  1.000 #

Iteration   6: 11862.889 ms/op
                 comparisons: 220246568.000 #
                 stableSort:  1.000 #

Iteration   7: 11899.055 ms/op
                 comparisons: 220246568.000 #
                 stableSort:  1.000 #

Iteration   8: 11873.702 ms/op
                 comparisons: 220246568.000 #
                 stableSort:  1.000 #

Iteration   9: 11879.441 ms/op
                 comparisons: 220246568.000 #
                 stableSort:  1.000 #

Iteration  10: 11893.392 ms/op
                 comparisons: 220246568.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort":
  11982.595 ±(99.9%) 283.721 ms/op [Average]
  (min, avg, max) = (11862.889, 11982.595, 12473.726), stdev = 187.664
  CI (99.9%): [11698.874, 12266.316] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:comparisons":
  2202465680.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (220246568.000, 220246568.000, 220246568.000), stdev = 0.001
  CI (99.9%): [2202465680.000, 2202465680.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.limitSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000)

# Run progress: 28.13% complete, ETA 00:30:30
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 0.133 ms/op
# Warmup Iteration   2: 0.122 ms/op
Iteration   1: 0.123 ms/op
                 comparisons: 10268.000 #
                 stableSort:  1.000 #

Iteration   2: 0.131 ms/op
                 comparisons: 10268.000 #
                 stableSort:  1.000 #

Iteration   3: 0.131 ms/op
                 comparisons: 10268.000 #
                 stableSort:  1.000 #

Iteration   4: 0.131 ms/op
                 comparisons: 10268.000 #
                 stableSort:  1.000 #

Iteration   5: 0.131 ms/op
                 comparisons: 10268.000 #
                 stableSort:  1.000 #

Iteration   6: 0.126 ms/op
                 comparisons: 10268.000 #
                 stableSort:  1.000 #

Iteration   7: 0.126 ms/op
                 comparisons: 10268.000 #
                 stableSort:  1.000 #

Iteration   8: 0.125 ms/op
                 comparisons: 10268.000 #
                 stableSort:  1.000 #

Iteration   9: 0.126 ms/op
                 comparisons: 10268.000 #
                 stableSort:  1.000 #

Iteration  10: 0.127 ms/op
                 comparisons: 10268.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort":
  0.128 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.123, 0.128, 0.131), stdev = 0.003
  CI (99.9%): [0.123, 0.132] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:comparisons":
  102680.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10268.000, 10268.000, 10268.000), stdev = 0.001
  CI (99.9%): [102680.000, 102680.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.limitSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 1000000)

# Run progress: 29.17% complete, ETA 00:29:29
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 21.481 ms/op
# Warmup Iteration   2: 21.161 ms/op
Iteration   1: 20.477 ms/op
                 comparisons: 1000455.000 #
                 stableSort:  1.000 #

Iteration   2: 20.412 ms/op
                 comparisons: 1000455.000 #
                 stableSort:  1.000 #

Iteration   3: 20.756 ms/op
                 comparisons: 1000455.000 #
                 stableSort:  1.000 #

Iteration   4: 20.935 ms/op
                 comparisons: 1000455.000 #
                 stableSort:  1.000 #

Iteration   5: 20.743 ms/op
                 comparisons: 1000455.000 #
                 stableSort:  1.000 #

Iteration   6: 20.794 ms/op
                 comparisons: 1000455.000 #
                 stableSort:  1.000 #

Iteration   7: 20.568 ms/op
                 comparisons: 1000455.000 #
                 stableSort:  1.000 #

Iteration   8: 20.718 ms/op
                 comparisons: 1000455.000 #
                 stableSort:  1.000 #

Iteration   9: 20.629 ms/op
                 comparisons: 1000455.000 #
                 stableSort:  1.000 #

Iteration  10: 20.635 ms/op
                 comparisons: 1000455.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort":
  20.667 ±(99.9%) 0.235 ms/op [Average]
  (min, avg, max) = (20.412, 20.667, 20.935), stdev = 0.155
  CI (99.9%): [20.432, 20.902] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:comparisons":
  10004550.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1000455.000, 1000455.000, 1000455.000), stdev = 0.001
  CI (99.9%): [10004550.000, 10004550.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.limitSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000000)

# Run progress: 30.21% complete, ETA 00:28:35
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 207.016 ms/op
# Warmup Iteration   2: 203.304 ms/op
Iteration   1: 204.134 ms/op
                 comparisons: 10000483.000 #
                 stableSort:  1.000 #

Iteration   2: 201.925 ms/op
                 comparisons: 10000483.000 #
                 stableSort:  1.000 #

Iteration   3: 201.479 ms/op
                 comparisons: 10000483.000 #
                 stableSort:  1.000 #

Iteration   4: 204.591 ms/op
                 comparisons: 10000483.000 #
                 stableSort:  1.000 #

Iteration   5: 202.322 ms/op
                 comparisons: 10000483.000 #
                 stableSort:  1.000 #

Iteration   6: 202.051 ms/op
                 comparisons: 10000483.000 #
                 stableSort:  1.000 #

Iteration   7: 201.842 ms/op
                 comparisons: 10000483.000 #
                 stableSort:  1.000 #

Iteration   8: 201.834 ms/op
                 comparisons: 10000483.000 #
                 stableSort:  1.000 #

Iteration   9: 201.509 ms/op
                 comparisons: 10000483.000 #
                 stableSort:  1.000 #

Iteration  10: 202.099 ms/op
                 comparisons: 10000483.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort":
  202.379 ±(99.9%) 1.635 ms/op [Average]
  (min, avg, max) = (201.479, 202.379, 204.591), stdev = 1.081
  CI (99.9%): [200.744, 204.013] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:comparisons":
  100004830.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10000483.000, 10000483.000, 10000483.000), stdev = 0.001
  CI (99.9%): [100004830.000, 100004830.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.limitSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000)

# Run progress: 31.25% complete, ETA 00:28:33
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 0.235 ms/op
# Warmup Iteration   2: 0.220 ms/op
Iteration   1: 0.216 ms/op
                 comparisons: 13581.000 #
                 stableSort:  1.000 #

Iteration   2: 0.215 ms/op
                 comparisons: 13581.000 #
                 stableSort:  1.000 #

Iteration   3: 0.215 ms/op
                 comparisons: 13581.000 #
                 stableSort:  1.000 #

Iteration   4: 0.215 ms/op
                 comparisons: 13581.000 #
                 stableSort:  1.000 #

Iteration   5: 0.215 ms/op
                 comparisons: 13581.000 #
                 stableSort:  1.000 #

Iteration   6: 0.218 ms/op
                 comparisons: 13581.000 #
                 stableSort:  1.000 #

Iteration   7: 0.219 ms/op
                 comparisons: 13581.000 #
                 stableSort:  1.000 #

Iteration   8: 0.217 ms/op
                 comparisons: 13581.000 #
                 stableSort:  1.000 #

Iteration   9: 0.216 ms/op
                 comparisons: 13581.000 #
                 stableSort:  1.000 #

Iteration  10: 0.218 ms/op
                 comparisons: 13581.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort":
  0.216 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.215, 0.216, 0.219), stdev = 0.001
  CI (99.9%): [0.215, 0.218] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:comparisons":
  135810.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (13581.000, 13581.000, 13581.000), stdev = 0.001
  CI (99.9%): [135810.000, 135810.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.limitSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 1000000)

# Run progress: 32.29% complete, ETA 00:27:38
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 19.819 ms/op
# Warmup Iteration   2: 18.962 ms/op
Iteration   1: 18.769 ms/op
                 comparisons: 1006680.000 #
                 stableSort:  1.000 #

Iteration   2: 18.760 ms/op
                 comparisons: 1006680.000 #
                 stableSort:  1.000 #

Iteration   3: 18.785 ms/op
                 comparisons: 1006680.000 #
                 stableSort:  1.000 #

Iteration   4: 18.740 ms/op
                 comparisons: 1006680.000 #
                 stableSort:  1.000 #

Iteration   5: 18.777 ms/op
                 comparisons: 1006680.000 #
                 stableSort:  1.000 #

Iteration   6: 18.732 ms/op
                 comparisons: 1006680.000 #
                 stableSort:  1.000 #

Iteration   7: 18.625 ms/op
                 comparisons: 1006680.000 #
                 stableSort:  1.000 #

Iteration   8: 18.671 ms/op
                 comparisons: 1006680.000 #
                 stableSort:  1.000 #

Iteration   9: 18.639 ms/op
                 comparisons: 1006680.000 #
                 stableSort:  1.000 #

Iteration  10: 18.688 ms/op
                 comparisons: 1006680.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort":
  18.719 ±(99.9%) 0.089 ms/op [Average]
  (min, avg, max) = (18.625, 18.719, 18.785), stdev = 0.059
  CI (99.9%): [18.630, 18.807] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:comparisons":
  10066800.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1006680.000, 1006680.000, 1006680.000), stdev = 0.001
  CI (99.9%): [10066800.000, 10066800.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.limitSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000000)

# Run progress: 33.33% complete, ETA 00:26:50
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 210.353 ms/op
# Warmup Iteration   2: 197.041 ms/op
Iteration   1: 195.680 ms/op
                 comparisons: 10008576.000 #
                 stableSort:  1.000 #

Iteration   2: 195.745 ms/op
                 comparisons: 10008576.000 #
                 stableSort:  1.000 #

Iteration   3: 196.782 ms/op
                 comparisons: 10008576.000 #
                 stableSort:  1.000 #

Iteration   4: 197.539 ms/op
                 comparisons: 10008576.000 #
                 stableSort:  1.000 #

Iteration   5: 198.942 ms/op
                 comparisons: 10008576.000 #
                 stableSort:  1.000 #

Iteration   6: 196.881 ms/op
                 comparisons: 10008576.000 #
                 stableSort:  1.000 #

Iteration   7: 197.841 ms/op
                 comparisons: 10008576.000 #
                 stableSort:  1.000 #

Iteration   8: 197.267 ms/op
                 comparisons: 10008576.000 #
                 stableSort:  1.000 #

Iteration   9: 197.374 ms/op
                 comparisons: 10008576.000 #
                 stableSort:  1.000 #

Iteration  10: 196.546 ms/op
                 comparisons: 10008576.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort":
  197.060 ±(99.9%) 1.472 ms/op [Average]
  (min, avg, max) = (195.680, 197.060, 198.942), stdev = 0.973
  CI (99.9%): [195.588, 198.532] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:comparisons":
  100085760.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10008576.000, 10008576.000, 10008576.000), stdev = 0.001
  CI (99.9%): [100085760.000, 100085760.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.limitSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000)

# Run progress: 34.38% complete, ETA 00:26:50
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 3.880 ms/op
# Warmup Iteration   2: 2.830 ms/op
Iteration   1: 2.935 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   2: 2.996 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   3: 2.982 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   4: 2.964 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   5: 2.967 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   6: 2.958 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   7: 3.023 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   8: 2.898 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   9: 2.869 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration  10: 2.833 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort":
  2.943 ±(99.9%) 0.090 ms/op [Average]
  (min, avg, max) = (2.833, 2.943, 3.023), stdev = 0.059
  CI (99.9%): [2.853, 3.032] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:comparisons":
  1204360.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (120436.000, 120436.000, 120436.000), stdev = 0.001
  CI (99.9%): [1204360.000, 1204360.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.limitSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 1000000)

# Run progress: 35.42% complete, ETA 00:26:00
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 50.656 ms/op
# Warmup Iteration   2: 43.899 ms/op
Iteration   1: 43.943 ms/op
                 comparisons: 1721708.000 #
                 stableSort:  1.000 #

Iteration   2: 44.044 ms/op
                 comparisons: 1721708.000 #
                 stableSort:  1.000 #

Iteration   3: 43.659 ms/op
                 comparisons: 1721708.000 #
                 stableSort:  1.000 #

Iteration   4: 43.740 ms/op
                 comparisons: 1721708.000 #
                 stableSort:  1.000 #

Iteration   5: 43.979 ms/op
                 comparisons: 1721708.000 #
                 stableSort:  1.000 #

Iteration   6: 43.603 ms/op
                 comparisons: 1721708.000 #
                 stableSort:  1.000 #

Iteration   7: 43.683 ms/op
                 comparisons: 1721708.000 #
                 stableSort:  1.000 #

Iteration   8: 43.395 ms/op
                 comparisons: 1721708.000 #
                 stableSort:  1.000 #

Iteration   9: 44.454 ms/op
                 comparisons: 1721708.000 #
                 stableSort:  1.000 #

Iteration  10: 44.228 ms/op
                 comparisons: 1721708.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort":
  43.873 ±(99.9%) 0.481 ms/op [Average]
  (min, avg, max) = (43.395, 43.873, 44.454), stdev = 0.318
  CI (99.9%): [43.392, 44.354] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:comparisons":
  17217080.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1721708.000, 1721708.000, 1721708.000), stdev = 0.001
  CI (99.9%): [17217080.000, 17217080.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.limitSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000000)

# Run progress: 36.46% complete, ETA 00:25:16
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 306.295 ms/op
# Warmup Iteration   2: 283.722 ms/op
Iteration   1: 277.794 ms/op
                 comparisons: 11029094.000 #
                 stableSort:  1.000 #

Iteration   2: 274.237 ms/op
                 comparisons: 11029094.000 #
                 stableSort:  1.000 #

Iteration   3: 275.329 ms/op
                 comparisons: 11029094.000 #
                 stableSort:  1.000 #

Iteration   4: 274.580 ms/op
                 comparisons: 11029094.000 #
                 stableSort:  1.000 #

Iteration   5: 274.709 ms/op
                 comparisons: 11029094.000 #
                 stableSort:  1.000 #

Iteration   6: 274.539 ms/op
                 comparisons: 11029094.000 #
                 stableSort:  1.000 #

Iteration   7: 274.605 ms/op
                 comparisons: 11029094.000 #
                 stableSort:  1.000 #

Iteration   8: 273.718 ms/op
                 comparisons: 11029094.000 #
                 stableSort:  1.000 #

Iteration   9: 455.507 ms/op
                 comparisons: 11029094.000 #
                 stableSort:  1.000 #

Iteration  10: 279.260 ms/op
                 comparisons: 11029094.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort":
  293.428 ±(99.9%) 86.139 ms/op [Average]
  (min, avg, max) = (273.718, 293.428, 455.507), stdev = 56.976
  CI (99.9%): [207.289, 379.567] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:comparisons":
  110290940.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (11029094.000, 11029094.000, 11029094.000), stdev = 0.001
  CI (99.9%): [110290940.000, 110290940.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000)

# Run progress: 37.50% complete, ETA 00:25:12
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 4.611 ms/op
# Warmup Iteration   2: 3.359 ms/op
Iteration   1: 3.306 ms/op
                 comparisons: 137761.000 #
                 stableSort:  1.000 #

Iteration   2: 3.227 ms/op
                 comparisons: 137761.000 #
                 stableSort:  1.000 #

Iteration   3: 3.128 ms/op
                 comparisons: 137761.000 #
                 stableSort:  1.000 #

Iteration   4: 3.156 ms/op
                 comparisons: 137761.000 #
                 stableSort:  1.000 #

Iteration   5: 3.135 ms/op
                 comparisons: 137761.000 #
                 stableSort:  1.000 #

Iteration   6: 3.200 ms/op
                 comparisons: 137761.000 #
                 stableSort:  1.000 #

Iteration   7: 3.213 ms/op
                 comparisons: 137761.000 #
                 stableSort:  1.000 #

Iteration   8: 3.118 ms/op
                 comparisons: 137761.000 #
                 stableSort:  1.000 #

Iteration   9: 3.132 ms/op
                 comparisons: 137761.000 #
                 stableSort:  1.000 #

Iteration  10: 3.127 ms/op
                 comparisons: 137761.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue":
  3.174 ±(99.9%) 0.092 ms/op [Average]
  (min, avg, max) = (3.118, 3.174, 3.306), stdev = 0.061
  CI (99.9%): [3.082, 3.267] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:comparisons":
  1377610.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (137761.000, 137761.000, 137761.000), stdev = 0.001
  CI (99.9%): [1377610.000, 1377610.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 1000000)

# Run progress: 38.54% complete, ETA 00:24:26
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 1154.320 ms/op
# Warmup Iteration   2: 818.843 ms/op
Iteration   1: 806.033 ms/op
                 comparisons: 20352424.000 #
                 stableSort:  1.000 #

Iteration   2: 807.432 ms/op
                 comparisons: 20352424.000 #
                 stableSort:  1.000 #

Iteration   3: 798.575 ms/op
                 comparisons: 20352424.000 #
                 stableSort:  1.000 #

Iteration   4: 800.558 ms/op
                 comparisons: 20352424.000 #
                 stableSort:  1.000 #

Iteration   5: 805.485 ms/op
                 comparisons: 20352424.000 #
                 stableSort:  1.000 #

Iteration   6: 802.246 ms/op
                 comparisons: 20352424.000 #
                 stableSort:  1.000 #

Iteration   7: 800.330 ms/op
                 comparisons: 20352424.000 #
                 stableSort:  1.000 #

Iteration   8: 799.253 ms/op
                 comparisons: 20352424.000 #
                 stableSort:  1.000 #

Iteration   9: 788.863 ms/op
                 comparisons: 20352424.000 #
                 stableSort:  1.000 #

Iteration  10: 787.397 ms/op
                 comparisons: 20352424.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue":
  799.617 ±(99.9%) 10.219 ms/op [Average]
  (min, avg, max) = (787.397, 799.617, 807.432), stdev = 6.759
  CI (99.9%): [789.398, 809.836] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:comparisons":
  203524240.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (20352424.000, 20352424.000, 20352424.000), stdev = 0.001
  CI (99.9%): [203524240.000, 203524240.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000000)

# Run progress: 39.58% complete, ETA 00:23:55
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 15576.591 ms/op
# Warmup Iteration   2: 15109.238 ms/op
Iteration   1: 13915.427 ms/op
                 comparisons: 237673928.000 #
                 stableSort:  1.000 #

Iteration   2: 13720.240 ms/op
                 comparisons: 237673928.000 #
                 stableSort:  1.000 #

Iteration   3: 13619.573 ms/op
                 comparisons: 237673928.000 #
                 stableSort:  1.000 #

Iteration   4: 13614.992 ms/op
                 comparisons: 237673928.000 #
                 stableSort:  1.000 #

Iteration   5: 13647.270 ms/op
                 comparisons: 237673928.000 #
                 stableSort:  1.000 #

Iteration   6: 13650.106 ms/op
                 comparisons: 237673928.000 #
                 stableSort:  1.000 #

Iteration   7: 13616.754 ms/op
                 comparisons: 237673928.000 #
                 stableSort:  1.000 #

Iteration   8: 13603.615 ms/op
                 comparisons: 237673928.000 #
                 stableSort:  1.000 #

Iteration   9: 13595.924 ms/op
                 comparisons: 237673928.000 #
                 stableSort:  1.000 #

Iteration  10: 13723.571 ms/op
                 comparisons: 237673928.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue":
  13670.747 ±(99.9%) 146.782 ms/op [Average]
  (min, avg, max) = (13595.924, 13670.747, 13915.427), stdev = 97.087
  CI (99.9%): [13523.965, 13817.530] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:comparisons":
  2376739280.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (237673928.000, 237673928.000, 237673928.000), stdev = 0.001
  CI (99.9%): [2376739280.000, 2376739280.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000)

# Run progress: 40.63% complete, ETA 00:27:37
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 0.124 ms/op
# Warmup Iteration   2: 0.115 ms/op
Iteration   1: 0.115 ms/op
                 comparisons: 10473.000 #
                 stableSort:  ≈ 0 #

Iteration   2: 0.115 ms/op
                 comparisons: 10473.000 #
                 stableSort:  ≈ 0 #

Iteration   3: 0.115 ms/op
                 comparisons: 10473.000 #
                 stableSort:  ≈ 0 #

Iteration   4: 0.115 ms/op
                 comparisons: 10473.000 #
                 stableSort:  ≈ 0 #

Iteration   5: 0.116 ms/op
                 comparisons: 10473.000 #
                 stableSort:  ≈ 0 #

Iteration   6: 0.113 ms/op
                 comparisons: 10473.000 #
                 stableSort:  ≈ 0 #

Iteration   7: 0.112 ms/op
                 comparisons: 10473.000 #
                 stableSort:  ≈ 0 #

Iteration   8: 0.113 ms/op
                 comparisons: 10473.000 #
                 stableSort:  ≈ 0 #

Iteration   9: 0.113 ms/op
                 comparisons: 10473.000 #
                 stableSort:  ≈ 0 #

Iteration  10: 0.112 ms/op
                 comparisons: 10473.000 #
                 stableSort:  ≈ 0 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue":
  0.114 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.112, 0.114, 0.116), stdev = 0.002
  CI (99.9%): [0.112, 0.116] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:comparisons":
  104730.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10473.000, 10473.000, 10473.000), stdev = 0.001
  CI (99.9%): [104730.000, 104730.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:stableSort":
  ≈ 0 #


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 1000000)

# Run progress: 41.67% complete, ETA 00:26:44
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 18.354 ms/op
# Warmup Iteration   2: 17.899 ms/op
Iteration   1: 17.901 ms/op
                 comparisons: 1000790.000 #
                 stableSort:  1.000 #

Iteration   2: 17.906 ms/op
                 comparisons: 1000790.000 #
                 stableSort:  1.000 #

Iteration   3: 17.943 ms/op
                 comparisons: 1000790.000 #
                 stableSort:  1.000 #

Iteration   4: 17.894 ms/op
                 comparisons: 1000790.000 #
                 stableSort:  1.000 #

Iteration   5: 17.998 ms/op
                 comparisons: 1000790.000 #
                 stableSort:  1.000 #

Iteration   6: 18.014 ms/op
                 comparisons: 1000790.000 #
                 stableSort:  1.000 #

Iteration   7: 17.929 ms/op
                 comparisons: 1000790.000 #
                 stableSort:  1.000 #

Iteration   8: 17.973 ms/op
                 comparisons: 1000790.000 #
                 stableSort:  1.000 #

Iteration   9: 18.031 ms/op
                 comparisons: 1000790.000 #
                 stableSort:  1.000 #

Iteration  10: 18.367 ms/op
                 comparisons: 1000790.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue":
  17.996 ±(99.9%) 0.211 ms/op [Average]
  (min, avg, max) = (17.894, 17.996, 18.367), stdev = 0.139
  CI (99.9%): [17.785, 18.206] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:comparisons":
  10007900.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1000790.000, 1000790.000, 1000790.000), stdev = 0.001
  CI (99.9%): [10007900.000, 10007900.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000000)

# Run progress: 42.71% complete, ETA 00:25:56
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 186.972 ms/op
# Warmup Iteration   2: 186.062 ms/op
Iteration   1: 185.146 ms/op
                 comparisons: 10000861.000 #
                 stableSort:  1.000 #

Iteration   2: 190.211 ms/op
                 comparisons: 10000861.000 #
                 stableSort:  1.000 #

Iteration   3: 187.109 ms/op
                 comparisons: 10000861.000 #
                 stableSort:  1.000 #

Iteration   4: 187.236 ms/op
                 comparisons: 10000861.000 #
                 stableSort:  1.000 #

Iteration   5: 187.658 ms/op
                 comparisons: 10000861.000 #
                 stableSort:  1.000 #

Iteration   6: 186.350 ms/op
                 comparisons: 10000861.000 #
                 stableSort:  1.000 #

Iteration   7: 186.339 ms/op
                 comparisons: 10000861.000 #
                 stableSort:  1.000 #

Iteration   8: 186.373 ms/op
                 comparisons: 10000861.000 #
                 stableSort:  1.000 #

Iteration   9: 186.049 ms/op
                 comparisons: 10000861.000 #
                 stableSort:  1.000 #

Iteration  10: 186.029 ms/op
                 comparisons: 10000861.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue":
  186.850 ±(99.9%) 2.085 ms/op [Average]
  (min, avg, max) = (185.146, 186.850, 190.211), stdev = 1.379
  CI (99.9%): [184.765, 188.935] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:comparisons":
  100008610.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10000861.000, 10000861.000, 10000861.000), stdev = 0.001
  CI (99.9%): [100008610.000, 100008610.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000)

# Run progress: 43.75% complete, ETA 00:25:39
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 0.277 ms/op
# Warmup Iteration   2: 0.239 ms/op
Iteration   1: 0.239 ms/op
                 comparisons: 16545.000 #
                 stableSort:  ≈ 0 #

Iteration   2: 0.239 ms/op
                 comparisons: 16545.000 #
                 stableSort:  ≈ 0 #

Iteration   3: 0.238 ms/op
                 comparisons: 16545.000 #
                 stableSort:  ≈ 0 #

Iteration   4: 0.239 ms/op
                 comparisons: 16545.000 #
                 stableSort:  ≈ 0 #

Iteration   5: 0.238 ms/op
                 comparisons: 16545.000 #
                 stableSort:  ≈ 0 #

Iteration   6: 0.239 ms/op
                 comparisons: 16545.000 #
                 stableSort:  ≈ 0 #

Iteration   7: 0.225 ms/op
                 comparisons: 16545.000 #
                 stableSort:  ≈ 0 #

Iteration   8: 0.224 ms/op
                 comparisons: 16545.000 #
                 stableSort:  ≈ 0 #

Iteration   9: 0.224 ms/op
                 comparisons: 16545.000 #
                 stableSort:  ≈ 0 #

Iteration  10: 0.224 ms/op
                 comparisons: 16545.000 #
                 stableSort:  ≈ 0 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue":
  0.233 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.224, 0.233, 0.239), stdev = 0.007
  CI (99.9%): [0.222, 0.244] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:comparisons":
  165450.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (16545.000, 16545.000, 16545.000), stdev = 0.001
  CI (99.9%): [165450.000, 165450.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:stableSort":
  ≈ 0 #


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 1000000)

# Run progress: 44.79% complete, ETA 00:24:51
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 19.241 ms/op
# Warmup Iteration   2: 18.481 ms/op
Iteration   1: 18.372 ms/op
                 comparisons: 1012314.000 #
                 stableSort:  ≈ 0 #

Iteration   2: 18.208 ms/op
                 comparisons: 1012314.000 #
                 stableSort:  ≈ 0 #

Iteration   3: 18.231 ms/op
                 comparisons: 1012314.000 #
                 stableSort:  ≈ 0 #

Iteration   4: 18.304 ms/op
                 comparisons: 1012314.000 #
                 stableSort:  ≈ 0 #

Iteration   5: 18.335 ms/op
                 comparisons: 1012314.000 #
                 stableSort:  ≈ 0 #

Iteration   6: 18.251 ms/op
                 comparisons: 1012314.000 #
                 stableSort:  ≈ 0 #

Iteration   7: 18.156 ms/op
                 comparisons: 1012314.000 #
                 stableSort:  ≈ 0 #

Iteration   8: 18.018 ms/op
                 comparisons: 1012314.000 #
                 stableSort:  ≈ 0 #

Iteration   9: 18.099 ms/op
                 comparisons: 1012314.000 #
                 stableSort:  ≈ 0 #

Iteration  10: 18.080 ms/op
                 comparisons: 1012314.000 #
                 stableSort:  ≈ 0 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue":
  18.205 ±(99.9%) 0.176 ms/op [Average]
  (min, avg, max) = (18.018, 18.205, 18.372), stdev = 0.116
  CI (99.9%): [18.030, 18.381] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:comparisons":
  10123140.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1012314.000, 1012314.000, 1012314.000), stdev = 0.001
  CI (99.9%): [10123140.000, 10123140.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:stableSort":
  ≈ 0 #


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000000)

# Run progress: 45.83% complete, ETA 00:24:06
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 200.341 ms/op
# Warmup Iteration   2: 195.022 ms/op
Iteration   1: 194.232 ms/op
                 comparisons: 10015917.000 #
                 stableSort:  1.000 #

Iteration   2: 195.361 ms/op
                 comparisons: 10015917.000 #
                 stableSort:  1.000 #

Iteration   3: 194.691 ms/op
                 comparisons: 10015917.000 #
                 stableSort:  1.000 #

Iteration   4: 195.714 ms/op
                 comparisons: 10015917.000 #
                 stableSort:  1.000 #

Iteration   5: 194.446 ms/op
                 comparisons: 10015917.000 #
                 stableSort:  1.000 #

Iteration   6: 194.438 ms/op
                 comparisons: 10015917.000 #
                 stableSort:  1.000 #

Iteration   7: 195.778 ms/op
                 comparisons: 10015917.000 #
                 stableSort:  1.000 #

Iteration   8: 197.709 ms/op
                 comparisons: 10015917.000 #
                 stableSort:  1.000 #

Iteration   9: 197.229 ms/op
                 comparisons: 10015917.000 #
                 stableSort:  1.000 #

Iteration  10: 197.512 ms/op
                 comparisons: 10015917.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue":
  195.711 ±(99.9%) 2.023 ms/op [Average]
  (min, avg, max) = (194.232, 195.711, 197.709), stdev = 1.338
  CI (99.9%): [193.688, 197.734] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:comparisons":
  100159170.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10015917.000, 10015917.000, 10015917.000), stdev = 0.001
  CI (99.9%): [100159170.000, 100159170.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000)

# Run progress: 46.88% complete, ETA 00:23:50
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 4.742 ms/op
# Warmup Iteration   2: 3.133 ms/op
Iteration   1: 3.096 ms/op
                 comparisons: 137761.000 #
                 stableSort:  1.000 #

Iteration   2: 3.133 ms/op
                 comparisons: 137761.000 #
                 stableSort:  1.000 #

Iteration   3: 3.100 ms/op
                 comparisons: 137761.000 #
                 stableSort:  1.000 #

Iteration   4: 3.142 ms/op
                 comparisons: 137761.000 #
                 stableSort:  1.000 #

Iteration   5: 3.122 ms/op
                 comparisons: 137761.000 #
                 stableSort:  1.000 #

Iteration   6: 3.103 ms/op
                 comparisons: 137761.000 #
                 stableSort:  1.000 #

Iteration   7: 3.103 ms/op
                 comparisons: 137761.000 #
                 stableSort:  1.000 #

Iteration   8: 3.092 ms/op
                 comparisons: 137761.000 #
                 stableSort:  1.000 #

Iteration   9: 3.094 ms/op
                 comparisons: 137761.000 #
                 stableSort:  1.000 #

Iteration  10: 3.121 ms/op
                 comparisons: 137761.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue":
  3.111 ±(99.9%) 0.027 ms/op [Average]
  (min, avg, max) = (3.092, 3.111, 3.142), stdev = 0.018
  CI (99.9%): [3.084, 3.137] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:comparisons":
  1377610.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (137761.000, 137761.000, 137761.000), stdev = 0.001
  CI (99.9%): [1377610.000, 1377610.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 1000000)

# Run progress: 47.92% complete, ETA 00:23:04
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 58.881 ms/op
# Warmup Iteration   2: 49.282 ms/op
Iteration   1: 48.842 ms/op
                 comparisons: 2280683.000 #
                 stableSort:  ≈ 0 #

Iteration   2: 48.543 ms/op
                 comparisons: 2280683.000 #
                 stableSort:  ≈ 0 #

Iteration   3: 48.501 ms/op
                 comparisons: 2280683.000 #
                 stableSort:  ≈ 0 #

Iteration   4: 48.385 ms/op
                 comparisons: 2280683.000 #
                 stableSort:  ≈ 0 #

Iteration   5: 48.385 ms/op
                 comparisons: 2280683.000 #
                 stableSort:  ≈ 0 #

Iteration   6: 48.584 ms/op
                 comparisons: 2280683.000 #
                 stableSort:  ≈ 0 #

Iteration   7: 48.461 ms/op
                 comparisons: 2280683.000 #
                 stableSort:  ≈ 0 #

Iteration   8: 48.459 ms/op
                 comparisons: 2280683.000 #
                 stableSort:  ≈ 0 #

Iteration   9: 48.437 ms/op
                 comparisons: 2280683.000 #
                 stableSort:  ≈ 0 #

Iteration  10: 48.421 ms/op
                 comparisons: 2280683.000 #
                 stableSort:  ≈ 0 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue":
  48.502 ±(99.9%) 0.205 ms/op [Average]
  (min, avg, max) = (48.385, 48.502, 48.842), stdev = 0.136
  CI (99.9%): [48.296, 48.707] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:comparisons":
  22806830.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (2280683.000, 2280683.000, 2280683.000), stdev = 0.001
  CI (99.9%): [22806830.000, 22806830.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:stableSort":
  ≈ 0 #


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000000)

# Run progress: 48.96% complete, ETA 00:22:23
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 297.343 ms/op
# Warmup Iteration   2: 272.627 ms/op
Iteration   1: 269.783 ms/op
                 comparisons: 11860948.000 #
                 stableSort:  ≈ 0 #

Iteration   2: 261.652 ms/op
                 comparisons: 11860948.000 #
                 stableSort:  ≈ 0 #

Iteration   3: 261.764 ms/op
                 comparisons: 11860948.000 #
                 stableSort:  ≈ 0 #

Iteration   4: 262.352 ms/op
                 comparisons: 11860948.000 #
                 stableSort:  ≈ 0 #

Iteration   5: 262.250 ms/op
                 comparisons: 11860948.000 #
                 stableSort:  ≈ 0 #

Iteration   6: 262.175 ms/op
                 comparisons: 11860948.000 #
                 stableSort:  ≈ 0 #

Iteration   7: 262.420 ms/op
                 comparisons: 11860948.000 #
                 stableSort:  ≈ 0 #

Iteration   8: 261.196 ms/op
                 comparisons: 11860948.000 #
                 stableSort:  ≈ 0 #

Iteration   9: 261.756 ms/op
                 comparisons: 11860948.000 #
                 stableSort:  ≈ 0 #

Iteration  10: 261.020 ms/op
                 comparisons: 11860948.000 #
                 stableSort:  ≈ 0 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue":
  262.637 ±(99.9%) 3.863 ms/op [Average]
  (min, avg, max) = (261.020, 262.637, 269.783), stdev = 2.555
  CI (99.9%): [258.774, 266.500] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:comparisons":
  118609480.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (11860948.000, 11860948.000, 11860948.000), stdev = 0.001
  CI (99.9%): [118609480.000, 118609480.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:stableSort":
  ≈ 0 #


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000)

# Run progress: 50.00% complete, ETA 00:22:05
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 5.950 ms/op
# Warmup Iteration   2: 5.731 ms/op
Iteration   1: 5.699 ms/op
                 comparisons: 239871.000 #
                 stableSort:  1.000 #

Iteration   2: 5.701 ms/op
                 comparisons: 239871.000 #
                 stableSort:  1.000 #

Iteration   3: 5.696 ms/op
                 comparisons: 239871.000 #
                 stableSort:  1.000 #

Iteration   4: 5.651 ms/op
                 comparisons: 239871.000 #
                 stableSort:  1.000 #

Iteration   5: 5.689 ms/op
                 comparisons: 239871.000 #
                 stableSort:  1.000 #

Iteration   6: 5.697 ms/op
                 comparisons: 239871.000 #
                 stableSort:  1.000 #

Iteration   7: 5.700 ms/op
                 comparisons: 239871.000 #
                 stableSort:  1.000 #

Iteration   8: 5.751 ms/op
                 comparisons: 239871.000 #
                 stableSort:  1.000 #

Iteration   9: 5.961 ms/op
                 comparisons: 239871.000 #
                 stableSort:  1.000 #

Iteration  10: 5.945 ms/op
                 comparisons: 239871.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap":
  5.749 ±(99.9%) 0.167 ms/op [Average]
  (min, avg, max) = (5.651, 5.749, 5.961), stdev = 0.110
  CI (99.9%): [5.582, 5.915] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:comparisons":
  2398710.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (239871.000, 239871.000, 239871.000), stdev = 0.001
  CI (99.9%): [2398710.000, 2398710.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 1000000)

# Run progress: 51.04% complete, ETA 00:21:22
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 1699.056 ms/op
# Warmup Iteration   2: 1609.148 ms/op
Iteration   1: 1630.230 ms/op
                 comparisons: 37192573.000 #
                 stableSort:  1.000 #

Iteration   2: 1615.680 ms/op
                 comparisons: 37192573.000 #
                 stableSort:  1.000 #

Iteration   3: 1615.601 ms/op
                 comparisons: 37192573.000 #
                 stableSort:  1.000 #

Iteration   4: 1618.590 ms/op
                 comparisons: 37192573.000 #
                 stableSort:  1.000 #

Iteration   5: 1605.163 ms/op
                 comparisons: 37192573.000 #
                 stableSort:  1.000 #

Iteration   6: 1605.258 ms/op
                 comparisons: 37192573.000 #
                 stableSort:  1.000 #

Iteration   7: 1608.962 ms/op
                 comparisons: 37192573.000 #
                 stableSort:  1.000 #

Iteration   8: 1600.490 ms/op
                 comparisons: 37192573.000 #
                 stableSort:  1.000 #

Iteration   9: 1604.882 ms/op
                 comparisons: 37192573.000 #
                 stableSort:  1.000 #

Iteration  10: 1618.985 ms/op
                 comparisons: 37192573.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap":
  1612.384 ±(99.9%) 13.655 ms/op [Average]
  (min, avg, max) = (1600.490, 1612.384, 1630.230), stdev = 9.032
  CI (99.9%): [1598.729, 1626.039] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:comparisons":
  371925730.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (37192573.000, 37192573.000, 37192573.000), stdev = 0.001
  CI (99.9%): [371925730.000, 371925730.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000000)

# Run progress: 52.08% complete, ETA 00:20:50
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 34160.797 ms/op
# Warmup Iteration   2: 34430.524 ms/op
Iteration   1: 34156.418 ms/op
                 comparisons: 438658483.000 #
                 stableSort:  1.000 #

Iteration   2: 33766.951 ms/op
                 comparisons: 438658483.000 #
                 stableSort:  1.000 #

Iteration   3: 33660.219 ms/op
                 comparisons: 438658483.000 #
                 stableSort:  1.000 #

Iteration   4: 33722.460 ms/op
                 comparisons: 438658483.000 #
                 stableSort:  1.000 #

Iteration   5: 33646.616 ms/op
                 comparisons: 438658483.000 #
                 stableSort:  1.000 #

Iteration   6: 33660.530 ms/op
                 comparisons: 438658483.000 #
                 stableSort:  1.000 #

Iteration   7: 33762.404 ms/op
                 comparisons: 438658483.000 #
                 stableSort:  1.000 #

Iteration   8: 33354.400 ms/op
                 comparisons: 438658483.000 #
                 stableSort:  1.000 #

Iteration   9: 33330.102 ms/op
                 comparisons: 438658483.000 #
                 stableSort:  1.000 #

Iteration  10: 33223.526 ms/op
                 comparisons: 438658483.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap":
  33628.363 ±(99.9%) 407.909 ms/op [Average]
  (min, avg, max) = (33223.526, 33628.363, 34156.418), stdev = 269.807
  CI (99.9%): [33220.454, 34036.272] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:comparisons":
  4386584830.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (438658483.000, 438658483.000, 438658483.000), stdev = 0.001
  CI (99.9%): [4386584830.000, 4386584830.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000)

# Run progress: 53.13% complete, ETA 00:26:18
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 0.123 ms/op
# Warmup Iteration   2: 0.115 ms/op
Iteration   1: 0.114 ms/op
                 comparisons: 10348.000 #
                 stableSort:  1.000 #

Iteration   2: 0.114 ms/op
                 comparisons: 10348.000 #
                 stableSort:  1.000 #

Iteration   3: 0.114 ms/op
                 comparisons: 10348.000 #
                 stableSort:  1.000 #

Iteration   4: 0.114 ms/op
                 comparisons: 10348.000 #
                 stableSort:  1.000 #

Iteration   5: 0.114 ms/op
                 comparisons: 10348.000 #
                 stableSort:  1.000 #

Iteration   6: 0.114 ms/op
                 comparisons: 10348.000 #
                 stableSort:  1.000 #

Iteration   7: 0.114 ms/op
                 comparisons: 10348.000 #
                 stableSort:  1.000 #

Iteration   8: 0.114 ms/op
                 comparisons: 10348.000 #
                 stableSort:  1.000 #

Iteration   9: 0.114 ms/op
                 comparisons: 10348.000 #
                 stableSort:  1.000 #

Iteration  10: 0.115 ms/op
                 comparisons: 10348.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap":
  0.114 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.114, 0.114, 0.115), stdev = 0.001
  CI (99.9%): [0.114, 0.115] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:comparisons":
  103480.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10348.000, 10348.000, 10348.000), stdev = 0.001
  CI (99.9%): [103480.000, 103480.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 1000000)

# Run progress: 54.17% complete, ETA 00:25:24
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 19.486 ms/op
# Warmup Iteration   2: 19.065 ms/op
Iteration   1: 19.040 ms/op
                 comparisons: 1000563.000 #
                 stableSort:  1.000 #

Iteration   2: 19.209 ms/op
                 comparisons: 1000563.000 #
                 stableSort:  1.000 #

Iteration   3: 19.139 ms/op
                 comparisons: 1000563.000 #
                 stableSort:  1.000 #

Iteration   4: 19.033 ms/op
                 comparisons: 1000563.000 #
                 stableSort:  1.000 #

Iteration   5: 18.971 ms/op
                 comparisons: 1000563.000 #
                 stableSort:  1.000 #

Iteration   6: 18.986 ms/op
                 comparisons: 1000563.000 #
                 stableSort:  1.000 #

Iteration   7: 18.996 ms/op
                 comparisons: 1000563.000 #
                 stableSort:  1.000 #

Iteration   8: 18.986 ms/op
                 comparisons: 1000563.000 #
                 stableSort:  1.000 #

Iteration   9: 19.010 ms/op
                 comparisons: 1000563.000 #
                 stableSort:  1.000 #

Iteration  10: 18.951 ms/op
                 comparisons: 1000563.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap":
  19.032 ±(99.9%) 0.122 ms/op [Average]
  (min, avg, max) = (18.951, 19.032, 19.209), stdev = 0.081
  CI (99.9%): [18.910, 19.154] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:comparisons":
  10005630.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1000563.000, 1000563.000, 1000563.000), stdev = 0.001
  CI (99.9%): [10005630.000, 10005630.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000000)

# Run progress: 55.21% complete, ETA 00:24:33
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 195.408 ms/op
# Warmup Iteration   2: 197.708 ms/op
Iteration   1: 199.137 ms/op
                 comparisons: 10000645.000 #
                 stableSort:  1.000 #

Iteration   2: 199.377 ms/op
                 comparisons: 10000645.000 #
                 stableSort:  1.000 #

Iteration   3: 198.253 ms/op
                 comparisons: 10000645.000 #
                 stableSort:  1.000 #

Iteration   4: 198.663 ms/op
                 comparisons: 10000645.000 #
                 stableSort:  1.000 #

Iteration   5: 198.778 ms/op
                 comparisons: 10000645.000 #
                 stableSort:  1.000 #

Iteration   6: 199.439 ms/op
                 comparisons: 10000645.000 #
                 stableSort:  1.000 #

Iteration   7: 198.638 ms/op
                 comparisons: 10000645.000 #
                 stableSort:  1.000 #

Iteration   8: 197.980 ms/op
                 comparisons: 10000645.000 #
                 stableSort:  1.000 #

Iteration   9: 199.753 ms/op
                 comparisons: 10000645.000 #
                 stableSort:  1.000 #

Iteration  10: 200.574 ms/op
                 comparisons: 10000645.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap":
  199.059 ±(99.9%) 1.155 ms/op [Average]
  (min, avg, max) = (197.980, 199.059, 200.574), stdev = 0.764
  CI (99.9%): [197.904, 200.215] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:comparisons":
  100006450.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10000645.000, 10000645.000, 10000645.000), stdev = 0.001
  CI (99.9%): [100006450.000, 100006450.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000)

# Run progress: 56.25% complete, ETA 00:24:01
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 0.263 ms/op
# Warmup Iteration   2: 0.245 ms/op
Iteration   1: 0.245 ms/op
                 comparisons: 15846.000 #
                 stableSort:  1.000 #

Iteration   2: 0.246 ms/op
                 comparisons: 15846.000 #
                 stableSort:  1.000 #

Iteration   3: 0.245 ms/op
                 comparisons: 15846.000 #
                 stableSort:  1.000 #

Iteration   4: 0.247 ms/op
                 comparisons: 15846.000 #
                 stableSort:  1.000 #

Iteration   5: 0.246 ms/op
                 comparisons: 15846.000 #
                 stableSort:  1.000 #

Iteration   6: 0.246 ms/op
                 comparisons: 15846.000 #
                 stableSort:  1.000 #

Iteration   7: 0.246 ms/op
                 comparisons: 15846.000 #
                 stableSort:  1.000 #

Iteration   8: 0.246 ms/op
                 comparisons: 15846.000 #
                 stableSort:  1.000 #

Iteration   9: 0.261 ms/op
                 comparisons: 15846.000 #
                 stableSort:  1.000 #

Iteration  10: 0.246 ms/op
                 comparisons: 15846.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap":
  0.247 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.245, 0.247, 0.261), stdev = 0.005
  CI (99.9%): [0.240, 0.255] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:comparisons":
  158460.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (15846.000, 15846.000, 15846.000), stdev = 0.001
  CI (99.9%): [158460.000, 158460.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 1000000)

# Run progress: 57.29% complete, ETA 00:23:10
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 18.923 ms/op
# Warmup Iteration   2: 18.107 ms/op
Iteration   1: 18.064 ms/op
                 comparisons: 1010700.000 #
                 stableSort:  1.000 #

Iteration   2: 18.081 ms/op
                 comparisons: 1010700.000 #
                 stableSort:  1.000 #

Iteration   3: 18.094 ms/op
                 comparisons: 1010700.000 #
                 stableSort:  1.000 #

Iteration   4: 18.061 ms/op
                 comparisons: 1010700.000 #
                 stableSort:  1.000 #

Iteration   5: 18.036 ms/op
                 comparisons: 1010700.000 #
                 stableSort:  1.000 #

Iteration   6: 18.067 ms/op
                 comparisons: 1010700.000 #
                 stableSort:  1.000 #

Iteration   7: 18.094 ms/op
                 comparisons: 1010700.000 #
                 stableSort:  1.000 #

Iteration   8: 18.059 ms/op
                 comparisons: 1010700.000 #
                 stableSort:  1.000 #

Iteration   9: 18.065 ms/op
                 comparisons: 1010700.000 #
                 stableSort:  1.000 #

Iteration  10: 18.027 ms/op
                 comparisons: 1010700.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap":
  18.065 ±(99.9%) 0.033 ms/op [Average]
  (min, avg, max) = (18.027, 18.065, 18.094), stdev = 0.022
  CI (99.9%): [18.032, 18.098] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:comparisons":
  10107000.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1010700.000, 1010700.000, 1010700.000), stdev = 0.001
  CI (99.9%): [10107000.000, 10107000.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000000)

# Run progress: 58.33% complete, ETA 00:22:22
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 204.339 ms/op
# Warmup Iteration   2: 203.564 ms/op
Iteration   1: 202.787 ms/op
                 comparisons: 10013616.000 #
                 stableSort:  1.000 #

Iteration   2: 203.433 ms/op
                 comparisons: 10013616.000 #
                 stableSort:  1.000 #

Iteration   3: 203.402 ms/op
                 comparisons: 10013616.000 #
                 stableSort:  1.000 #

Iteration   4: 204.075 ms/op
                 comparisons: 10013616.000 #
                 stableSort:  1.000 #

Iteration   5: 202.376 ms/op
                 comparisons: 10013616.000 #
                 stableSort:  1.000 #

Iteration   6: 202.443 ms/op
                 comparisons: 10013616.000 #
                 stableSort:  1.000 #

Iteration   7: 202.352 ms/op
                 comparisons: 10013616.000 #
                 stableSort:  1.000 #

Iteration   8: 202.124 ms/op
                 comparisons: 10013616.000 #
                 stableSort:  1.000 #

Iteration   9: 202.677 ms/op
                 comparisons: 10013616.000 #
                 stableSort:  1.000 #

Iteration  10: 202.555 ms/op
                 comparisons: 10013616.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap":
  202.823 ±(99.9%) 0.932 ms/op [Average]
  (min, avg, max) = (202.124, 202.823, 204.075), stdev = 0.617
  CI (99.9%): [201.890, 203.755] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:comparisons":
  100136160.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10013616.000, 10013616.000, 10013616.000), stdev = 0.001
  CI (99.9%): [100136160.000, 100136160.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000)

# Run progress: 59.38% complete, ETA 00:21:50
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 5.701 ms/op
# Warmup Iteration   2: 5.558 ms/op
Iteration   1: 5.499 ms/op
                 comparisons: 239871.000 #
                 stableSort:  1.000 #

Iteration   2: 5.539 ms/op
                 comparisons: 239871.000 #
                 stableSort:  1.000 #

Iteration   3: 5.504 ms/op
                 comparisons: 239871.000 #
                 stableSort:  1.000 #

Iteration   4: 5.514 ms/op
                 comparisons: 239871.000 #
                 stableSort:  1.000 #

Iteration   5: 5.544 ms/op
                 comparisons: 239871.000 #
                 stableSort:  1.000 #

Iteration   6: 5.557 ms/op
                 comparisons: 239871.000 #
                 stableSort:  1.000 #

Iteration   7: 5.461 ms/op
                 comparisons: 239871.000 #
                 stableSort:  1.000 #

Iteration   8: 5.485 ms/op
                 comparisons: 239871.000 #
                 stableSort:  1.000 #

Iteration   9: 5.501 ms/op
                 comparisons: 239871.000 #
                 stableSort:  1.000 #

Iteration  10: 5.581 ms/op
                 comparisons: 239871.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap":
  5.519 ±(99.9%) 0.055 ms/op [Average]
  (min, avg, max) = (5.461, 5.519, 5.581), stdev = 0.036
  CI (99.9%): [5.464, 5.573] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:comparisons":
  2398710.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (239871.000, 239871.000, 239871.000), stdev = 0.001
  CI (99.9%): [2398710.000, 2398710.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 1000000)

# Run progress: 60.42% complete, ETA 00:21:03
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 50.141 ms/op
# Warmup Iteration   2: 48.524 ms/op
Iteration   1: 48.701 ms/op
                 comparisons: 2315300.000 #
                 stableSort:  1.000 #

Iteration   2: 48.642 ms/op
                 comparisons: 2315300.000 #
                 stableSort:  1.000 #

Iteration   3: 49.632 ms/op
                 comparisons: 2315300.000 #
                 stableSort:  1.000 #

Iteration   4: 49.780 ms/op
                 comparisons: 2315300.000 #
                 stableSort:  1.000 #

Iteration   5: 49.796 ms/op
                 comparisons: 2315300.000 #
                 stableSort:  1.000 #

Iteration   6: 49.781 ms/op
                 comparisons: 2315300.000 #
                 stableSort:  1.000 #

Iteration   7: 49.726 ms/op
                 comparisons: 2315300.000 #
                 stableSort:  1.000 #

Iteration   8: 49.721 ms/op
                 comparisons: 2315300.000 #
                 stableSort:  1.000 #

Iteration   9: 49.511 ms/op
                 comparisons: 2315300.000 #
                 stableSort:  1.000 #

Iteration  10: 49.579 ms/op
                 comparisons: 2315300.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap":
  49.487 ±(99.9%) 0.665 ms/op [Average]
  (min, avg, max) = (48.642, 49.487, 49.796), stdev = 0.440
  CI (99.9%): [48.822, 50.152] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:comparisons":
  23153000.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (2315300.000, 2315300.000, 2315300.000), stdev = 0.001
  CI (99.9%): [23153000.000, 23153000.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000000)

# Run progress: 61.46% complete, ETA 00:20:18
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 285.495 ms/op
# Warmup Iteration   2: 278.433 ms/op
Iteration   1: 276.181 ms/op
                 comparisons: 11859505.000 #
                 stableSort:  1.000 #

Iteration   2: 274.256 ms/op
                 comparisons: 11859505.000 #
                 stableSort:  1.000 #

Iteration   3: 274.403 ms/op
                 comparisons: 11859505.000 #
                 stableSort:  1.000 #

Iteration   4: 273.707 ms/op
                 comparisons: 11859505.000 #
                 stableSort:  1.000 #

Iteration   5: 271.079 ms/op
                 comparisons: 11859505.000 #
                 stableSort:  1.000 #

Iteration   6: 270.287 ms/op
                 comparisons: 11859505.000 #
                 stableSort:  1.000 #

Iteration   7: 269.661 ms/op
                 comparisons: 11859505.000 #
                 stableSort:  1.000 #

Iteration   8: 270.159 ms/op
                 comparisons: 11859505.000 #
                 stableSort:  1.000 #

Iteration   9: 269.848 ms/op
                 comparisons: 11859505.000 #
                 stableSort:  1.000 #

Iteration  10: 270.394 ms/op
                 comparisons: 11859505.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap":
  271.997 ±(99.9%) 3.603 ms/op [Average]
  (min, avg, max) = (269.661, 271.997, 276.181), stdev = 2.383
  CI (99.9%): [268.395, 275.600] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:comparisons":
  118595050.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (11859505.000, 11859505.000, 11859505.000), stdev = 0.001
  CI (99.9%): [118595050.000, 118595050.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000)

# Run progress: 62.50% complete, ETA 00:19:47
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 4.316 ms/op
# Warmup Iteration   2: 4.020 ms/op
Iteration   1: 4.014 ms/op
                 comparisons: 127580.000 #
                 stableSort:  1.000 #

Iteration   2: 4.048 ms/op
                 comparisons: 127580.000 #
                 stableSort:  1.000 #

Iteration   3: 4.024 ms/op
                 comparisons: 127580.000 #
                 stableSort:  1.000 #

Iteration   4: 4.022 ms/op
                 comparisons: 127580.000 #
                 stableSort:  1.000 #

Iteration   5: 4.014 ms/op
                 comparisons: 127580.000 #
                 stableSort:  1.000 #

Iteration   6: 4.005 ms/op
                 comparisons: 127580.000 #
                 stableSort:  1.000 #

Iteration   7: 4.000 ms/op
                 comparisons: 127580.000 #
                 stableSort:  1.000 #

Iteration   8: 4.007 ms/op
                 comparisons: 127580.000 #
                 stableSort:  1.000 #

Iteration   9: 3.995 ms/op
                 comparisons: 127580.000 #
                 stableSort:  1.000 #

Iteration  10: 4.008 ms/op
                 comparisons: 127580.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2":
  4.014 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (3.995, 4.014, 4.048), stdev = 0.015
  CI (99.9%): [3.991, 4.037] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:comparisons":
  1275800.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (127580.000, 127580.000, 127580.000), stdev = 0.001
  CI (99.9%): [1275800.000, 1275800.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 1000000)

# Run progress: 63.54% complete, ETA 00:19:02
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 1361.883 ms/op
# Warmup Iteration   2: 1350.154 ms/op
Iteration   1: 1328.756 ms/op
                 comparisons: 19314605.000 #
                 stableSort:  1.000 #

Iteration   2: 1320.666 ms/op
                 comparisons: 19314605.000 #
                 stableSort:  1.000 #

Iteration   3: 1317.340 ms/op
                 comparisons: 19314605.000 #
                 stableSort:  1.000 #

Iteration   4: 1307.701 ms/op
                 comparisons: 19314605.000 #
                 stableSort:  1.000 #

Iteration   5: 1319.168 ms/op
                 comparisons: 19314605.000 #
                 stableSort:  1.000 #

Iteration   6: 1317.227 ms/op
                 comparisons: 19314605.000 #
                 stableSort:  1.000 #

Iteration   7: 1319.569 ms/op
                 comparisons: 19314605.000 #
                 stableSort:  1.000 #

Iteration   8: 1312.857 ms/op
                 comparisons: 19314605.000 #
                 stableSort:  1.000 #

Iteration   9: 1302.165 ms/op
                 comparisons: 19314605.000 #
                 stableSort:  1.000 #

Iteration  10: 1297.838 ms/op
                 comparisons: 19314605.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2":
  1314.329 ±(99.9%) 14.099 ms/op [Average]
  (min, avg, max) = (1297.838, 1314.329, 1328.756), stdev = 9.325
  CI (99.9%): [1300.230, 1328.427] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:comparisons":
  193146050.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (19314605.000, 19314605.000, 19314605.000), stdev = 0.001
  CI (99.9%): [193146050.000, 193146050.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000000)

# Run progress: 64.58% complete, ETA 00:18:22
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 25252.066 ms/op
# Warmup Iteration   2: 25032.299 ms/op
Iteration   1: 25181.810 ms/op
                 comparisons: 226866171.000 #
                 stableSort:  1.000 #

Iteration   2: 24931.164 ms/op
                 comparisons: 226866171.000 #
                 stableSort:  1.000 #

Iteration   3: 24953.714 ms/op
                 comparisons: 226866171.000 #
                 stableSort:  1.000 #

Iteration   4: 24911.628 ms/op
                 comparisons: 226866171.000 #
                 stableSort:  1.000 #

Iteration   5: 25274.751 ms/op
                 comparisons: 226866171.000 #
                 stableSort:  1.000 #

Iteration   6: 25169.511 ms/op
                 comparisons: 226866171.000 #
                 stableSort:  1.000 #

Iteration   7: 25512.217 ms/op
                 comparisons: 226866171.000 #
                 stableSort:  1.000 #

Iteration   8: 25196.371 ms/op
                 comparisons: 226866171.000 #
                 stableSort:  1.000 #

Iteration   9: 25182.613 ms/op
                 comparisons: 226866171.000 #
                 stableSort:  1.000 #

Iteration  10: 25261.148 ms/op
                 comparisons: 226866171.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2":
  25157.493 ±(99.9%) 278.956 ms/op [Average]
  (min, avg, max) = (24911.628, 25157.493, 25512.217), stdev = 184.512
  CI (99.9%): [24878.537, 25436.448] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:comparisons":
  2268661710.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (226866171.000, 226866171.000, 226866171.000), stdev = 0.001
  CI (99.9%): [2268661710.000, 2268661710.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000)

# Run progress: 65.63% complete, ETA 00:20:24
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 0.120 ms/op
# Warmup Iteration   2: 0.117 ms/op
Iteration   1: 0.117 ms/op
                 comparisons: 10290.000 #
                 stableSort:  1.000 #

Iteration   2: 0.117 ms/op
                 comparisons: 10290.000 #
                 stableSort:  1.000 #

Iteration   3: 0.117 ms/op
                 comparisons: 10290.000 #
                 stableSort:  1.000 #

Iteration   4: 0.118 ms/op
                 comparisons: 10290.000 #
                 stableSort:  1.000 #

Iteration   5: 0.118 ms/op
                 comparisons: 10290.000 #
                 stableSort:  1.000 #

Iteration   6: 0.118 ms/op
                 comparisons: 10290.000 #
                 stableSort:  1.000 #

Iteration   7: 0.118 ms/op
                 comparisons: 10290.000 #
                 stableSort:  1.000 #

Iteration   8: 0.118 ms/op
                 comparisons: 10290.000 #
                 stableSort:  1.000 #

Iteration   9: 0.118 ms/op
                 comparisons: 10290.000 #
                 stableSort:  1.000 #

Iteration  10: 0.118 ms/op
                 comparisons: 10290.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2":
  0.118 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.117, 0.118, 0.118), stdev = 0.001
  CI (99.9%): [0.117, 0.118] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:comparisons":
  102900.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10290.000, 10290.000, 10290.000), stdev = 0.001
  CI (99.9%): [102900.000, 102900.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 1000000)

# Run progress: 66.67% complete, ETA 00:19:34
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 19.661 ms/op
# Warmup Iteration   2: 19.843 ms/op
Iteration   1: 18.862 ms/op
                 comparisons: 1000488.000 #
                 stableSort:  1.000 #

Iteration   2: 19.760 ms/op
                 comparisons: 1000488.000 #
                 stableSort:  1.000 #

Iteration   3: 18.697 ms/op
                 comparisons: 1000488.000 #
                 stableSort:  1.000 #

Iteration   4: 19.175 ms/op
                 comparisons: 1000488.000 #
                 stableSort:  1.000 #

Iteration   5: 18.747 ms/op
                 comparisons: 1000488.000 #
                 stableSort:  1.000 #

Iteration   6: 18.717 ms/op
                 comparisons: 1000488.000 #
                 stableSort:  1.000 #

Iteration   7: 18.637 ms/op
                 comparisons: 1000488.000 #
                 stableSort:  1.000 #

Iteration   8: 18.963 ms/op
                 comparisons: 1000488.000 #
                 stableSort:  1.000 #

Iteration   9: 18.777 ms/op
                 comparisons: 1000488.000 #
                 stableSort:  1.000 #

Iteration  10: 18.595 ms/op
                 comparisons: 1000488.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2":
  18.893 ±(99.9%) 0.527 ms/op [Average]
  (min, avg, max) = (18.595, 18.893, 19.760), stdev = 0.349
  CI (99.9%): [18.366, 19.420] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:comparisons":
  10004880.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1000488.000, 1000488.000, 1000488.000), stdev = 0.001
  CI (99.9%): [10004880.000, 10004880.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000000)

# Run progress: 67.71% complete, ETA 00:18:47
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 199.195 ms/op
# Warmup Iteration   2: 202.545 ms/op
Iteration   1: 200.870 ms/op
                 comparisons: 10000571.000 #
                 stableSort:  1.000 #

Iteration   2: 200.395 ms/op
                 comparisons: 10000571.000 #
                 stableSort:  1.000 #

Iteration   3: 200.090 ms/op
                 comparisons: 10000571.000 #
                 stableSort:  1.000 #

Iteration   4: 199.815 ms/op
                 comparisons: 10000571.000 #
                 stableSort:  1.000 #

Iteration   5: 200.185 ms/op
                 comparisons: 10000571.000 #
                 stableSort:  1.000 #

Iteration   6: 200.052 ms/op
                 comparisons: 10000571.000 #
                 stableSort:  1.000 #

Iteration   7: 199.730 ms/op
                 comparisons: 10000571.000 #
                 stableSort:  1.000 #

Iteration   8: 199.739 ms/op
                 comparisons: 10000571.000 #
                 stableSort:  1.000 #

Iteration   9: 200.650 ms/op
                 comparisons: 10000571.000 #
                 stableSort:  1.000 #

Iteration  10: 199.532 ms/op
                 comparisons: 10000571.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2":
  200.106 ±(99.9%) 0.650 ms/op [Average]
  (min, avg, max) = (199.532, 200.106, 200.870), stdev = 0.430
  CI (99.9%): [199.456, 200.756] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:comparisons":
  100005710.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10000571.000, 10000571.000, 10000571.000), stdev = 0.001
  CI (99.9%): [100005710.000, 100005710.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000)

# Run progress: 68.75% complete, ETA 00:18:11
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 0.257 ms/op
# Warmup Iteration   2: 0.240 ms/op
Iteration   1: 0.240 ms/op
                 comparisons: 15135.000 #
                 stableSort:  1.000 #

Iteration   2: 0.241 ms/op
                 comparisons: 15135.000 #
                 stableSort:  1.000 #

Iteration   3: 0.242 ms/op
                 comparisons: 15135.000 #
                 stableSort:  1.000 #

Iteration   4: 0.241 ms/op
                 comparisons: 15135.000 #
                 stableSort:  1.000 #

Iteration   5: 0.240 ms/op
                 comparisons: 15135.000 #
                 stableSort:  1.000 #

Iteration   6: 0.241 ms/op
                 comparisons: 15135.000 #
                 stableSort:  1.000 #

Iteration   7: 0.241 ms/op
                 comparisons: 15135.000 #
                 stableSort:  1.000 #

Iteration   8: 0.247 ms/op
                 comparisons: 15135.000 #
                 stableSort:  1.000 #

Iteration   9: 0.246 ms/op
                 comparisons: 15135.000 #
                 stableSort:  1.000 #

Iteration  10: 0.245 ms/op
                 comparisons: 15135.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2":
  0.242 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.240, 0.242, 0.247), stdev = 0.003
  CI (99.9%): [0.238, 0.246] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:comparisons":
  151350.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (15135.000, 15135.000, 15135.000), stdev = 0.001
  CI (99.9%): [151350.000, 151350.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 1000000)

# Run progress: 69.79% complete, ETA 00:17:24
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 18.882 ms/op
# Warmup Iteration   2: 18.573 ms/op
Iteration   1: 18.592 ms/op
                 comparisons: 1009763.000 #
                 stableSort:  1.000 #

Iteration   2: 18.471 ms/op
                 comparisons: 1009763.000 #
                 stableSort:  1.000 #

Iteration   3: 18.345 ms/op
                 comparisons: 1009763.000 #
                 stableSort:  1.000 #

Iteration   4: 18.300 ms/op
                 comparisons: 1009763.000 #
                 stableSort:  1.000 #

Iteration   5: 18.242 ms/op
                 comparisons: 1009763.000 #
                 stableSort:  1.000 #

Iteration   6: 18.296 ms/op
                 comparisons: 1009763.000 #
                 stableSort:  1.000 #

Iteration   7: 18.279 ms/op
                 comparisons: 1009763.000 #
                 stableSort:  1.000 #

Iteration   8: 18.203 ms/op
                 comparisons: 1009763.000 #
                 stableSort:  1.000 #

Iteration   9: 18.263 ms/op
                 comparisons: 1009763.000 #
                 stableSort:  1.000 #

Iteration  10: 18.157 ms/op
                 comparisons: 1009763.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2":
  18.315 ±(99.9%) 0.195 ms/op [Average]
  (min, avg, max) = (18.157, 18.315, 18.592), stdev = 0.129
  CI (99.9%): [18.120, 18.510] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:comparisons":
  10097630.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1009763.000, 1009763.000, 1009763.000), stdev = 0.001
  CI (99.9%): [10097630.000, 10097630.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000000)

# Run progress: 70.83% complete, ETA 00:16:39
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 205.078 ms/op
# Warmup Iteration   2: 187.889 ms/op
Iteration   1: 190.063 ms/op
                 comparisons: 10012548.000 #
                 stableSort:  1.000 #

Iteration   2: 190.667 ms/op
                 comparisons: 10012548.000 #
                 stableSort:  1.000 #

Iteration   3: 191.083 ms/op
                 comparisons: 10012548.000 #
                 stableSort:  1.000 #

Iteration   4: 190.659 ms/op
                 comparisons: 10012548.000 #
                 stableSort:  1.000 #

Iteration   5: 190.542 ms/op
                 comparisons: 10012548.000 #
                 stableSort:  1.000 #

Iteration   6: 190.801 ms/op
                 comparisons: 10012548.000 #
                 stableSort:  1.000 #

Iteration   7: 193.958 ms/op
                 comparisons: 10012548.000 #
                 stableSort:  1.000 #

Iteration   8: 191.671 ms/op
                 comparisons: 10012548.000 #
                 stableSort:  1.000 #

Iteration   9: 190.327 ms/op
                 comparisons: 10012548.000 #
                 stableSort:  1.000 #

Iteration  10: 191.038 ms/op
                 comparisons: 10012548.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2":
  191.081 ±(99.9%) 1.668 ms/op [Average]
  (min, avg, max) = (190.063, 191.081, 193.958), stdev = 1.103
  CI (99.9%): [189.413, 192.749] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:comparisons":
  100125480.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10012548.000, 10012548.000, 10012548.000), stdev = 0.001
  CI (99.9%): [100125480.000, 100125480.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000)

# Run progress: 71.88% complete, ETA 00:16:04
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 4.187 ms/op
# Warmup Iteration   2: 4.043 ms/op
Iteration   1: 4.046 ms/op
                 comparisons: 127580.000 #
                 stableSort:  1.000 #

Iteration   2: 4.052 ms/op
                 comparisons: 127580.000 #
                 stableSort:  1.000 #

Iteration   3: 4.024 ms/op
                 comparisons: 127580.000 #
                 stableSort:  1.000 #

Iteration   4: 4.035 ms/op
                 comparisons: 127580.000 #
                 stableSort:  1.000 #

Iteration   5: 4.074 ms/op
                 comparisons: 127580.000 #
                 stableSort:  1.000 #

Iteration   6: 4.088 ms/op
                 comparisons: 127580.000 #
                 stableSort:  1.000 #

Iteration   7: 4.024 ms/op
                 comparisons: 127580.000 #
                 stableSort:  1.000 #

Iteration   8: 4.064 ms/op
                 comparisons: 127580.000 #
                 stableSort:  1.000 #

Iteration   9: 4.166 ms/op
                 comparisons: 127580.000 #
                 stableSort:  1.000 #

Iteration  10: 4.211 ms/op
                 comparisons: 127580.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2":
  4.078 ±(99.9%) 0.095 ms/op [Average]
  (min, avg, max) = (4.024, 4.078, 4.211), stdev = 0.063
  CI (99.9%): [3.984, 4.173] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:comparisons":
  1275800.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (127580.000, 127580.000, 127580.000), stdev = 0.001
  CI (99.9%): [1275800.000, 1275800.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 1000000)

# Run progress: 72.92% complete, ETA 00:15:19
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 56.125 ms/op
# Warmup Iteration   2: 53.743 ms/op
Iteration   1: 53.223 ms/op
                 comparisons: 2179960.000 #
                 stableSort:  1.000 #

Iteration   2: 53.171 ms/op
                 comparisons: 2179960.000 #
                 stableSort:  1.000 #

Iteration   3: 53.235 ms/op
                 comparisons: 2179960.000 #
                 stableSort:  1.000 #

Iteration   4: 53.958 ms/op
                 comparisons: 2179960.000 #
                 stableSort:  1.000 #

Iteration   5: 54.459 ms/op
                 comparisons: 2179960.000 #
                 stableSort:  1.000 #

Iteration   6: 53.099 ms/op
                 comparisons: 2179960.000 #
                 stableSort:  1.000 #

Iteration   7: 53.073 ms/op
                 comparisons: 2179960.000 #
                 stableSort:  1.000 #

Iteration   8: 53.035 ms/op
                 comparisons: 2179960.000 #
                 stableSort:  1.000 #

Iteration   9: 53.141 ms/op
                 comparisons: 2179960.000 #
                 stableSort:  1.000 #

Iteration  10: 53.138 ms/op
                 comparisons: 2179960.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2":
  53.353 ±(99.9%) 0.710 ms/op [Average]
  (min, avg, max) = (53.035, 53.353, 54.459), stdev = 0.470
  CI (99.9%): [52.643, 54.064] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:comparisons":
  21799600.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (2179960.000, 2179960.000, 2179960.000), stdev = 0.001
  CI (99.9%): [21799600.000, 21799600.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000000)

# Run progress: 73.96% complete, ETA 00:14:37
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 284.604 ms/op
# Warmup Iteration   2: 275.297 ms/op
Iteration   1: 273.066 ms/op
                 comparisons: 11712937.000 #
                 stableSort:  1.000 #

Iteration   2: 274.521 ms/op
                 comparisons: 11712937.000 #
                 stableSort:  1.000 #

Iteration   3: 272.891 ms/op
                 comparisons: 11712937.000 #
                 stableSort:  1.000 #

Iteration   4: 272.631 ms/op
                 comparisons: 11712937.000 #
                 stableSort:  1.000 #

Iteration   5: 273.002 ms/op
                 comparisons: 11712937.000 #
                 stableSort:  1.000 #

Iteration   6: 272.709 ms/op
                 comparisons: 11712937.000 #
                 stableSort:  1.000 #

Iteration   7: 273.416 ms/op
                 comparisons: 11712937.000 #
                 stableSort:  1.000 #

Iteration   8: 273.489 ms/op
                 comparisons: 11712937.000 #
                 stableSort:  1.000 #

Iteration   9: 272.678 ms/op
                 comparisons: 11712937.000 #
                 stableSort:  1.000 #

Iteration  10: 271.914 ms/op
                 comparisons: 11712937.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2":
  273.032 ±(99.9%) 1.037 ms/op [Average]
  (min, avg, max) = (271.914, 273.032, 274.521), stdev = 0.686
  CI (99.9%): [271.995, 274.069] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:comparisons":
  117129370.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (11712937.000, 11712937.000, 11712937.000), stdev = 0.001
  CI (99.9%): [117129370.000, 117129370.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000)

# Run progress: 75.00% complete, ETA 00:14:02
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 6.097 ms/op
# Warmup Iteration   2: 4.802 ms/op
Iteration   1: 4.811 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   2: 4.758 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   3: 4.727 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   4: 4.716 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   5: 4.708 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   6: 4.717 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   7: 4.699 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   8: 4.630 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   9: 4.683 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration  10: 4.655 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap":
  4.710 ±(99.9%) 0.077 ms/op [Average]
  (min, avg, max) = (4.630, 4.710, 4.811), stdev = 0.051
  CI (99.9%): [4.634, 4.787] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:comparisons":
  1859660.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (185966.000, 185966.000, 185966.000), stdev = 0.001
  CI (99.9%): [1859660.000, 1859660.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 1000000)

# Run progress: 76.04% complete, ETA 00:13:20
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 1433.342 ms/op
# Warmup Iteration   2: 1364.390 ms/op
Iteration   1: 1299.072 ms/op
                 comparisons: 29704383.000 #
                 stableSort:  1.000 #

Iteration   2: 1254.397 ms/op
                 comparisons: 29704383.000 #
                 stableSort:  1.000 #

Iteration   3: 1305.132 ms/op
                 comparisons: 29704383.000 #
                 stableSort:  1.000 #

Iteration   4: 1299.325 ms/op
                 comparisons: 29704383.000 #
                 stableSort:  1.000 #

Iteration   5: 1524.618 ms/op
                 comparisons: 29704383.000 #
                 stableSort:  1.000 #

Iteration   6: 1292.131 ms/op
                 comparisons: 29704383.000 #
                 stableSort:  1.000 #

Iteration   7: 1279.280 ms/op
                 comparisons: 29704383.000 #
                 stableSort:  1.000 #

Iteration   8: 1290.771 ms/op
                 comparisons: 29704383.000 #
                 stableSort:  1.000 #

Iteration   9: 1294.825 ms/op
                 comparisons: 29704383.000 #
                 stableSort:  1.000 #

Iteration  10: 1293.109 ms/op
                 comparisons: 29704383.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap":
  1313.266 ±(99.9%) 114.311 ms/op [Average]
  (min, avg, max) = (1254.397, 1313.266, 1524.618), stdev = 75.610
  CI (99.9%): [1198.955, 1427.577] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:comparisons":
  297043830.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (29704383.000, 29704383.000, 29704383.000), stdev = 0.001
  CI (99.9%): [297043830.000, 297043830.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000000)

# Run progress: 77.08% complete, ETA 00:12:40
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 25035.647 ms/op
# Warmup Iteration   2: 19878.253 ms/op
Iteration   1: 25048.070 ms/op
                 comparisons: 351674557.000 #
                 stableSort:  1.000 #

Iteration   2: 20155.568 ms/op
                 comparisons: 351674557.000 #
                 stableSort:  1.000 #

Iteration   3: 19897.401 ms/op
                 comparisons: 351674557.000 #
                 stableSort:  1.000 #

Iteration   4: 22689.356 ms/op
                 comparisons: 351674557.000 #
                 stableSort:  1.000 #

Iteration   5: 19998.912 ms/op
                 comparisons: 351674557.000 #
                 stableSort:  1.000 #

Iteration   6: 22861.261 ms/op
                 comparisons: 351674557.000 #
                 stableSort:  1.000 #

Iteration   7: 20140.817 ms/op
                 comparisons: 351674557.000 #
                 stableSort:  1.000 #

Iteration   8: 22865.365 ms/op
                 comparisons: 351674557.000 #
                 stableSort:  1.000 #

Iteration   9: 20081.963 ms/op
                 comparisons: 351674557.000 #
                 stableSort:  1.000 #

Iteration  10: 19645.048 ms/op
                 comparisons: 351674557.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap":
  21338.376 ±(99.9%) 2823.373 ms/op [Average]
  (min, avg, max) = (19645.048, 21338.376, 25048.070), stdev = 1867.486
  CI (99.9%): [18515.004, 24161.749] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:comparisons":
  3516745570.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (351674557.000, 351674557.000, 351674557.000), stdev = 0.001
  CI (99.9%): [3516745570.000, 3516745570.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000)

# Run progress: 78.13% complete, ETA 00:13:15
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 1.203 ms/op
# Warmup Iteration   2: 1.178 ms/op
Iteration   1: 1.176 ms/op
                 comparisons: 124922.000 #
                 stableSort:  1.000 #

Iteration   2: 1.196 ms/op
                 comparisons: 124922.000 #
                 stableSort:  1.000 #

Iteration   3: 1.166 ms/op
                 comparisons: 124922.000 #
                 stableSort:  1.000 #

Iteration   4: 1.169 ms/op
                 comparisons: 124922.000 #
                 stableSort:  1.000 #

Iteration   5: 1.167 ms/op
                 comparisons: 124922.000 #
                 stableSort:  1.000 #

Iteration   6: 1.173 ms/op
                 comparisons: 124922.000 #
                 stableSort:  1.000 #

Iteration   7: 1.171 ms/op
                 comparisons: 124922.000 #
                 stableSort:  1.000 #

Iteration   8: 1.171 ms/op
                 comparisons: 124922.000 #
                 stableSort:  1.000 #

Iteration   9: 1.173 ms/op
                 comparisons: 124922.000 #
                 stableSort:  1.000 #

Iteration  10: 1.173 ms/op
                 comparisons: 124922.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap":
  1.173 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (1.166, 1.173, 1.196), stdev = 0.008
  CI (99.9%): [1.161, 1.186] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:comparisons":
  1249220.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (124922.000, 124922.000, 124922.000), stdev = 0.001
  CI (99.9%): [1249220.000, 1249220.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 1000000)

# Run progress: 79.17% complete, ETA 00:12:31
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 111.518 ms/op
# Warmup Iteration   2: 108.475 ms/op
Iteration   1: 109.194 ms/op
                 comparisons: 12515216.000 #
                 stableSort:  1.000 #

Iteration   2: 107.179 ms/op
                 comparisons: 12515216.000 #
                 stableSort:  1.000 #

Iteration   3: 107.308 ms/op
                 comparisons: 12515216.000 #
                 stableSort:  1.000 #

Iteration   4: 106.540 ms/op
                 comparisons: 12515216.000 #
                 stableSort:  1.000 #

Iteration   5: 106.043 ms/op
                 comparisons: 12515216.000 #
                 stableSort:  1.000 #

Iteration   6: 106.380 ms/op
                 comparisons: 12515216.000 #
                 stableSort:  1.000 #

Iteration   7: 105.259 ms/op
                 comparisons: 12515216.000 #
                 stableSort:  1.000 #

Iteration   8: 105.477 ms/op
                 comparisons: 12515216.000 #
                 stableSort:  1.000 #

Iteration   9: 106.449 ms/op
                 comparisons: 12515216.000 #
                 stableSort:  1.000 #

Iteration  10: 107.384 ms/op
                 comparisons: 12515216.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap":
  106.721 ±(99.9%) 1.707 ms/op [Average]
  (min, avg, max) = (105.259, 106.721, 109.194), stdev = 1.129
  CI (99.9%): [105.014, 108.429] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:comparisons":
  125152160.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (12515216.000, 12515216.000, 12515216.000), stdev = 0.001
  CI (99.9%): [125152160.000, 125152160.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000000)

# Run progress: 80.21% complete, ETA 00:11:47
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 2616.080 ms/op
# Warmup Iteration   2: 1331.781 ms/op
Iteration   1: 1077.999 ms/op
                 comparisons: 123633373.000 #
                 stableSort:  1.000 #

Iteration   2: 1073.231 ms/op
                 comparisons: 123633373.000 #
                 stableSort:  1.000 #

Iteration   3: 1068.131 ms/op
                 comparisons: 123633373.000 #
                 stableSort:  1.000 #

Iteration   4: 1061.829 ms/op
                 comparisons: 123633373.000 #
                 stableSort:  1.000 #

Iteration   5: 1070.356 ms/op
                 comparisons: 123633373.000 #
                 stableSort:  1.000 #

Iteration   6: 1068.825 ms/op
                 comparisons: 123633373.000 #
                 stableSort:  1.000 #

Iteration   7: 1082.201 ms/op
                 comparisons: 123633373.000 #
                 stableSort:  1.000 #

Iteration   8: 1062.965 ms/op
                 comparisons: 123633373.000 #
                 stableSort:  1.000 #

Iteration   9: 1083.884 ms/op
                 comparisons: 123633373.000 #
                 stableSort:  1.000 #

Iteration  10: 1107.539 ms/op
                 comparisons: 123633373.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap":
  1075.696 ±(99.9%) 20.296 ms/op [Average]
  (min, avg, max) = (1061.829, 1075.696, 1107.539), stdev = 13.425
  CI (99.9%): [1055.400, 1095.992] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:comparisons":
  1236333730.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (123633373.000, 123633373.000, 123633373.000), stdev = 0.001
  CI (99.9%): [1236333730.000, 1236333730.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000)

# Run progress: 81.25% complete, ETA 00:11:11
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 1.959 ms/op
# Warmup Iteration   2: 1.951 ms/op
Iteration   1: 1.938 ms/op
                 comparisons: 217697.000 #
                 stableSort:  1.000 #

Iteration   2: 1.935 ms/op
                 comparisons: 217697.000 #
                 stableSort:  1.000 #

Iteration   3: 1.998 ms/op
                 comparisons: 217697.000 #
                 stableSort:  1.000 #

Iteration   4: 2.011 ms/op
                 comparisons: 217697.000 #
                 stableSort:  1.000 #

Iteration   5: 2.051 ms/op
                 comparisons: 217697.000 #
                 stableSort:  1.000 #

Iteration   6: 2.053 ms/op
                 comparisons: 217697.000 #
                 stableSort:  1.000 #

Iteration   7: 2.050 ms/op
                 comparisons: 217697.000 #
                 stableSort:  1.000 #

Iteration   8: 2.051 ms/op
                 comparisons: 217697.000 #
                 stableSort:  1.000 #

Iteration   9: 2.048 ms/op
                 comparisons: 217697.000 #
                 stableSort:  1.000 #

Iteration  10: 1.980 ms/op
                 comparisons: 217697.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap":
  2.011 ±(99.9%) 0.071 ms/op [Average]
  (min, avg, max) = (1.935, 2.011, 2.053), stdev = 0.047
  CI (99.9%): [1.940, 2.083] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:comparisons":
  2176970.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (217697.000, 217697.000, 217697.000), stdev = 0.001
  CI (99.9%): [2176970.000, 2176970.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 1000000)

# Run progress: 82.29% complete, ETA 00:10:28
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 159.097 ms/op
# Warmup Iteration   2: 150.596 ms/op
Iteration   1: 143.595 ms/op
                 comparisons: 20782167.000 #
                 stableSort:  1.000 #

Iteration   2: 143.691 ms/op
                 comparisons: 20782167.000 #
                 stableSort:  1.000 #

Iteration   3: 144.371 ms/op
                 comparisons: 20782167.000 #
                 stableSort:  1.000 #

Iteration   4: 143.733 ms/op
                 comparisons: 20782167.000 #
                 stableSort:  1.000 #

Iteration   5: 141.398 ms/op
                 comparisons: 20782167.000 #
                 stableSort:  1.000 #

Iteration   6: 141.200 ms/op
                 comparisons: 20782167.000 #
                 stableSort:  1.000 #

Iteration   7: 143.205 ms/op
                 comparisons: 20782167.000 #
                 stableSort:  1.000 #

Iteration   8: 147.066 ms/op
                 comparisons: 20782167.000 #
                 stableSort:  1.000 #

Iteration   9: 147.085 ms/op
                 comparisons: 20782167.000 #
                 stableSort:  1.000 #

Iteration  10: 146.637 ms/op
                 comparisons: 20782167.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap":
  144.198 ±(99.9%) 3.234 ms/op [Average]
  (min, avg, max) = (141.200, 144.198, 147.085), stdev = 2.139
  CI (99.9%): [140.964, 147.432] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:comparisons":
  207821670.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (20782167.000, 20782167.000, 20782167.000), stdev = 0.001
  CI (99.9%): [207821670.000, 207821670.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000000)

# Run progress: 83.33% complete, ETA 00:09:46
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 3148.748 ms/op
# Warmup Iteration   2: 1973.920 ms/op
Iteration   1: 1502.566 ms/op
                 comparisons: 221192809.000 #
                 stableSort:  1.000 #

Iteration   2: 1495.986 ms/op
                 comparisons: 221192809.000 #
                 stableSort:  1.000 #

Iteration   3: 1528.807 ms/op
                 comparisons: 221192809.000 #
                 stableSort:  1.000 #

Iteration   4: 1566.633 ms/op
                 comparisons: 221192809.000 #
                 stableSort:  1.000 #

Iteration   5: 1494.864 ms/op
                 comparisons: 221192809.000 #
                 stableSort:  1.000 #

Iteration   6: 1510.939 ms/op
                 comparisons: 221192809.000 #
                 stableSort:  1.000 #

Iteration   7: 1546.452 ms/op
                 comparisons: 221192809.000 #
                 stableSort:  1.000 #

Iteration   8: 1576.622 ms/op
                 comparisons: 221192809.000 #
                 stableSort:  1.000 #

Iteration   9: 1523.740 ms/op
                 comparisons: 221192809.000 #
                 stableSort:  1.000 #

Iteration  10: 1494.893 ms/op
                 comparisons: 221192809.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap":
  1524.150 ±(99.9%) 45.703 ms/op [Average]
  (min, avg, max) = (1494.864, 1524.150, 1576.622), stdev = 30.230
  CI (99.9%): [1478.447, 1569.854] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:comparisons":
  2211928090.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (221192809.000, 221192809.000, 221192809.000), stdev = 0.001
  CI (99.9%): [2211928090.000, 2211928090.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000)

# Run progress: 84.38% complete, ETA 00:09:11
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 5.364 ms/op
# Warmup Iteration   2: 3.938 ms/op
Iteration   1: 3.943 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   2: 3.897 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   3: 3.892 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   4: 3.890 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   5: 3.892 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   6: 3.843 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   7: 3.944 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   8: 3.881 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   9: 3.877 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration  10: 3.900 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap":
  3.896 ±(99.9%) 0.045 ms/op [Average]
  (min, avg, max) = (3.843, 3.896, 3.944), stdev = 0.030
  CI (99.9%): [3.851, 3.941] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:comparisons":
  1859660.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (185966.000, 185966.000, 185966.000), stdev = 0.001
  CI (99.9%): [1859660.000, 1859660.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 1000000)

# Run progress: 85.42% complete, ETA 00:08:30
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 347.503 ms/op
# Warmup Iteration   2: 267.416 ms/op
Iteration   1: 264.064 ms/op
                 comparisons: 40658987.000 #
                 stableSort:  1.000 #

Iteration   2: 277.685 ms/op
                 comparisons: 40658987.000 #
                 stableSort:  1.000 #

Iteration   3: 280.306 ms/op
                 comparisons: 40658987.000 #
                 stableSort:  1.000 #

Iteration   4: 276.648 ms/op
                 comparisons: 40658987.000 #
                 stableSort:  1.000 #

Iteration   5: 267.223 ms/op
                 comparisons: 40658987.000 #
                 stableSort:  1.000 #

Iteration   6: 264.106 ms/op
                 comparisons: 40658987.000 #
                 stableSort:  1.000 #

Iteration   7: 264.980 ms/op
                 comparisons: 40658987.000 #
                 stableSort:  1.000 #

Iteration   8: 264.152 ms/op
                 comparisons: 40658987.000 #
                 stableSort:  1.000 #

Iteration   9: 260.784 ms/op
                 comparisons: 40658987.000 #
                 stableSort:  1.000 #

Iteration  10: 261.268 ms/op
                 comparisons: 40658987.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap":
  268.122 ±(99.9%) 10.954 ms/op [Average]
  (min, avg, max) = (260.784, 268.122, 280.306), stdev = 7.245
  CI (99.9%): [257.168, 279.076] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:comparisons":
  406589870.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (40658987.000, 40658987.000, 40658987.000), stdev = 0.001
  CI (99.9%): [406589870.000, 406589870.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000000)

# Run progress: 86.46% complete, ETA 00:07:50
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 6297.098 ms/op
# Warmup Iteration   2: 2609.542 ms/op
Iteration   1: 2549.748 ms/op
                 comparisons: 406131633.000 #
                 stableSort:  1.000 #

Iteration   2: 2571.751 ms/op
                 comparisons: 406131633.000 #
                 stableSort:  1.000 #

Iteration   3: 2553.140 ms/op
                 comparisons: 406131633.000 #
                 stableSort:  1.000 #

Iteration   4: 2573.347 ms/op
                 comparisons: 406131633.000 #
                 stableSort:  1.000 #

Iteration   5: 2578.361 ms/op
                 comparisons: 406131633.000 #
                 stableSort:  1.000 #

Iteration   6: 2588.704 ms/op
                 comparisons: 406131633.000 #
                 stableSort:  1.000 #

Iteration   7: 2580.391 ms/op
                 comparisons: 406131633.000 #
                 stableSort:  1.000 #

Iteration   8: 2576.078 ms/op
                 comparisons: 406131633.000 #
                 stableSort:  1.000 #

Iteration   9: 2546.604 ms/op
                 comparisons: 406131633.000 #
                 stableSort:  1.000 #

Iteration  10: 2563.452 ms/op
                 comparisons: 406131633.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap":
  2568.158 ±(99.9%) 21.556 ms/op [Average]
  (min, avg, max) = (2546.604, 2568.158, 2588.704), stdev = 14.258
  CI (99.9%): [2546.602, 2589.714] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:comparisons":
  4061316330.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (406131633.000, 406131633.000, 406131633.000), stdev = 0.001
  CI (99.9%): [4061316330.000, 4061316330.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000)

# Run progress: 87.50% complete, ETA 00:07:17
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 6.129 ms/op
# Warmup Iteration   2: 4.742 ms/op
Iteration   1: 4.654 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   2: 4.673 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   3: 4.572 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   4: 4.562 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   5: 4.842 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   6: 4.863 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   7: 4.857 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   8: 4.841 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   9: 4.846 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration  10: 4.834 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2":
  4.754 ±(99.9%) 0.188 ms/op [Average]
  (min, avg, max) = (4.562, 4.754, 4.863), stdev = 0.124
  CI (99.9%): [4.567, 4.942] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:comparisons":
  1859660.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (185966.000, 185966.000, 185966.000), stdev = 0.001
  CI (99.9%): [1859660.000, 1859660.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 1000000)

# Run progress: 88.54% complete, ETA 00:06:38
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 1428.251 ms/op
# Warmup Iteration   2: 1371.853 ms/op
Iteration   1: 1287.929 ms/op
                 comparisons: 29704383.000 #
                 stableSort:  1.000 #

Iteration   2: 1251.161 ms/op
                 comparisons: 29704383.000 #
                 stableSort:  1.000 #

Iteration   3: 1289.255 ms/op
                 comparisons: 29704383.000 #
                 stableSort:  1.000 #

Iteration   4: 1284.740 ms/op
                 comparisons: 29704383.000 #
                 stableSort:  1.000 #

Iteration   5: 1503.357 ms/op
                 comparisons: 29704383.000 #
                 stableSort:  1.000 #

Iteration   6: 1283.719 ms/op
                 comparisons: 29704383.000 #
                 stableSort:  1.000 #

Iteration   7: 1265.352 ms/op
                 comparisons: 29704383.000 #
                 stableSort:  1.000 #

Iteration   8: 1277.574 ms/op
                 comparisons: 29704383.000 #
                 stableSort:  1.000 #

Iteration   9: 1278.090 ms/op
                 comparisons: 29704383.000 #
                 stableSort:  1.000 #

Iteration  10: 1251.304 ms/op
                 comparisons: 29704383.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2":
  1297.248 ±(99.9%) 111.529 ms/op [Average]
  (min, avg, max) = (1251.161, 1297.248, 1503.357), stdev = 73.770
  CI (99.9%): [1185.719, 1408.777] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:comparisons":
  297043830.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (29704383.000, 29704383.000, 29704383.000), stdev = 0.001
  CI (99.9%): [297043830.000, 297043830.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000000)

# Run progress: 89.58% complete, ETA 00:05:59
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 26115.538 ms/op
# Warmup Iteration   2: 20274.446 ms/op
Iteration   1: 19766.644 ms/op
                 comparisons: 351674557.000 #
                 stableSort:  1.000 #

Iteration   2: 22970.478 ms/op
                 comparisons: 351674557.000 #
                 stableSort:  1.000 #

Iteration   3: 20116.409 ms/op
                 comparisons: 351674557.000 #
                 stableSort:  1.000 #

Iteration   4: 22955.862 ms/op
                 comparisons: 351674557.000 #
                 stableSort:  1.000 #

Iteration   5: 20192.567 ms/op
                 comparisons: 351674557.000 #
                 stableSort:  1.000 #

Iteration   6: 20022.225 ms/op
                 comparisons: 351674557.000 #
                 stableSort:  1.000 #

Iteration   7: 22717.833 ms/op
                 comparisons: 351674557.000 #
                 stableSort:  1.000 #

Iteration   8: 19907.783 ms/op
                 comparisons: 351674557.000 #
                 stableSort:  1.000 #

Iteration   9: 22924.746 ms/op
                 comparisons: 351674557.000 #
                 stableSort:  1.000 #

Iteration  10: 20155.509 ms/op
                 comparisons: 351674557.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2":
  21173.006 ±(99.9%) 2246.998 ms/op [Average]
  (min, avg, max) = (19766.644, 21173.006, 22970.478), stdev = 1486.250
  CI (99.9%): [18926.007, 23420.004] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:comparisons":
  3516745570.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (351674557.000, 351674557.000, 351674557.000), stdev = 0.001
  CI (99.9%): [3516745570.000, 3516745570.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000)

# Run progress: 90.63% complete, ETA 00:05:49
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 0.147 ms/op
# Warmup Iteration   2: 0.132 ms/op
Iteration   1: 0.129 ms/op
                 comparisons: 10904.000 #
                 stableSort:  1.000 #

Iteration   2: 0.129 ms/op
                 comparisons: 10904.000 #
                 stableSort:  1.000 #

Iteration   3: 0.129 ms/op
                 comparisons: 10904.000 #
                 stableSort:  1.000 #

Iteration   4: 0.129 ms/op
                 comparisons: 10904.000 #
                 stableSort:  1.000 #

Iteration   5: 0.135 ms/op
                 comparisons: 10904.000 #
                 stableSort:  1.000 #

Iteration   6: 0.133 ms/op
                 comparisons: 10904.000 #
                 stableSort:  1.000 #

Iteration   7: 0.129 ms/op
                 comparisons: 10904.000 #
                 stableSort:  1.000 #

Iteration   8: 0.130 ms/op
                 comparisons: 10904.000 #
                 stableSort:  1.000 #

Iteration   9: 0.129 ms/op
                 comparisons: 10904.000 #
                 stableSort:  1.000 #

Iteration  10: 0.137 ms/op
                 comparisons: 10904.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2":
  0.131 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.129, 0.131, 0.137), stdev = 0.003
  CI (99.9%): [0.127, 0.135] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:comparisons":
  109040.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10904.000, 10904.000, 10904.000), stdev = 0.001
  CI (99.9%): [109040.000, 109040.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 1000000)

# Run progress: 91.67% complete, ETA 00:05:08
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 18.799 ms/op
# Warmup Iteration   2: 18.161 ms/op
Iteration   1: 18.090 ms/op
                 comparisons: 1001536.000 #
                 stableSort:  1.000 #

Iteration   2: 18.135 ms/op
                 comparisons: 1001536.000 #
                 stableSort:  1.000 #

Iteration   3: 18.058 ms/op
                 comparisons: 1001536.000 #
                 stableSort:  1.000 #

Iteration   4: 18.052 ms/op
                 comparisons: 1001536.000 #
                 stableSort:  1.000 #

Iteration   5: 18.043 ms/op
                 comparisons: 1001536.000 #
                 stableSort:  1.000 #

Iteration   6: 18.089 ms/op
                 comparisons: 1001536.000 #
                 stableSort:  1.000 #

Iteration   7: 18.112 ms/op
                 comparisons: 1001536.000 #
                 stableSort:  1.000 #

Iteration   8: 18.098 ms/op
                 comparisons: 1001536.000 #
                 stableSort:  1.000 #

Iteration   9: 18.071 ms/op
                 comparisons: 1001536.000 #
                 stableSort:  1.000 #

Iteration  10: 18.058 ms/op
                 comparisons: 1001536.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2":
  18.081 ±(99.9%) 0.044 ms/op [Average]
  (min, avg, max) = (18.043, 18.081, 18.135), stdev = 0.029
  CI (99.9%): [18.037, 18.125] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:comparisons":
  10015360.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1001536.000, 1001536.000, 1001536.000), stdev = 0.001
  CI (99.9%): [10015360.000, 10015360.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000000)

# Run progress: 92.71% complete, ETA 00:04:27
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 202.307 ms/op
# Warmup Iteration   2: 198.565 ms/op
Iteration   1: 199.337 ms/op
                 comparisons: 10001743.000 #
                 stableSort:  1.000 #

Iteration   2: 198.887 ms/op
                 comparisons: 10001743.000 #
                 stableSort:  1.000 #

Iteration   3: 200.214 ms/op
                 comparisons: 10001743.000 #
                 stableSort:  1.000 #

Iteration   4: 201.438 ms/op
                 comparisons: 10001743.000 #
                 stableSort:  1.000 #

Iteration   5: 199.918 ms/op
                 comparisons: 10001743.000 #
                 stableSort:  1.000 #

Iteration   6: 200.139 ms/op
                 comparisons: 10001743.000 #
                 stableSort:  1.000 #

Iteration   7: 200.205 ms/op
                 comparisons: 10001743.000 #
                 stableSort:  1.000 #

Iteration   8: 200.118 ms/op
                 comparisons: 10001743.000 #
                 stableSort:  1.000 #

Iteration   9: 199.663 ms/op
                 comparisons: 10001743.000 #
                 stableSort:  1.000 #

Iteration  10: 199.375 ms/op
                 comparisons: 10001743.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2":
  199.930 ±(99.9%) 1.049 ms/op [Average]
  (min, avg, max) = (198.887, 199.930, 201.438), stdev = 0.694
  CI (99.9%): [198.881, 200.978] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:comparisons":
  100017430.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10001743.000, 10001743.000, 10001743.000), stdev = 0.001
  CI (99.9%): [100017430.000, 100017430.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000)

# Run progress: 93.75% complete, ETA 00:03:49
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 0.339 ms/op
# Warmup Iteration   2: 0.318 ms/op
Iteration   1: 0.316 ms/op
                 comparisons: 21234.000 #
                 stableSort:  1.000 #

Iteration   2: 0.315 ms/op
                 comparisons: 21234.000 #
                 stableSort:  1.000 #

Iteration   3: 0.315 ms/op
                 comparisons: 21234.000 #
                 stableSort:  1.000 #

Iteration   4: 0.320 ms/op
                 comparisons: 21234.000 #
                 stableSort:  1.000 #

Iteration   5: 0.335 ms/op
                 comparisons: 21234.000 #
                 stableSort:  1.000 #

Iteration   6: 0.334 ms/op
                 comparisons: 21234.000 #
                 stableSort:  1.000 #

Iteration   7: 0.330 ms/op
                 comparisons: 21234.000 #
                 stableSort:  1.000 #

Iteration   8: 0.319 ms/op
                 comparisons: 21234.000 #
                 stableSort:  1.000 #

Iteration   9: 0.312 ms/op
                 comparisons: 21234.000 #
                 stableSort:  1.000 #

Iteration  10: 0.318 ms/op
                 comparisons: 21234.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2":
  0.321 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.312, 0.321, 0.335), stdev = 0.009
  CI (99.9%): [0.309, 0.334] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:comparisons":
  212340.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (21234.000, 21234.000, 21234.000), stdev = 0.001
  CI (99.9%): [212340.000, 212340.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 1000000)

# Run progress: 94.79% complete, ETA 00:03:09
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 21.376 ms/op
# Warmup Iteration   2: 20.016 ms/op
Iteration   1: 19.781 ms/op
                 comparisons: 1022264.000 #
                 stableSort:  1.000 #

Iteration   2: 19.811 ms/op
                 comparisons: 1022264.000 #
                 stableSort:  1.000 #

Iteration   3: 19.716 ms/op
                 comparisons: 1022264.000 #
                 stableSort:  1.000 #

Iteration   4: 19.853 ms/op
                 comparisons: 1022264.000 #
                 stableSort:  1.000 #

Iteration   5: 19.700 ms/op
                 comparisons: 1022264.000 #
                 stableSort:  1.000 #

Iteration   6: 19.660 ms/op
                 comparisons: 1022264.000 #
                 stableSort:  1.000 #

Iteration   7: 19.705 ms/op
                 comparisons: 1022264.000 #
                 stableSort:  1.000 #

Iteration   8: 19.716 ms/op
                 comparisons: 1022264.000 #
                 stableSort:  1.000 #

Iteration   9: 19.688 ms/op
                 comparisons: 1022264.000 #
                 stableSort:  1.000 #

Iteration  10: 19.821 ms/op
                 comparisons: 1022264.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2":
  19.745 ±(99.9%) 0.099 ms/op [Average]
  (min, avg, max) = (19.660, 19.745, 19.853), stdev = 0.066
  CI (99.9%): [19.646, 19.845] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:comparisons":
  10222640.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1022264.000, 1022264.000, 1022264.000), stdev = 0.001
  CI (99.9%): [10222640.000, 10222640.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000000)

# Run progress: 95.83% complete, ETA 00:02:30
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 221.564 ms/op
# Warmup Iteration   2: 207.372 ms/op
Iteration   1: 206.330 ms/op
                 comparisons: 10029007.000 #
                 stableSort:  1.000 #

Iteration   2: 206.727 ms/op
                 comparisons: 10029007.000 #
                 stableSort:  1.000 #

Iteration   3: 207.392 ms/op
                 comparisons: 10029007.000 #
                 stableSort:  1.000 #

Iteration   4: 207.058 ms/op
                 comparisons: 10029007.000 #
                 stableSort:  1.000 #

Iteration   5: 206.787 ms/op
                 comparisons: 10029007.000 #
                 stableSort:  1.000 #

Iteration   6: 207.467 ms/op
                 comparisons: 10029007.000 #
                 stableSort:  1.000 #

Iteration   7: 207.030 ms/op
                 comparisons: 10029007.000 #
                 stableSort:  1.000 #

Iteration   8: 206.443 ms/op
                 comparisons: 10029007.000 #
                 stableSort:  1.000 #

Iteration   9: 206.721 ms/op
                 comparisons: 10029007.000 #
                 stableSort:  1.000 #

Iteration  10: 206.763 ms/op
                 comparisons: 10029007.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2":
  206.872 ±(99.9%) 0.558 ms/op [Average]
  (min, avg, max) = (206.330, 206.872, 207.467), stdev = 0.369
  CI (99.9%): [206.314, 207.430] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:comparisons":
  100290070.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10029007.000, 10029007.000, 10029007.000), stdev = 0.001
  CI (99.9%): [100290070.000, 100290070.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000)

# Run progress: 96.88% complete, ETA 00:01:53
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 4.735 ms/op
# Warmup Iteration   2: 4.961 ms/op
Iteration   1: 4.973 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   2: 4.928 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   3: 4.682 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   4: 4.776 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   5: 4.715 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   6: 4.821 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   7: 4.726 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   8: 4.811 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   9: 4.875 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration  10: 4.643 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2":
  4.795 ±(99.9%) 0.162 ms/op [Average]
  (min, avg, max) = (4.643, 4.795, 4.973), stdev = 0.107
  CI (99.9%): [4.632, 4.957] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:comparisons":
  1859660.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (185966.000, 185966.000, 185966.000), stdev = 0.001
  CI (99.9%): [1859660.000, 1859660.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 1000000)

# Run progress: 97.92% complete, ETA 00:01:14
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 82.643 ms/op
# Warmup Iteration   2: 68.633 ms/op
Iteration   1: 63.541 ms/op
                 comparisons: 3222200.000 #
                 stableSort:  1.000 #

Iteration   2: 64.458 ms/op
                 comparisons: 3222200.000 #
                 stableSort:  1.000 #

Iteration   3: 64.162 ms/op
                 comparisons: 3222200.000 #
                 stableSort:  1.000 #

Iteration   4: 63.548 ms/op
                 comparisons: 3222200.000 #
                 stableSort:  1.000 #

Iteration   5: 64.074 ms/op
                 comparisons: 3222200.000 #
                 stableSort:  1.000 #

Iteration   6: 63.555 ms/op
                 comparisons: 3222200.000 #
                 stableSort:  1.000 #

Iteration   7: 64.199 ms/op
                 comparisons: 3222200.000 #
                 stableSort:  1.000 #

Iteration   8: 63.619 ms/op
                 comparisons: 3222200.000 #
                 stableSort:  1.000 #

Iteration   9: 63.664 ms/op
                 comparisons: 3222200.000 #
                 stableSort:  1.000 #

Iteration  10: 63.899 ms/op
                 comparisons: 3222200.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2":
  63.872 ±(99.9%) 0.503 ms/op [Average]
  (min, avg, max) = (63.541, 63.872, 64.458), stdev = 0.333
  CI (99.9%): [63.369, 64.375] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:comparisons":
  32222000.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (3222200.000, 3222200.000, 3222200.000), stdev = 0.001
  CI (99.9%): [32222000.000, 32222000.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000000)

# Run progress: 98.96% complete, ETA 00:00:37
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 368.756 ms/op
# Warmup Iteration   2: 323.441 ms/op
Iteration   1: 322.321 ms/op
                 comparisons: 13298182.000 #
                 stableSort:  1.000 #

Iteration   2: 472.572 ms/op
                 comparisons: 13298182.000 #
                 stableSort:  1.000 #

Iteration   3: 329.338 ms/op
                 comparisons: 13298182.000 #
                 stableSort:  1.000 #

Iteration   4: 330.789 ms/op
                 comparisons: 13298182.000 #
                 stableSort:  1.000 #

Iteration   5: 331.455 ms/op
                 comparisons: 13298182.000 #
                 stableSort:  1.000 #

Iteration   6: 330.516 ms/op
                 comparisons: 13298182.000 #
                 stableSort:  1.000 #

Iteration   7: 323.636 ms/op
                 comparisons: 13298182.000 #
                 stableSort:  1.000 #

Iteration   8: 322.920 ms/op
                 comparisons: 13298182.000 #
                 stableSort:  1.000 #

Iteration   9: 323.156 ms/op
                 comparisons: 13298182.000 #
                 stableSort:  1.000 #

Iteration  10: 324.072 ms/op
                 comparisons: 13298182.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2":
  341.077 ±(99.9%) 70.074 ms/op [Average]
  (min, avg, max) = (322.321, 341.077, 472.572), stdev = 46.350
  CI (99.9%): [271.003, 411.152] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:comparisons":
  132981820.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (13298182.000, 13298182.000, 13298182.000), stdev = 0.001
  CI (99.9%): [132981820.000, 132981820.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:stableSort":
  10.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# Run complete. Total time: 00:59:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (fieldType)  (fieldsNumber)  (limit)  (tupleNumber)  Mode  Cnt           Score      Error  Units
PartialSortBenchmark.collectionSort                      INT               2       -1          10000  avgt   10           2.638 ±    0.035  ms/op
PartialSortBenchmark.limitSort                           INT               2       -1          10000  avgt   10           2.843 ±    0.033  ms/op
PartialSortBenchmark.priorityQueue                       INT               2       -1          10000  avgt   10           3.174 ±    0.092  ms/op
PartialSortBenchmark.topnHeap2                           INT               2       -1          10000  avgt   10           4.014 ±    0.023  ms/op
PartialSortBenchmark.treeMap                             INT               2       -1          10000  avgt   10           4.710 ±    0.077  ms/op
PartialSortBenchmark.treeMap2                            INT               2       -1          10000  avgt   10           4.754 ±    0.188  ms/op
PartialSortBenchmark.topnHeap                            INT               2       -1          10000  avgt   10           5.749 ±    0.167  ms/op
PartialSortBenchmark.collectionSort:stableSort           INT               2       -1          10000  avgt   10          10.000                 #
PartialSortBenchmark.limitSort:stableSort                INT               2       -1          10000  avgt   10          10.000                 #
PartialSortBenchmark.priorityQueue:stableSort            INT               2       -1          10000  avgt   10          10.000                 #
PartialSortBenchmark.topnHeap2:stableSort                INT               2       -1          10000  avgt   10          10.000                 #
PartialSortBenchmark.topnHeap:stableSort                 INT               2       -1          10000  avgt   10          10.000                 #
PartialSortBenchmark.treeMap2:stableSort                 INT               2       -1          10000  avgt   10          10.000                 #
PartialSortBenchmark.treeMap:stableSort                  INT               2       -1          10000  avgt   10          10.000                 #
PartialSortBenchmark.collectionSort:comparisons          INT               2       -1          10000  avgt   10     1204360.000                 #
PartialSortBenchmark.limitSort:comparisons               INT               2       -1          10000  avgt   10     1204360.000                 #
PartialSortBenchmark.topnHeap2:comparisons               INT               2       -1          10000  avgt   10     1275800.000                 #
PartialSortBenchmark.priorityQueue:comparisons           INT               2       -1          10000  avgt   10     1377610.000                 #
PartialSortBenchmark.treeMap2:comparisons                INT               2       -1          10000  avgt   10     1859660.000                 #
PartialSortBenchmark.treeMap:comparisons                 INT               2       -1          10000  avgt   10     1859660.000                 #
PartialSortBenchmark.topnHeap:comparisons                INT               2       -1          10000  avgt   10     2398710.000                 #

PartialSortBenchmark.priorityQueue:stableSort            INT               2       10          10000  avgt   10             ≈ 0                 #
PartialSortBenchmark.priorityQueue                       INT               2       10          10000  avgt   10           0.114 ±    0.002  ms/op
PartialSortBenchmark.topnHeap                            INT               2       10          10000  avgt   10           0.114 ±    0.001  ms/op
PartialSortBenchmark.topnHeap2                           INT               2       10          10000  avgt   10           0.118 ±    0.001  ms/op
PartialSortBenchmark.array                               INT               2       10          10000  avgt   10           0.119 ±    0.001  ms/op
PartialSortBenchmark.limitSort                           INT               2       10          10000  avgt   10           0.128 ±    0.005  ms/op
PartialSortBenchmark.treeMap2                            INT               2       10          10000  avgt   10           0.131 ±    0.004  ms/op
PartialSortBenchmark.treeMap                             INT               2       10          10000  avgt   10           1.173 ±    0.013  ms/op
PartialSortBenchmark.array:stableSort                    INT               2       10          10000  avgt   10          10.000                 #
PartialSortBenchmark.limitSort:stableSort                INT               2       10          10000  avgt   10          10.000                 #
PartialSortBenchmark.topnHeap2:stableSort                INT               2       10          10000  avgt   10          10.000                 #
PartialSortBenchmark.topnHeap:stableSort                 INT               2       10          10000  avgt   10          10.000                 #
PartialSortBenchmark.treeMap2:stableSort                 INT               2       10          10000  avgt   10          10.000                 #
PartialSortBenchmark.treeMap:stableSort                  INT               2       10          10000  avgt   10          10.000                 #
PartialSortBenchmark.array:comparisons                   INT               2       10          10000  avgt   10      102590.000                 #
PartialSortBenchmark.limitSort:comparisons               INT               2       10          10000  avgt   10      102680.000                 #
PartialSortBenchmark.topnHeap2:comparisons               INT               2       10          10000  avgt   10      102900.000                 #
PartialSortBenchmark.topnHeap:comparisons                INT               2       10          10000  avgt   10      103480.000                 #
PartialSortBenchmark.priorityQueue:comparisons           INT               2       10          10000  avgt   10      104730.000                 #
PartialSortBenchmark.treeMap2:comparisons                INT               2       10          10000  avgt   10      109040.000                 #
PartialSortBenchmark.treeMap:comparisons                 INT               2       10          10000  avgt   10     1249220.000                 #

PartialSortBenchmark.priorityQueue:stableSort            INT               2      100          10000  avgt   10             ≈ 0                 #
PartialSortBenchmark.array                               INT               2      100          10000  avgt   10           0.203 ±    0.001  ms/op
PartialSortBenchmark.limitSort                           INT               2      100          10000  avgt   10           0.216 ±    0.002  ms/op
PartialSortBenchmark.priorityQueue                       INT               2      100          10000  avgt   10           0.233 ±    0.011  ms/op
PartialSortBenchmark.topnHeap2                           INT               2      100          10000  avgt   10           0.242 ±    0.004  ms/op
PartialSortBenchmark.topnHeap                            INT               2      100          10000  avgt   10           0.247 ±    0.007  ms/op
PartialSortBenchmark.treeMap2                            INT               2      100          10000  avgt   10           0.321 ±    0.013  ms/op
PartialSortBenchmark.treeMap                             INT               2      100          10000  avgt   10           2.011 ±    0.071  ms/op
PartialSortBenchmark.array:stableSort                    INT               2      100          10000  avgt   10          10.000                 #
PartialSortBenchmark.limitSort:stableSort                INT               2      100          10000  avgt   10          10.000                 #
PartialSortBenchmark.topnHeap2:stableSort                INT               2      100          10000  avgt   10          10.000                 #
PartialSortBenchmark.topnHeap:stableSort                 INT               2      100          10000  avgt   10          10.000                 #
PartialSortBenchmark.treeMap2:stableSort                 INT               2      100          10000  avgt   10          10.000                 #
PartialSortBenchmark.treeMap:stableSort                  INT               2      100          10000  avgt   10          10.000                 #
PartialSortBenchmark.array:comparisons                   INT               2      100          10000  avgt   10      135650.000                 #
PartialSortBenchmark.limitSort:comparisons               INT               2      100          10000  avgt   10      135810.000                 #
PartialSortBenchmark.topnHeap2:comparisons               INT               2      100          10000  avgt   10      151350.000                 #
PartialSortBenchmark.topnHeap:comparisons                INT               2      100          10000  avgt   10      158460.000                 #
PartialSortBenchmark.priorityQueue:comparisons           INT               2      100          10000  avgt   10      165450.000                 #
PartialSortBenchmark.treeMap2:comparisons                INT               2      100          10000  avgt   10      212340.000                 #
PartialSortBenchmark.treeMap:comparisons                 INT               2      100          10000  avgt   10     2176970.000                 #

PartialSortBenchmark.collectionSort                      INT               2    10000          10000  avgt   10           2.658 ±    0.041  ms/op
PartialSortBenchmark.limitSort                           INT               2    10000          10000  avgt   10           2.943 ±    0.090  ms/op
PartialSortBenchmark.priorityQueue                       INT               2    10000          10000  avgt   10           3.111 ±    0.027  ms/op
PartialSortBenchmark.treeMap                             INT               2    10000          10000  avgt   10           3.896 ±    0.045  ms/op
PartialSortBenchmark.topnHeap2                           INT               2    10000          10000  avgt   10           4.078 ±    0.095  ms/op
PartialSortBenchmark.treeMap2                            INT               2    10000          10000  avgt   10           4.795 ±    0.162  ms/op
PartialSortBenchmark.array                               INT               2    10000          10000  avgt   10           5.323 ±    0.052  ms/op
PartialSortBenchmark.topnHeap                            INT               2    10000          10000  avgt   10           5.519 ±    0.055  ms/op
PartialSortBenchmark.array:stableSort                    INT               2    10000          10000  avgt   10          10.000                 #
PartialSortBenchmark.collectionSort:stableSort           INT               2    10000          10000  avgt   10          10.000                 #
PartialSortBenchmark.limitSort:stableSort                INT               2    10000          10000  avgt   10          10.000                 #
PartialSortBenchmark.priorityQueue:stableSort            INT               2    10000          10000  avgt   10          10.000                 #
PartialSortBenchmark.topnHeap2:stableSort                INT               2    10000          10000  avgt   10          10.000                 #
PartialSortBenchmark.topnHeap:stableSort                 INT               2    10000          10000  avgt   10          10.000                 #
PartialSortBenchmark.treeMap2:stableSort                 INT               2    10000          10000  avgt   10          10.000                 #
PartialSortBenchmark.treeMap:stableSort                  INT               2    10000          10000  avgt   10          10.000                 #
PartialSortBenchmark.array:comparisons                   INT               2    10000          10000  avgt   10     1190130.000                 #
PartialSortBenchmark.collectionSort:comparisons          INT               2    10000          10000  avgt   10     1204360.000                 #
PartialSortBenchmark.limitSort:comparisons               INT               2    10000          10000  avgt   10     1204360.000                 #
PartialSortBenchmark.topnHeap2:comparisons               INT               2    10000          10000  avgt   10     1275800.000                 #
PartialSortBenchmark.priorityQueue:comparisons           INT               2    10000          10000  avgt   10     1377610.000                 #
PartialSortBenchmark.treeMap2:comparisons                INT               2    10000          10000  avgt   10     1859660.000                 #
PartialSortBenchmark.treeMap:comparisons                 INT               2    10000          10000  avgt   10     1859660.000                 #
PartialSortBenchmark.topnHeap:comparisons                INT               2    10000          10000  avgt   10     2398710.000                 #

PartialSortBenchmark.collectionSort:stableSort           INT               2       -1        1000000  avgt   10          10.000                 #
PartialSortBenchmark.limitSort:stableSort                INT               2       -1        1000000  avgt   10          10.000                 #
PartialSortBenchmark.priorityQueue:stableSort            INT               2       -1        1000000  avgt   10          10.000                 #
PartialSortBenchmark.topnHeap2:stableSort                INT               2       -1        1000000  avgt   10          10.000                 #
PartialSortBenchmark.topnHeap:stableSort                 INT               2       -1        1000000  avgt   10          10.000                 #
PartialSortBenchmark.treeMap2:stableSort                 INT               2       -1        1000000  avgt   10          10.000                 #
PartialSortBenchmark.treeMap:stableSort                  INT               2       -1        1000000  avgt   10          10.000                 #
PartialSortBenchmark.collectionSort                      INT               2       -1        1000000  avgt   10         670.102 ±    2.591  ms/op
PartialSortBenchmark.limitSort                           INT               2       -1        1000000  avgt   10         692.695 ±   12.414  ms/op
PartialSortBenchmark.priorityQueue                       INT               2       -1        1000000  avgt   10         799.617 ±   10.219  ms/op
PartialSortBenchmark.treeMap2                            INT               2       -1        1000000  avgt   10        1297.248 ±  111.529  ms/op
PartialSortBenchmark.treeMap                             INT               2       -1        1000000  avgt   10        1313.266 ±  114.311  ms/op
PartialSortBenchmark.topnHeap2                           INT               2       -1        1000000  avgt   10        1314.329 ±   14.099  ms/op
PartialSortBenchmark.topnHeap                            INT               2       -1        1000000  avgt   10        1612.384 ±   13.655  ms/op
PartialSortBenchmark.collectionSort:comparisons          INT               2       -1        1000000  avgt   10   186406010.000                 #
PartialSortBenchmark.limitSort:comparisons               INT               2       -1        1000000  avgt   10   186406010.000                 #
PartialSortBenchmark.topnHeap2:comparisons               INT               2       -1        1000000  avgt   10   193146050.000                 #
PartialSortBenchmark.priorityQueue:comparisons           INT               2       -1        1000000  avgt   10   203524240.000                 #
PartialSortBenchmark.treeMap2:comparisons                INT               2       -1        1000000  avgt   10   297043830.000                 #
PartialSortBenchmark.treeMap:comparisons                 INT               2       -1        1000000  avgt   10   297043830.000                 #
PartialSortBenchmark.topnHeap:comparisons                INT               2       -1        1000000  avgt   10   371925730.000                 #

PartialSortBenchmark.array:stableSort                    INT               2       10        1000000  avgt   10          10.000                 #
PartialSortBenchmark.limitSort:stableSort                INT               2       10        1000000  avgt   10          10.000                 #
PartialSortBenchmark.priorityQueue:stableSort            INT               2       10        1000000  avgt   10          10.000                 #
PartialSortBenchmark.topnHeap2:stableSort                INT               2       10        1000000  avgt   10          10.000                 #
PartialSortBenchmark.topnHeap:stableSort                 INT               2       10        1000000  avgt   10          10.000                 #
PartialSortBenchmark.treeMap2:stableSort                 INT               2       10        1000000  avgt   10          10.000                 #
PartialSortBenchmark.treeMap:stableSort                  INT               2       10        1000000  avgt   10          10.000                 #
PartialSortBenchmark.priorityQueue                       INT               2       10        1000000  avgt   10          17.996 ±    0.211  ms/op
PartialSortBenchmark.treeMap2                            INT               2       10        1000000  avgt   10          18.081 ±    0.044  ms/op
PartialSortBenchmark.topnHeap2                           INT               2       10        1000000  avgt   10          18.893 ±    0.527  ms/op
PartialSortBenchmark.topnHeap                            INT               2       10        1000000  avgt   10          19.032 ±    0.122  ms/op
PartialSortBenchmark.array                               INT               2       10        1000000  avgt   10          20.408 ±    0.120  ms/op
PartialSortBenchmark.limitSort                           INT               2       10        1000000  avgt   10          20.667 ±    0.235  ms/op
PartialSortBenchmark.treeMap                             INT               2       10        1000000  avgt   10         106.721 ±    1.707  ms/op
PartialSortBenchmark.array:comparisons                   INT               2       10        1000000  avgt   10    10004320.000                 #
PartialSortBenchmark.limitSort:comparisons               INT               2       10        1000000  avgt   10    10004550.000                 #
PartialSortBenchmark.topnHeap2:comparisons               INT               2       10        1000000  avgt   10    10004880.000                 #
PartialSortBenchmark.topnHeap:comparisons                INT               2       10        1000000  avgt   10    10005630.000                 #
PartialSortBenchmark.priorityQueue:comparisons           INT               2       10        1000000  avgt   10    10007900.000                 #
PartialSortBenchmark.treeMap2:comparisons                INT               2       10        1000000  avgt   10    10015360.000                 #
PartialSortBenchmark.treeMap:comparisons                 INT               2       10        1000000  avgt   10   125152160.000                 #

PartialSortBenchmark.priorityQueue:stableSort            INT               2      100        1000000  avgt   10             ≈ 0                 #
PartialSortBenchmark.array:stableSort                    INT               2      100        1000000  avgt   10          10.000                 #
PartialSortBenchmark.limitSort:stableSort                INT               2      100        1000000  avgt   10          10.000                 #
PartialSortBenchmark.topnHeap2:stableSort                INT               2      100        1000000  avgt   10          10.000                 #
PartialSortBenchmark.topnHeap:stableSort                 INT               2      100        1000000  avgt   10          10.000                 #
PartialSortBenchmark.treeMap2:stableSort                 INT               2      100        1000000  avgt   10          10.000                 #
PartialSortBenchmark.treeMap:stableSort                  INT               2      100        1000000  avgt   10          10.000                 #
PartialSortBenchmark.topnHeap                            INT               2      100        1000000  avgt   10          18.065 ±    0.033  ms/op
PartialSortBenchmark.priorityQueue                       INT               2      100        1000000  avgt   10          18.205 ±    0.176  ms/op
PartialSortBenchmark.topnHeap2                           INT               2      100        1000000  avgt   10          18.315 ±    0.195  ms/op
PartialSortBenchmark.array                               INT               2      100        1000000  avgt   10          18.543 ±    0.076  ms/op
PartialSortBenchmark.limitSort                           INT               2      100        1000000  avgt   10          18.719 ±    0.089  ms/op
PartialSortBenchmark.treeMap2                            INT               2      100        1000000  avgt   10          19.745 ±    0.099  ms/op
PartialSortBenchmark.treeMap                             INT               2      100        1000000  avgt   10         144.198 ±    3.234  ms/op
PartialSortBenchmark.array:comparisons                   INT               2      100        1000000  avgt   10    10066040.000                 #
PartialSortBenchmark.limitSort:comparisons               INT               2      100        1000000  avgt   10    10066800.000                 #
PartialSortBenchmark.topnHeap2:comparisons               INT               2      100        1000000  avgt   10    10097630.000                 #
PartialSortBenchmark.topnHeap:comparisons                INT               2      100        1000000  avgt   10    10107000.000                 #
PartialSortBenchmark.priorityQueue:comparisons           INT               2      100        1000000  avgt   10    10123140.000                 #
PartialSortBenchmark.treeMap2:comparisons                INT               2      100        1000000  avgt   10    10222640.000                 #
PartialSortBenchmark.treeMap:comparisons                 INT               2      100        1000000  avgt   10   207821670.000                 #

PartialSortBenchmark.priorityQueue:stableSort            INT               2    10000        1000000  avgt   10             ≈ 0                 #
PartialSortBenchmark.array:stableSort                    INT               2    10000        1000000  avgt   10          10.000                 #
PartialSortBenchmark.limitSort:stableSort                INT               2    10000        1000000  avgt   10          10.000                 #
PartialSortBenchmark.topnHeap2:stableSort                INT               2    10000        1000000  avgt   10          10.000                 #
PartialSortBenchmark.topnHeap:stableSort                 INT               2    10000        1000000  avgt   10          10.000                 #
PartialSortBenchmark.treeMap2:stableSort                 INT               2    10000        1000000  avgt   10          10.000                 #
PartialSortBenchmark.treeMap:stableSort                  INT               2    10000        1000000  avgt   10          10.000                 #
PartialSortBenchmark.limitSort                           INT               2    10000        1000000  avgt   10          43.873 ±    0.481  ms/op
PartialSortBenchmark.priorityQueue                       INT               2    10000        1000000  avgt   10          48.502 ±    0.205  ms/op
PartialSortBenchmark.topnHeap                            INT               2    10000        1000000  avgt   10          49.487 ±    0.665  ms/op
PartialSortBenchmark.topnHeap2                           INT               2    10000        1000000  avgt   10          53.353 ±    0.710  ms/op
PartialSortBenchmark.treeMap2                            INT               2    10000        1000000  avgt   10          63.872 ±    0.503  ms/op
PartialSortBenchmark.array                               INT               2    10000        1000000  avgt   10          65.266 ±    0.290  ms/op
PartialSortBenchmark.treeMap                             INT               2    10000        1000000  avgt   10         268.122 ±   10.954  ms/op
PartialSortBenchmark.array:comparisons                   INT               2    10000        1000000  avgt   10    17201600.000                 #
PartialSortBenchmark.limitSort:comparisons               INT               2    10000        1000000  avgt   10    17217080.000                 #
PartialSortBenchmark.topnHeap2:comparisons               INT               2    10000        1000000  avgt   10    21799600.000                 #
PartialSortBenchmark.priorityQueue:comparisons           INT               2    10000        1000000  avgt   10    22806830.000                 #
PartialSortBenchmark.topnHeap:comparisons                INT               2    10000        1000000  avgt   10    23153000.000                 #
PartialSortBenchmark.treeMap2:comparisons                INT               2    10000        1000000  avgt   10    32222000.000                 #
PartialSortBenchmark.treeMap:comparisons                 INT               2    10000        1000000  avgt   10   406589870.000                 #

PartialSortBenchmark.collectionSort:stableSort           INT               2       -1       10000000  avgt   10          10.000                 #
PartialSortBenchmark.limitSort:stableSort                INT               2       -1       10000000  avgt   10          10.000                 #
PartialSortBenchmark.priorityQueue:stableSort            INT               2       -1       10000000  avgt   10          10.000                 #
PartialSortBenchmark.topnHeap2:stableSort                INT               2       -1       10000000  avgt   10          10.000                 #
PartialSortBenchmark.topnHeap:stableSort                 INT               2       -1       10000000  avgt   10          10.000                 #
PartialSortBenchmark.treeMap2:stableSort                 INT               2       -1       10000000  avgt   10          10.000                 #
PartialSortBenchmark.treeMap:stableSort                  INT               2       -1       10000000  avgt   10          10.000                 #
PartialSortBenchmark.limitSort                           INT               2       -1       10000000  avgt   10       11982.595 ±  283.721  ms/op
PartialSortBenchmark.collectionSort                      INT               2       -1       10000000  avgt   10       12017.301 ±  688.925  ms/op
PartialSortBenchmark.priorityQueue                       INT               2       -1       10000000  avgt   10       13670.747 ±  146.782  ms/op
PartialSortBenchmark.treeMap2                            INT               2       -1       10000000  avgt   10       21173.006 ± 2246.998  ms/op
PartialSortBenchmark.treeMap                             INT               2       -1       10000000  avgt   10       21338.376 ± 2823.373  ms/op
PartialSortBenchmark.topnHeap2                           INT               2       -1       10000000  avgt   10       25157.493 ±  278.956  ms/op
PartialSortBenchmark.topnHeap                            INT               2       -1       10000000  avgt   10       33628.363 ±  407.909  ms/op
PartialSortBenchmark.collectionSort:comparisons          INT               2       -1       10000000  avgt   10  2202465680.000                 #
PartialSortBenchmark.limitSort:comparisons               INT               2       -1       10000000  avgt   10  2202465680.000                 #
PartialSortBenchmark.topnHeap2:comparisons               INT               2       -1       10000000  avgt   10  2268661710.000                 #
PartialSortBenchmark.priorityQueue:comparisons           INT               2       -1       10000000  avgt   10  2376739280.000                 #
PartialSortBenchmark.treeMap2:comparisons                INT               2       -1       10000000  avgt   10  3516745570.000                 #
PartialSortBenchmark.treeMap:comparisons                 INT               2       -1       10000000  avgt   10  3516745570.000                 #
PartialSortBenchmark.topnHeap:comparisons                INT               2       -1       10000000  avgt   10  4386584830.000                 #

PartialSortBenchmark.array:stableSort                    INT               2       10       10000000  avgt   10          10.000                 #
PartialSortBenchmark.limitSort:stableSort                INT               2       10       10000000  avgt   10          10.000                 #
PartialSortBenchmark.priorityQueue:stableSort            INT               2       10       10000000  avgt   10          10.000                 #
PartialSortBenchmark.topnHeap2:stableSort                INT               2       10       10000000  avgt   10          10.000                 #
PartialSortBenchmark.topnHeap:stableSort                 INT               2       10       10000000  avgt   10          10.000                 #
PartialSortBenchmark.treeMap2:stableSort                 INT               2       10       10000000  avgt   10          10.000                 #
PartialSortBenchmark.treeMap:stableSort                  INT               2       10       10000000  avgt   10          10.000                 #
PartialSortBenchmark.priorityQueue                       INT               2       10       10000000  avgt   10         186.850 ±    2.085  ms/op
PartialSortBenchmark.topnHeap                            INT               2       10       10000000  avgt   10         199.059 ±    1.155  ms/op
PartialSortBenchmark.treeMap2                            INT               2       10       10000000  avgt   10         199.930 ±    1.049  ms/op
PartialSortBenchmark.topnHeap2                           INT               2       10       10000000  avgt   10         200.106 ±    0.650  ms/op
PartialSortBenchmark.array                               INT               2       10       10000000  avgt   10         201.348 ±    0.612  ms/op
PartialSortBenchmark.limitSort                           INT               2       10       10000000  avgt   10         202.379 ±    1.635  ms/op
PartialSortBenchmark.treeMap                             INT               2       10       10000000  avgt   10        1075.696 ±   20.296  ms/op
PartialSortBenchmark.limitSort:comparisons               INT               2       10       10000000  avgt   10   100004830.000                 #
PartialSortBenchmark.array:comparisons                   INT               2       10       10000000  avgt   10   100005020.000                 #
PartialSortBenchmark.topnHeap2:comparisons               INT               2       10       10000000  avgt   10   100005710.000                 #
PartialSortBenchmark.topnHeap:comparisons                INT               2       10       10000000  avgt   10   100006450.000                 #
PartialSortBenchmark.priorityQueue:comparisons           INT               2       10       10000000  avgt   10   100008610.000                 #
PartialSortBenchmark.treeMap2:comparisons                INT               2       10       10000000  avgt   10   100017430.000                 #
PartialSortBenchmark.treeMap:comparisons                 INT               2       10       10000000  avgt   10  1236333730.000                 #

PartialSortBenchmark.array:stableSort                    INT               2      100       10000000  avgt   10          10.000                 #
PartialSortBenchmark.limitSort:stableSort                INT               2      100       10000000  avgt   10          10.000                 #
PartialSortBenchmark.priorityQueue:stableSort            INT               2      100       10000000  avgt   10          10.000                 #
PartialSortBenchmark.topnHeap2:stableSort                INT               2      100       10000000  avgt   10          10.000                 #
PartialSortBenchmark.topnHeap:stableSort                 INT               2      100       10000000  avgt   10          10.000                 #
PartialSortBenchmark.treeMap2:stableSort                 INT               2      100       10000000  avgt   10          10.000                 #
PartialSortBenchmark.treeMap:stableSort                  INT               2      100       10000000  avgt   10          10.000                 #
PartialSortBenchmark.topnHeap2                           INT               2      100       10000000  avgt   10         191.081 ±    1.668  ms/op
PartialSortBenchmark.priorityQueue                       INT               2      100       10000000  avgt   10         195.711 ±    2.023  ms/op
PartialSortBenchmark.array                               INT               2      100       10000000  avgt   10         196.445 ±    0.245  ms/op
PartialSortBenchmark.limitSort                           INT               2      100       10000000  avgt   10         197.060 ±    1.472  ms/op
PartialSortBenchmark.topnHeap                            INT               2      100       10000000  avgt   10         202.823 ±    0.932  ms/op
PartialSortBenchmark.treeMap2                            INT               2      100       10000000  avgt   10         206.872 ±    0.558  ms/op
PartialSortBenchmark.treeMap                             INT               2      100       10000000  avgt   10        1524.150 ±   45.703  ms/op
PartialSortBenchmark.array:comparisons                   INT               2      100       10000000  avgt   10   100084930.000                 #
PartialSortBenchmark.limitSort:comparisons               INT               2      100       10000000  avgt   10   100085760.000                 #
PartialSortBenchmark.topnHeap2:comparisons               INT               2      100       10000000  avgt   10   100125480.000                 #
PartialSortBenchmark.topnHeap:comparisons                INT               2      100       10000000  avgt   10   100136160.000                 #
PartialSortBenchmark.priorityQueue:comparisons           INT               2      100       10000000  avgt   10   100159170.000                 #
PartialSortBenchmark.treeMap2:comparisons                INT               2      100       10000000  avgt   10   100290070.000                 #
PartialSortBenchmark.treeMap:comparisons                 INT               2      100       10000000  avgt   10  2211928090.000                 #

PartialSortBenchmark.priorityQueue:stableSort            INT               2    10000       10000000  avgt   10             ≈ 0                 #
PartialSortBenchmark.array:stableSort                    INT               2    10000       10000000  avgt   10          10.000                 #
PartialSortBenchmark.limitSort:stableSort                INT               2    10000       10000000  avgt   10          10.000                 #
PartialSortBenchmark.topnHeap2:stableSort                INT               2    10000       10000000  avgt   10          10.000                 #
PartialSortBenchmark.topnHeap:stableSort                 INT               2    10000       10000000  avgt   10          10.000                 #
PartialSortBenchmark.treeMap2:stableSort                 INT               2    10000       10000000  avgt   10          10.000                 #
PartialSortBenchmark.treeMap:stableSort                  INT               2    10000       10000000  avgt   10          10.000                 #
PartialSortBenchmark.priorityQueue                       INT               2    10000       10000000  avgt   10         262.637 ±    3.863  ms/op
PartialSortBenchmark.topnHeap                            INT               2    10000       10000000  avgt   10         271.997 ±    3.603  ms/op
PartialSortBenchmark.topnHeap2                           INT               2    10000       10000000  avgt   10         273.032 ±    1.037  ms/op
PartialSortBenchmark.limitSort                           INT               2    10000       10000000  avgt   10         293.428 ±   86.139  ms/op
PartialSortBenchmark.array                               INT               2    10000       10000000  avgt   10         306.427 ±    0.821  ms/op
PartialSortBenchmark.treeMap2                            INT               2    10000       10000000  avgt   10         341.077 ±   70.074  ms/op
PartialSortBenchmark.treeMap                             INT               2    10000       10000000  avgt   10        2568.158 ±   21.556  ms/op
PartialSortBenchmark.array:comparisons                   INT               2    10000       10000000  avgt   10   110272380.000                 #
PartialSortBenchmark.limitSort:comparisons               INT               2    10000       10000000  avgt   10   110290940.000                 #
PartialSortBenchmark.topnHeap2:comparisons               INT               2    10000       10000000  avgt   10   117129370.000                 #
PartialSortBenchmark.topnHeap:comparisons                INT               2    10000       10000000  avgt   10   118595050.000                 #
PartialSortBenchmark.priorityQueue:comparisons           INT               2    10000       10000000  avgt   10   118609480.000                 #
PartialSortBenchmark.treeMap2:comparisons                INT               2    10000       10000000  avgt   10   132981820.000                 #
PartialSortBenchmark.treeMap:comparisons                 INT               2    10000       10000000  avgt   10  4061316330.000                 #
