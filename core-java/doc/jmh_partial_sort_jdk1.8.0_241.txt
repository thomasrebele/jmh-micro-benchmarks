# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.array
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000)

# Run progress: 0.00% complete, ETA 00:11:12
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: ignore trial
	at com.github.zabetak.benchmark.PartialSortBenchmark.ignoreTrial(PartialSortBenchmark.java:196)
	at com.github.zabetak.benchmark.PartialSortBenchmark.array(PartialSortBenchmark.java:280)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_array_jmhTest.array_avgt_jmhStub(PartialSortBenchmark_array_jmhTest.java:326)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_array_jmhTest.array_AverageTime(PartialSortBenchmark_array_jmhTest.java:244)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)




# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.array
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 1000000)

# Run progress: 1.04% complete, ETA 00:00:26
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: ignore trial
	at com.github.zabetak.benchmark.PartialSortBenchmark.ignoreTrial(PartialSortBenchmark.java:196)
	at com.github.zabetak.benchmark.PartialSortBenchmark.array(PartialSortBenchmark.java:280)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_array_jmhTest.array_avgt_jmhStub(PartialSortBenchmark_array_jmhTest.java:326)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_array_jmhTest.array_AverageTime(PartialSortBenchmark_array_jmhTest.java:244)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)




# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.array
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000000)

# Run progress: 2.08% complete, ETA 00:01:51
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: ignore trial
	at com.github.zabetak.benchmark.PartialSortBenchmark.ignoreTrial(PartialSortBenchmark.java:196)
	at com.github.zabetak.benchmark.PartialSortBenchmark.array(PartialSortBenchmark.java:280)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_array_jmhTest.array_avgt_jmhStub(PartialSortBenchmark_array_jmhTest.java:326)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_array_jmhTest.array_AverageTime(PartialSortBenchmark_array_jmhTest.java:244)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)




# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.array
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000)

# Run progress: 3.13% complete, ETA 00:14:23
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 0.129 ms/op
# Warmup Iteration   2: 0.125 ms/op
Iteration   1: 0.125 ms/op
                 comparisons: 10259.000 #
                 stableSort:  1.000 #

Iteration   2: 0.125 ms/op
                 comparisons: 10259.000 #
                 stableSort:  1.000 #

Iteration   3: 0.125 ms/op
                 comparisons: 10259.000 #
                 stableSort:  1.000 #

Iteration   4: 0.125 ms/op
                 comparisons: 10259.000 #
                 stableSort:  1.000 #

Iteration   5: 0.126 ms/op
                 comparisons: 10259.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.array":
  0.125 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.125, 0.125, 0.126), stdev = 0.001
  CI (99.9%): [0.123, 0.127] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:comparisons":
  51295.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10259.000, 10259.000, 10259.000), stdev = 0.001
  CI (99.9%): [51295.000, 51295.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.array
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 1000000)

# Run progress: 4.17% complete, ETA 00:13:27
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 19.555 ms/op
# Warmup Iteration   2: 19.245 ms/op
Iteration   1: 19.118 ms/op
                 comparisons: 1000432.000 #
                 stableSort:  1.000 #

Iteration   2: 19.142 ms/op
                 comparisons: 1000432.000 #
                 stableSort:  1.000 #

Iteration   3: 19.176 ms/op
                 comparisons: 1000432.000 #
                 stableSort:  1.000 #

Iteration   4: 19.169 ms/op
                 comparisons: 1000432.000 #
                 stableSort:  1.000 #

Iteration   5: 19.039 ms/op
                 comparisons: 1000432.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.array":
  19.129 ±(99.9%) 0.213 ms/op [Average]
  (min, avg, max) = (19.039, 19.129, 19.176), stdev = 0.055
  CI (99.9%): [18.916, 19.342] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:comparisons":
  5002160.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1000432.000, 1000432.000, 1000432.000), stdev = 0.001
  CI (99.9%): [5002160.000, 5002160.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.array
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000000)

# Run progress: 5.21% complete, ETA 00:13:24
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 202.403 ms/op
# Warmup Iteration   2: 198.964 ms/op
Iteration   1: 198.927 ms/op
                 comparisons: 10000502.000 #
                 stableSort:  1.000 #

Iteration   2: 199.315 ms/op
                 comparisons: 10000502.000 #
                 stableSort:  1.000 #

Iteration   3: 200.517 ms/op
                 comparisons: 10000502.000 #
                 stableSort:  1.000 #

Iteration   4: 199.030 ms/op
                 comparisons: 10000502.000 #
                 stableSort:  1.000 #

Iteration   5: 199.423 ms/op
                 comparisons: 10000502.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.array":
  199.443 ±(99.9%) 2.441 ms/op [Average]
  (min, avg, max) = (198.927, 199.443, 200.517), stdev = 0.634
  CI (99.9%): [197.001, 201.884] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:comparisons":
  50002510.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10000502.000, 10000502.000, 10000502.000), stdev = 0.001
  CI (99.9%): [50002510.000, 50002510.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.array
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000)

# Run progress: 6.25% complete, ETA 00:19:02
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 0.221 ms/op
# Warmup Iteration   2: 0.210 ms/op
Iteration   1: 0.210 ms/op
                 comparisons: 13565.000 #
                 stableSort:  1.000 #

Iteration   2: 0.210 ms/op
                 comparisons: 13565.000 #
                 stableSort:  1.000 #

Iteration   3: 0.210 ms/op
                 comparisons: 13565.000 #
                 stableSort:  1.000 #

Iteration   4: 0.210 ms/op
                 comparisons: 13565.000 #
                 stableSort:  1.000 #

Iteration   5: 0.210 ms/op
                 comparisons: 13565.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.array":
  0.210 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.210, 0.210, 0.210), stdev = 0.001
  CI (99.9%): [0.209, 0.211] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:comparisons":
  67825.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (13565.000, 13565.000, 13565.000), stdev = 0.001
  CI (99.9%): [67825.000, 67825.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.array
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 1000000)

# Run progress: 7.29% complete, ETA 00:17:39
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 19.785 ms/op
# Warmup Iteration   2: 18.972 ms/op
Iteration   1: 19.056 ms/op
                 comparisons: 1006604.000 #
                 stableSort:  1.000 #

Iteration   2: 18.925 ms/op
                 comparisons: 1006604.000 #
                 stableSort:  1.000 #

Iteration   3: 18.957 ms/op
                 comparisons: 1006604.000 #
                 stableSort:  1.000 #

Iteration   4: 19.007 ms/op
                 comparisons: 1006604.000 #
                 stableSort:  1.000 #

Iteration   5: 18.988 ms/op
                 comparisons: 1006604.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.array":
  18.987 ±(99.9%) 0.192 ms/op [Average]
  (min, avg, max) = (18.925, 18.987, 19.056), stdev = 0.050
  CI (99.9%): [18.795, 19.178] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:comparisons":
  5033020.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1006604.000, 1006604.000, 1006604.000), stdev = 0.001
  CI (99.9%): [5033020.000, 5033020.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.array
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000000)

# Run progress: 8.33% complete, ETA 00:16:56
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 210.850 ms/op
# Warmup Iteration   2: 204.360 ms/op
Iteration   1: 204.171 ms/op
                 comparisons: 10008493.000 #
                 stableSort:  1.000 #

Iteration   2: 196.915 ms/op
                 comparisons: 10008493.000 #
                 stableSort:  1.000 #

Iteration   3: 203.783 ms/op
                 comparisons: 10008493.000 #
                 stableSort:  1.000 #

Iteration   4: 204.501 ms/op
                 comparisons: 10008493.000 #
                 stableSort:  1.000 #

Iteration   5: 204.324 ms/op
                 comparisons: 10008493.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.array":
  202.739 ±(99.9%) 12.578 ms/op [Average]
  (min, avg, max) = (196.915, 202.739, 204.501), stdev = 3.266
  CI (99.9%): [190.161, 215.317] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:comparisons":
  50042465.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10008493.000, 10008493.000, 10008493.000), stdev = 0.001
  CI (99.9%): [50042465.000, 50042465.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.array
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000)

# Run progress: 9.38% complete, ETA 00:19:59
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 5.631 ms/op
# Warmup Iteration   2: 5.540 ms/op
Iteration   1: 5.426 ms/op
                 comparisons: 119013.000 #
                 stableSort:  1.000 #

Iteration   2: 5.427 ms/op
                 comparisons: 119013.000 #
                 stableSort:  1.000 #

Iteration   3: 5.347 ms/op
                 comparisons: 119013.000 #
                 stableSort:  1.000 #

Iteration   4: 5.339 ms/op
                 comparisons: 119013.000 #
                 stableSort:  1.000 #

Iteration   5: 5.334 ms/op
                 comparisons: 119013.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.array":
  5.374 ±(99.9%) 0.183 ms/op [Average]
  (min, avg, max) = (5.334, 5.374, 5.427), stdev = 0.047
  CI (99.9%): [5.192, 5.557] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:comparisons":
  595065.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (119013.000, 119013.000, 119013.000), stdev = 0.001
  CI (99.9%): [595065.000, 595065.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.array
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 1000000)

# Run progress: 10.42% complete, ETA 00:18:49
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 66.478 ms/op
# Warmup Iteration   2: 65.258 ms/op
Iteration   1: 64.995 ms/op
                 comparisons: 1720160.000 #
                 stableSort:  1.000 #

Iteration   2: 65.076 ms/op
                 comparisons: 1720160.000 #
                 stableSort:  1.000 #

Iteration   3: 65.349 ms/op
                 comparisons: 1720160.000 #
                 stableSort:  1.000 #

Iteration   4: 65.732 ms/op
                 comparisons: 1720160.000 #
                 stableSort:  1.000 #

Iteration   5: 65.272 ms/op
                 comparisons: 1720160.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.array":
  65.285 ±(99.9%) 1.108 ms/op [Average]
  (min, avg, max) = (64.995, 65.285, 65.732), stdev = 0.288
  CI (99.9%): [64.176, 66.393] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:comparisons":
  8600800.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1720160.000, 1720160.000, 1720160.000), stdev = 0.001
  CI (99.9%): [8600800.000, 8600800.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.array
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000000)

# Run progress: 11.46% complete, ETA 00:18:07
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 318.150 ms/op
# Warmup Iteration   2: 308.115 ms/op
Iteration   1: 307.122 ms/op
                 comparisons: 11027238.000 #
                 stableSort:  1.000 #

Iteration   2: 310.749 ms/op
                 comparisons: 11027238.000 #
                 stableSort:  1.000 #

Iteration   3: 308.179 ms/op
                 comparisons: 11027238.000 #
                 stableSort:  1.000 #

Iteration   4: 307.129 ms/op
                 comparisons: 11027238.000 #
                 stableSort:  1.000 #

Iteration   5: 306.828 ms/op
                 comparisons: 11027238.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.array":
  308.001 ±(99.9%) 6.237 ms/op [Average]
  (min, avg, max) = (306.828, 308.001, 310.749), stdev = 1.620
  CI (99.9%): [301.765, 314.238] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:comparisons":
  55136190.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (11027238.000, 11027238.000, 11027238.000), stdev = 0.001
  CI (99.9%): [55136190.000, 55136190.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.array:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000)

# Run progress: 12.50% complete, ETA 00:20:14
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 2.945 ms/op
# Warmup Iteration   2: 2.720 ms/op
Iteration   1: 2.656 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   2: 2.684 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   3: 2.689 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   4: 2.682 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   5: 2.673 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort":
  2.677 ±(99.9%) 0.050 ms/op [Average]
  (min, avg, max) = (2.656, 2.677, 2.689), stdev = 0.013
  CI (99.9%): [2.627, 2.727] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort:comparisons":
  602180.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (120436.000, 120436.000, 120436.000), stdev = 0.001
  CI (99.9%): [602180.000, 602180.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 1000000)

# Run progress: 13.54% complete, ETA 00:19:14
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 704.921 ms/op
# Warmup Iteration   2: 675.953 ms/op
Iteration   1: 674.143 ms/op
                 comparisons: 18640601.000 #
                 stableSort:  1.000 #

Iteration   2: 675.543 ms/op
                 comparisons: 18640601.000 #
                 stableSort:  1.000 #

Iteration   3: 674.354 ms/op
                 comparisons: 18640601.000 #
                 stableSort:  1.000 #

Iteration   4: 675.181 ms/op
                 comparisons: 18640601.000 #
                 stableSort:  1.000 #

Iteration   5: 679.353 ms/op
                 comparisons: 18640601.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort":
  675.715 ±(99.9%) 8.140 ms/op [Average]
  (min, avg, max) = (674.143, 675.715, 679.353), stdev = 2.114
  CI (99.9%): [667.574, 683.855] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort:comparisons":
  93203005.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (18640601.000, 18640601.000, 18640601.000), stdev = 0.001
  CI (99.9%): [93203005.000, 93203005.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000000)

# Run progress: 14.58% complete, ETA 00:18:46
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 15822.766 ms/op
# Warmup Iteration   2: 14762.367 ms/op
Iteration   1: 14767.463 ms/op
                 comparisons: 220246568.000 #
                 stableSort:  1.000 #

Iteration   2: 15193.847 ms/op
                 comparisons: 220246568.000 #
                 stableSort:  1.000 #

Iteration   3: 14992.347 ms/op
                 comparisons: 220246568.000 #
                 stableSort:  1.000 #

Iteration   4: 15011.377 ms/op
                 comparisons: 220246568.000 #
                 stableSort:  1.000 #

Iteration   5: 14993.412 ms/op
                 comparisons: 220246568.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort":
  14991.689 ±(99.9%) 582.505 ms/op [Average]
  (min, avg, max) = (14767.463, 14991.689, 15193.847), stdev = 151.275
  CI (99.9%): [14409.184, 15574.194] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort:comparisons":
  1101232840.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (220246568.000, 220246568.000, 220246568.000), stdev = 0.001
  CI (99.9%): [1101232840.000, 1101232840.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000)

# Run progress: 15.63% complete, ETA 00:29:31
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: ignore trial
	at com.github.zabetak.benchmark.PartialSortBenchmark.ignoreTrial(PartialSortBenchmark.java:196)
	at com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort(PartialSortBenchmark.java:249)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_avgt_jmhStub(PartialSortBenchmark_collectionSort_jmhTest.java:326)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_AverageTime(PartialSortBenchmark_collectionSort_jmhTest.java:244)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)




# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 1000000)

# Run progress: 16.67% complete, ETA 00:27:21
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: ignore trial
	at com.github.zabetak.benchmark.PartialSortBenchmark.ignoreTrial(PartialSortBenchmark.java:196)
	at com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort(PartialSortBenchmark.java:249)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_avgt_jmhStub(PartialSortBenchmark_collectionSort_jmhTest.java:326)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_AverageTime(PartialSortBenchmark_collectionSort_jmhTest.java:244)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)




# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000000)

# Run progress: 17.71% complete, ETA 00:25:34
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: ignore trial
	at com.github.zabetak.benchmark.PartialSortBenchmark.ignoreTrial(PartialSortBenchmark.java:196)
	at com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort(PartialSortBenchmark.java:249)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_avgt_jmhStub(PartialSortBenchmark_collectionSort_jmhTest.java:326)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_AverageTime(PartialSortBenchmark_collectionSort_jmhTest.java:244)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)




# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000)

# Run progress: 18.75% complete, ETA 00:25:36
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: ignore trial
	at com.github.zabetak.benchmark.PartialSortBenchmark.ignoreTrial(PartialSortBenchmark.java:196)
	at com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort(PartialSortBenchmark.java:249)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_avgt_jmhStub(PartialSortBenchmark_collectionSort_jmhTest.java:326)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_AverageTime(PartialSortBenchmark_collectionSort_jmhTest.java:244)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)




# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 1000000)

# Run progress: 19.79% complete, ETA 00:23:57
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: ignore trial
	at com.github.zabetak.benchmark.PartialSortBenchmark.ignoreTrial(PartialSortBenchmark.java:196)
	at com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort(PartialSortBenchmark.java:249)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_avgt_jmhStub(PartialSortBenchmark_collectionSort_jmhTest.java:326)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_AverageTime(PartialSortBenchmark_collectionSort_jmhTest.java:244)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)




# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000000)

# Run progress: 20.83% complete, ETA 00:22:35
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: ignore trial
	at com.github.zabetak.benchmark.PartialSortBenchmark.ignoreTrial(PartialSortBenchmark.java:196)
	at com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort(PartialSortBenchmark.java:249)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_avgt_jmhStub(PartialSortBenchmark_collectionSort_jmhTest.java:326)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_AverageTime(PartialSortBenchmark_collectionSort_jmhTest.java:244)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)




# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000)

# Run progress: 21.88% complete, ETA 00:22:40
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 3.087 ms/op
# Warmup Iteration   2: 2.800 ms/op
Iteration   1: 2.688 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   2: 2.704 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   3: 2.720 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   4: 2.697 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   5: 2.671 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort":
  2.696 ±(99.9%) 0.069 ms/op [Average]
  (min, avg, max) = (2.671, 2.696, 2.720), stdev = 0.018
  CI (99.9%): [2.627, 2.765] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort:comparisons":
  602180.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (120436.000, 120436.000, 120436.000), stdev = 0.001
  CI (99.9%): [602180.000, 602180.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 1000000)

# Run progress: 22.92% complete, ETA 00:21:46
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: ignore trial
	at com.github.zabetak.benchmark.PartialSortBenchmark.ignoreTrial(PartialSortBenchmark.java:196)
	at com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort(PartialSortBenchmark.java:249)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_avgt_jmhStub(PartialSortBenchmark_collectionSort_jmhTest.java:326)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_AverageTime(PartialSortBenchmark_collectionSort_jmhTest.java:244)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)




# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000000)

# Run progress: 23.96% complete, ETA 00:20:38
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: ignore trial
	at com.github.zabetak.benchmark.PartialSortBenchmark.ignoreTrial(PartialSortBenchmark.java:196)
	at com.github.zabetak.benchmark.PartialSortBenchmark.collectionSort(PartialSortBenchmark.java:249)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_avgt_jmhStub(PartialSortBenchmark_collectionSort_jmhTest.java:326)
	at com.github.zabetak.benchmark.generated.PartialSortBenchmark_collectionSort_jmhTest.collectionSort_AverageTime(PartialSortBenchmark_collectionSort_jmhTest.java:244)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)




# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.limitSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000)

# Run progress: 25.00% complete, ETA 00:20:43
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 4.989 ms/op
# Warmup Iteration   2: 3.275 ms/op
Iteration   1: 3.225 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   2: 3.223 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   3: 3.211 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   4: 3.210 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   5: 3.215 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort":
  3.217 ±(99.9%) 0.026 ms/op [Average]
  (min, avg, max) = (3.210, 3.217, 3.225), stdev = 0.007
  CI (99.9%): [3.191, 3.243] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:comparisons":
  602180.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (120436.000, 120436.000, 120436.000), stdev = 0.001
  CI (99.9%): [602180.000, 602180.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.limitSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 1000000)

# Run progress: 26.04% complete, ETA 00:19:58
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 1005.451 ms/op
# Warmup Iteration   2: 725.812 ms/op
Iteration   1: 702.373 ms/op
                 comparisons: 18640601.000 #
                 stableSort:  1.000 #

Iteration   2: 698.241 ms/op
                 comparisons: 18640601.000 #
                 stableSort:  1.000 #

Iteration   3: 700.278 ms/op
                 comparisons: 18640601.000 #
                 stableSort:  1.000 #

Iteration   4: 689.735 ms/op
                 comparisons: 18640601.000 #
                 stableSort:  1.000 #

Iteration   5: 688.525 ms/op
                 comparisons: 18640601.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort":
  695.830 ±(99.9%) 24.271 ms/op [Average]
  (min, avg, max) = (688.525, 695.830, 702.373), stdev = 6.303
  CI (99.9%): [671.559, 720.102] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:comparisons":
  93203005.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (18640601.000, 18640601.000, 18640601.000), stdev = 0.001
  CI (99.9%): [93203005.000, 93203005.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.limitSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000000)

# Run progress: 27.08% complete, ETA 00:19:26
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 12528.589 ms/op
# Warmup Iteration   2: 12705.787 ms/op
Iteration   1: 12454.636 ms/op
                 comparisons: 220246568.000 #
                 stableSort:  1.000 #

Iteration   2: 11998.480 ms/op
                 comparisons: 220246568.000 #
                 stableSort:  1.000 #

Iteration   3: 12353.134 ms/op
                 comparisons: 220246568.000 #
                 stableSort:  1.000 #

Iteration   4: 12181.669 ms/op
                 comparisons: 220246568.000 #
                 stableSort:  1.000 #

Iteration   5: 12149.720 ms/op
                 comparisons: 220246568.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort":
  12227.528 ±(99.9%) 688.756 ms/op [Average]
  (min, avg, max) = (11998.480, 12227.528, 12454.636), stdev = 178.868
  CI (99.9%): [11538.772, 12916.284] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:comparisons":
  1101232840.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (220246568.000, 220246568.000, 220246568.000), stdev = 0.001
  CI (99.9%): [1101232840.000, 1101232840.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.limitSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000)

# Run progress: 28.13% complete, ETA 00:23:14
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 0.164 ms/op
# Warmup Iteration   2: 0.131 ms/op
Iteration   1: 0.131 ms/op
                 comparisons: 10267.000 #
                 stableSort:  1.000 #

Iteration   2: 0.133 ms/op
                 comparisons: 10267.000 #
                 stableSort:  1.000 #

Iteration   3: 0.134 ms/op
                 comparisons: 10267.000 #
                 stableSort:  1.000 #

Iteration   4: 0.135 ms/op
                 comparisons: 10267.000 #
                 stableSort:  1.000 #

Iteration   5: 0.135 ms/op
                 comparisons: 10267.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort":
  0.134 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.131, 0.134, 0.135), stdev = 0.002
  CI (99.9%): [0.128, 0.140] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:comparisons":
  51335.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10267.000, 10267.000, 10267.000), stdev = 0.001
  CI (99.9%): [51335.000, 51335.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.limitSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 1000000)

# Run progress: 29.17% complete, ETA 00:22:22
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 19.554 ms/op
# Warmup Iteration   2: 19.494 ms/op
Iteration   1: 19.183 ms/op
                 comparisons: 1000439.000 #
                 stableSort:  ≈ 0 #

Iteration   2: 19.133 ms/op
                 comparisons: 1000439.000 #
                 stableSort:  ≈ 0 #

Iteration   3: 19.120 ms/op
                 comparisons: 1000439.000 #
                 stableSort:  ≈ 0 #

Iteration   4: 19.119 ms/op
                 comparisons: 1000439.000 #
                 stableSort:  ≈ 0 #

Iteration   5: 19.044 ms/op
                 comparisons: 1000439.000 #
                 stableSort:  ≈ 0 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort":
  19.120 ±(99.9%) 0.192 ms/op [Average]
  (min, avg, max) = (19.044, 19.120, 19.183), stdev = 0.050
  CI (99.9%): [18.928, 19.312] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:comparisons":
  5002195.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1000439.000, 1000439.000, 1000439.000), stdev = 0.001
  CI (99.9%): [5002195.000, 5002195.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:stableSort":
  ≈ 0 #


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.limitSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000000)

# Run progress: 30.21% complete, ETA 00:21:38
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 200.961 ms/op
# Warmup Iteration   2: 209.068 ms/op
Iteration   1: 208.637 ms/op
                 comparisons: 10000485.000 #
                 stableSort:  1.000 #

Iteration   2: 209.010 ms/op
                 comparisons: 10000485.000 #
                 stableSort:  1.000 #

Iteration   3: 210.528 ms/op
                 comparisons: 10000485.000 #
                 stableSort:  1.000 #

Iteration   4: 210.104 ms/op
                 comparisons: 10000485.000 #
                 stableSort:  1.000 #

Iteration   5: 210.002 ms/op
                 comparisons: 10000485.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort":
  209.656 ±(99.9%) 3.066 ms/op [Average]
  (min, avg, max) = (208.637, 209.656, 210.528), stdev = 0.796
  CI (99.9%): [206.590, 212.723] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:comparisons":
  50002425.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10000485.000, 10000485.000, 10000485.000), stdev = 0.001
  CI (99.9%): [50002425.000, 50002425.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.limitSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000)

# Run progress: 31.25% complete, ETA 00:21:54
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 0.300 ms/op
# Warmup Iteration   2: 0.221 ms/op
Iteration   1: 0.221 ms/op
                 comparisons: 13571.000 #
                 stableSort:  ≈ 0 #

Iteration   2: 0.221 ms/op
                 comparisons: 13571.000 #
                 stableSort:  ≈ 0 #

Iteration   3: 0.219 ms/op
                 comparisons: 13571.000 #
                 stableSort:  ≈ 0 #

Iteration   4: 0.227 ms/op
                 comparisons: 13571.000 #
                 stableSort:  ≈ 0 #

Iteration   5: 0.238 ms/op
                 comparisons: 13571.000 #
                 stableSort:  ≈ 0 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort":
  0.225 ±(99.9%) 0.030 ms/op [Average]
  (min, avg, max) = (0.219, 0.225, 0.238), stdev = 0.008
  CI (99.9%): [0.195, 0.255] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:comparisons":
  67855.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (13571.000, 13571.000, 13571.000), stdev = 0.001
  CI (99.9%): [67855.000, 67855.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:stableSort":
  ≈ 0 #


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.limitSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 1000000)

# Run progress: 32.29% complete, ETA 00:21:07
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 18.976 ms/op
# Warmup Iteration   2: 18.376 ms/op
Iteration   1: 17.568 ms/op
                 comparisons: 1006680.000 #
                 stableSort:  1.000 #

Iteration   2: 17.575 ms/op
                 comparisons: 1006680.000 #
                 stableSort:  1.000 #

Iteration   3: 17.414 ms/op
                 comparisons: 1006680.000 #
                 stableSort:  1.000 #

Iteration   4: 17.406 ms/op
                 comparisons: 1006680.000 #
                 stableSort:  1.000 #

Iteration   5: 17.507 ms/op
                 comparisons: 1006680.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort":
  17.494 ±(99.9%) 0.312 ms/op [Average]
  (min, avg, max) = (17.406, 17.494, 17.575), stdev = 0.081
  CI (99.9%): [17.182, 17.806] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:comparisons":
  5033400.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1006680.000, 1006680.000, 1006680.000), stdev = 0.001
  CI (99.9%): [5033400.000, 5033400.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.limitSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000000)

# Run progress: 33.33% complete, ETA 00:20:27
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 211.014 ms/op
# Warmup Iteration   2: 192.106 ms/op
Iteration   1: 190.697 ms/op
                 comparisons: 10008583.000 #
                 stableSort:  ≈ 0 #

Iteration   2: 191.475 ms/op
                 comparisons: 10008583.000 #
                 stableSort:  ≈ 0 #

Iteration   3: 190.357 ms/op
                 comparisons: 10008583.000 #
                 stableSort:  ≈ 0 #

Iteration   4: 190.963 ms/op
                 comparisons: 10008583.000 #
                 stableSort:  ≈ 0 #

Iteration   5: 190.309 ms/op
                 comparisons: 10008583.000 #
                 stableSort:  ≈ 0 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort":
  190.760 ±(99.9%) 1.849 ms/op [Average]
  (min, avg, max) = (190.309, 190.760, 191.475), stdev = 0.480
  CI (99.9%): [188.911, 192.610] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:comparisons":
  50042915.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10008583.000, 10008583.000, 10008583.000), stdev = 0.001
  CI (99.9%): [50042915.000, 50042915.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:stableSort":
  ≈ 0 #


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.limitSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000)

# Run progress: 34.38% complete, ETA 00:20:40
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 4.540 ms/op
# Warmup Iteration   2: 2.962 ms/op
Iteration   1: 2.936 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   2: 2.929 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   3: 2.926 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   4: 2.924 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #

Iteration   5: 2.913 ms/op
                 comparisons: 120436.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort":
  2.926 ±(99.9%) 0.033 ms/op [Average]
  (min, avg, max) = (2.913, 2.926, 2.936), stdev = 0.008
  CI (99.9%): [2.893, 2.958] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:comparisons":
  602180.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (120436.000, 120436.000, 120436.000), stdev = 0.001
  CI (99.9%): [602180.000, 602180.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.limitSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 1000000)

# Run progress: 35.42% complete, ETA 00:19:58
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 56.256 ms/op
# Warmup Iteration   2: 44.705 ms/op
Iteration   1: 44.554 ms/op
                 comparisons: 1721581.000 #
                 stableSort:  ≈ 0 #

Iteration   2: 44.826 ms/op
                 comparisons: 1721581.000 #
                 stableSort:  ≈ 0 #

Iteration   3: 44.208 ms/op
                 comparisons: 1721581.000 #
                 stableSort:  ≈ 0 #

Iteration   4: 44.320 ms/op
                 comparisons: 1721581.000 #
                 stableSort:  ≈ 0 #

Iteration   5: 44.649 ms/op
                 comparisons: 1721581.000 #
                 stableSort:  ≈ 0 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort":
  44.511 ±(99.9%) 0.960 ms/op [Average]
  (min, avg, max) = (44.208, 44.511, 44.826), stdev = 0.249
  CI (99.9%): [43.552, 45.471] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:comparisons":
  8607905.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1721581.000, 1721581.000, 1721581.000), stdev = 0.001
  CI (99.9%): [8607905.000, 8607905.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:stableSort":
  ≈ 0 #


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.limitSort
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000000)

# Run progress: 36.46% complete, ETA 00:19:21
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 311.436 ms/op
# Warmup Iteration   2: 269.093 ms/op
Iteration   1: 263.740 ms/op
                 comparisons: 11029052.000 #
                 stableSort:  ≈ 0 #

Iteration   2: 265.234 ms/op
                 comparisons: 11029052.000 #
                 stableSort:  ≈ 0 #

Iteration   3: 262.779 ms/op
                 comparisons: 11029052.000 #
                 stableSort:  ≈ 0 #

Iteration   4: 264.402 ms/op
                 comparisons: 11029052.000 #
                 stableSort:  ≈ 0 #

Iteration   5: 264.271 ms/op
                 comparisons: 11029052.000 #
                 stableSort:  ≈ 0 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort":
  264.085 ±(99.9%) 3.486 ms/op [Average]
  (min, avg, max) = (262.779, 264.085, 265.234), stdev = 0.905
  CI (99.9%): [260.599, 267.571] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:comparisons":
  55145260.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (11029052.000, 11029052.000, 11029052.000), stdev = 0.001
  CI (99.9%): [55145260.000, 55145260.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.limitSort:stableSort":
  ≈ 0 #


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000)

# Run progress: 37.50% complete, ETA 00:19:23
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 5.065 ms/op
# Warmup Iteration   2: 3.302 ms/op
Iteration   1: 3.282 ms/op
                 comparisons: 137761.000 #
                 stableSort:  1.000 #

Iteration   2: 3.249 ms/op
                 comparisons: 137761.000 #
                 stableSort:  1.000 #

Iteration   3: 3.208 ms/op
                 comparisons: 137761.000 #
                 stableSort:  1.000 #

Iteration   4: 3.211 ms/op
                 comparisons: 137761.000 #
                 stableSort:  1.000 #

Iteration   5: 3.249 ms/op
                 comparisons: 137761.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue":
  3.240 ±(99.9%) 0.118 ms/op [Average]
  (min, avg, max) = (3.208, 3.240, 3.282), stdev = 0.031
  CI (99.9%): [3.122, 3.358] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:comparisons":
  688805.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (137761.000, 137761.000, 137761.000), stdev = 0.001
  CI (99.9%): [688805.000, 688805.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 1000000)

# Run progress: 38.54% complete, ETA 00:18:45
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 1141.890 ms/op
# Warmup Iteration   2: 823.579 ms/op
Iteration   1: 804.577 ms/op
                 comparisons: 20352424.000 #
                 stableSort:  1.000 #

Iteration   2: 807.659 ms/op
                 comparisons: 20352424.000 #
                 stableSort:  1.000 #

Iteration   3: 799.208 ms/op
                 comparisons: 20352424.000 #
                 stableSort:  1.000 #

Iteration   4: 798.891 ms/op
                 comparisons: 20352424.000 #
                 stableSort:  1.000 #

Iteration   5: 827.062 ms/op
                 comparisons: 20352424.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue":
  807.479 ±(99.9%) 44.496 ms/op [Average]
  (min, avg, max) = (798.891, 807.479, 827.062), stdev = 11.555
  CI (99.9%): [762.984, 851.975] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:comparisons":
  101762120.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (20352424.000, 20352424.000, 20352424.000), stdev = 0.001
  CI (99.9%): [101762120.000, 101762120.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000000)

# Run progress: 39.58% complete, ETA 00:18:16
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 15844.379 ms/op
# Warmup Iteration   2: 15031.062 ms/op
Iteration   1: 13872.282 ms/op
                 comparisons: 237673928.000 #
                 stableSort:  1.000 #

Iteration   2: 13712.110 ms/op
                 comparisons: 237673928.000 #
                 stableSort:  1.000 #

Iteration   3: 13589.357 ms/op
                 comparisons: 237673928.000 #
                 stableSort:  1.000 #

Iteration   4: 13546.680 ms/op
                 comparisons: 237673928.000 #
                 stableSort:  1.000 #

Iteration   5: 13715.691 ms/op
                 comparisons: 237673928.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue":
  13687.224 ±(99.9%) 490.889 ms/op [Average]
  (min, avg, max) = (13546.680, 13687.224, 13872.282), stdev = 127.482
  CI (99.9%): [13196.335, 14178.113] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:comparisons":
  1188369640.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (237673928.000, 237673928.000, 237673928.000), stdev = 0.001
  CI (99.9%): [1188369640.000, 1188369640.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000)

# Run progress: 40.63% complete, ETA 00:20:32
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 0.128 ms/op
# Warmup Iteration   2: 0.130 ms/op
Iteration   1: 0.130 ms/op
                 comparisons: 10473.000 #
                 stableSort:  ≈ 0 #

Iteration   2: 0.130 ms/op
                 comparisons: 10473.000 #
                 stableSort:  ≈ 0 #

Iteration   3: 0.130 ms/op
                 comparisons: 10473.000 #
                 stableSort:  ≈ 0 #

Iteration   4: 0.130 ms/op
                 comparisons: 10473.000 #
                 stableSort:  ≈ 0 #

Iteration   5: 0.129 ms/op
                 comparisons: 10473.000 #
                 stableSort:  ≈ 0 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue":
  0.130 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.129, 0.130, 0.130), stdev = 0.001
  CI (99.9%): [0.129, 0.131] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:comparisons":
  52365.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10473.000, 10473.000, 10473.000), stdev = 0.001
  CI (99.9%): [52365.000, 52365.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:stableSort":
  ≈ 0 #


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 1000000)

# Run progress: 41.67% complete, ETA 00:19:50
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 19.609 ms/op
# Warmup Iteration   2: 19.320 ms/op
Iteration   1: 19.357 ms/op
                 comparisons: 1000790.000 #
                 stableSort:  1.000 #

Iteration   2: 19.326 ms/op
                 comparisons: 1000790.000 #
                 stableSort:  1.000 #

Iteration   3: 19.382 ms/op
                 comparisons: 1000790.000 #
                 stableSort:  1.000 #

Iteration   4: 19.487 ms/op
                 comparisons: 1000790.000 #
                 stableSort:  1.000 #

Iteration   5: 19.359 ms/op
                 comparisons: 1000790.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue":
  19.382 ±(99.9%) 0.239 ms/op [Average]
  (min, avg, max) = (19.326, 19.382, 19.487), stdev = 0.062
  CI (99.9%): [19.143, 19.621] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:comparisons":
  5003950.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1000790.000, 1000790.000, 1000790.000), stdev = 0.001
  CI (99.9%): [5003950.000, 5003950.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000000)

# Run progress: 42.71% complete, ETA 00:19:13
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 205.399 ms/op
# Warmup Iteration   2: 190.122 ms/op
Iteration   1: 189.395 ms/op
                 comparisons: 10000861.000 #
                 stableSort:  1.000 #

Iteration   2: 189.254 ms/op
                 comparisons: 10000861.000 #
                 stableSort:  1.000 #

Iteration   3: 190.171 ms/op
                 comparisons: 10000861.000 #
                 stableSort:  1.000 #

Iteration   4: 189.418 ms/op
                 comparisons: 10000861.000 #
                 stableSort:  1.000 #

Iteration   5: 189.655 ms/op
                 comparisons: 10000861.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue":
  189.578 ±(99.9%) 1.390 ms/op [Average]
  (min, avg, max) = (189.254, 189.578, 190.171), stdev = 0.361
  CI (99.9%): [188.189, 190.968] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:comparisons":
  50004305.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10000861.000, 10000861.000, 10000861.000), stdev = 0.001
  CI (99.9%): [50004305.000, 50004305.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000)

# Run progress: 43.75% complete, ETA 00:19:06
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 0.274 ms/op
# Warmup Iteration   2: 0.228 ms/op
Iteration   1: 0.227 ms/op
                 comparisons: 16545.000 #
                 stableSort:  ≈ 0 #

Iteration   2: 0.245 ms/op
                 comparisons: 16545.000 #
                 stableSort:  ≈ 0 #

Iteration   3: 0.246 ms/op
                 comparisons: 16545.000 #
                 stableSort:  ≈ 0 #

Iteration   4: 0.248 ms/op
                 comparisons: 16545.000 #
                 stableSort:  ≈ 0 #

Iteration   5: 0.246 ms/op
                 comparisons: 16545.000 #
                 stableSort:  ≈ 0 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue":
  0.242 ±(99.9%) 0.033 ms/op [Average]
  (min, avg, max) = (0.227, 0.242, 0.248), stdev = 0.008
  CI (99.9%): [0.210, 0.275] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:comparisons":
  82725.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (16545.000, 16545.000, 16545.000), stdev = 0.001
  CI (99.9%): [82725.000, 82725.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:stableSort":
  ≈ 0 #


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 1000000)

# Run progress: 44.79% complete, ETA 00:18:28
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 18.934 ms/op
# Warmup Iteration   2: 18.133 ms/op
Iteration   1: 18.318 ms/op
                 comparisons: 1012314.000 #
                 stableSort:  ≈ 0 #

Iteration   2: 18.047 ms/op
                 comparisons: 1012314.000 #
                 stableSort:  ≈ 0 #

Iteration   3: 18.090 ms/op
                 comparisons: 1012314.000 #
                 stableSort:  ≈ 0 #

Iteration   4: 17.967 ms/op
                 comparisons: 1012314.000 #
                 stableSort:  ≈ 0 #

Iteration   5: 18.084 ms/op
                 comparisons: 1012314.000 #
                 stableSort:  ≈ 0 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue":
  18.101 ±(99.9%) 0.504 ms/op [Average]
  (min, avg, max) = (17.967, 18.101, 18.318), stdev = 0.131
  CI (99.9%): [17.597, 18.605] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:comparisons":
  5061570.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1012314.000, 1012314.000, 1012314.000), stdev = 0.001
  CI (99.9%): [5061570.000, 5061570.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:stableSort":
  ≈ 0 #


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000000)

# Run progress: 45.83% complete, ETA 00:17:53
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 201.432 ms/op
# Warmup Iteration   2: 200.069 ms/op
Iteration   1: 201.826 ms/op
                 comparisons: 10015917.000 #
                 stableSort:  1.000 #

Iteration   2: 191.968 ms/op
                 comparisons: 10015917.000 #
                 stableSort:  1.000 #

Iteration   3: 192.102 ms/op
                 comparisons: 10015917.000 #
                 stableSort:  1.000 #

Iteration   4: 197.576 ms/op
                 comparisons: 10015917.000 #
                 stableSort:  1.000 #

Iteration   5: 192.870 ms/op
                 comparisons: 10015917.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue":
  195.269 ±(99.9%) 16.674 ms/op [Average]
  (min, avg, max) = (191.968, 195.269, 201.826), stdev = 4.330
  CI (99.9%): [178.595, 211.942] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:comparisons":
  50079585.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10015917.000, 10015917.000, 10015917.000), stdev = 0.001
  CI (99.9%): [50079585.000, 50079585.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000)

# Run progress: 46.88% complete, ETA 00:17:45
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 4.688 ms/op
# Warmup Iteration   2: 3.224 ms/op
Iteration   1: 3.173 ms/op
                 comparisons: 137761.000 #
                 stableSort:  1.000 #

Iteration   2: 3.182 ms/op
                 comparisons: 137761.000 #
                 stableSort:  1.000 #

Iteration   3: 3.182 ms/op
                 comparisons: 137761.000 #
                 stableSort:  1.000 #

Iteration   4: 3.384 ms/op
                 comparisons: 137761.000 #
                 stableSort:  1.000 #

Iteration   5: 3.422 ms/op
                 comparisons: 137761.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue":
  3.269 ±(99.9%) 0.475 ms/op [Average]
  (min, avg, max) = (3.173, 3.269, 3.422), stdev = 0.123
  CI (99.9%): [2.794, 3.744] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:comparisons":
  688805.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (137761.000, 137761.000, 137761.000), stdev = 0.001
  CI (99.9%): [688805.000, 688805.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 1000000)

# Run progress: 47.92% complete, ETA 00:17:10
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 63.298 ms/op
# Warmup Iteration   2: 52.459 ms/op
Iteration   1: 51.920 ms/op
                 comparisons: 2280683.000 #
                 stableSort:  ≈ 0 #

Iteration   2: 52.085 ms/op
                 comparisons: 2280683.000 #
                 stableSort:  ≈ 0 #

Iteration   3: 51.929 ms/op
                 comparisons: 2280683.000 #
                 stableSort:  ≈ 0 #

Iteration   4: 52.099 ms/op
                 comparisons: 2280683.000 #
                 stableSort:  ≈ 0 #

Iteration   5: 51.893 ms/op
                 comparisons: 2280683.000 #
                 stableSort:  ≈ 0 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue":
  51.985 ±(99.9%) 0.380 ms/op [Average]
  (min, avg, max) = (51.893, 51.985, 52.099), stdev = 0.099
  CI (99.9%): [51.605, 52.366] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:comparisons":
  11403415.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (2280683.000, 2280683.000, 2280683.000), stdev = 0.001
  CI (99.9%): [11403415.000, 11403415.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:stableSort":
  ≈ 0 #


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000000)

# Run progress: 48.96% complete, ETA 00:16:37
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 297.707 ms/op
# Warmup Iteration   2: 287.159 ms/op
Iteration   1: 273.452 ms/op
                 comparisons: 11860948.000 #
                 stableSort:  ≈ 0 #

Iteration   2: 271.762 ms/op
                 comparisons: 11860948.000 #
                 stableSort:  ≈ 0 #

Iteration   3: 273.475 ms/op
                 comparisons: 11860948.000 #
                 stableSort:  ≈ 0 #

Iteration   4: 273.481 ms/op
                 comparisons: 11860948.000 #
                 stableSort:  ≈ 0 #

Iteration   5: 272.952 ms/op
                 comparisons: 11860948.000 #
                 stableSort:  ≈ 0 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue":
  273.024 ±(99.9%) 2.851 ms/op [Average]
  (min, avg, max) = (271.762, 273.024, 273.481), stdev = 0.741
  CI (99.9%): [270.173, 275.876] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:comparisons":
  59304740.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (11860948.000, 11860948.000, 11860948.000), stdev = 0.001
  CI (99.9%): [59304740.000, 59304740.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.priorityQueue:stableSort":
  ≈ 0 #


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000)

# Run progress: 50.00% complete, ETA 00:16:28
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 6.025 ms/op
# Warmup Iteration   2: 5.798 ms/op
Iteration   1: 5.805 ms/op
                 comparisons: 239871.000 #
                 stableSort:  1.000 #

Iteration   2: 5.768 ms/op
                 comparisons: 239871.000 #
                 stableSort:  1.000 #

Iteration   3: 5.731 ms/op
                 comparisons: 239871.000 #
                 stableSort:  1.000 #

Iteration   4: 5.722 ms/op
                 comparisons: 239871.000 #
                 stableSort:  1.000 #

Iteration   5: 5.796 ms/op
                 comparisons: 239871.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap":
  5.765 ±(99.9%) 0.144 ms/op [Average]
  (min, avg, max) = (5.722, 5.765, 5.805), stdev = 0.037
  CI (99.9%): [5.621, 5.908] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:comparisons":
  1199355.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (239871.000, 239871.000, 239871.000), stdev = 0.001
  CI (99.9%): [1199355.000, 1199355.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 1000000)

# Run progress: 51.04% complete, ETA 00:15:55
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 1684.933 ms/op
# Warmup Iteration   2: 1626.368 ms/op
Iteration   1: 1607.037 ms/op
                 comparisons: 37192573.000 #
                 stableSort:  1.000 #

Iteration   2: 1603.936 ms/op
                 comparisons: 37192573.000 #
                 stableSort:  1.000 #

Iteration   3: 1608.790 ms/op
                 comparisons: 37192573.000 #
                 stableSort:  1.000 #

Iteration   4: 1622.315 ms/op
                 comparisons: 37192573.000 #
                 stableSort:  1.000 #

Iteration   5: 1611.675 ms/op
                 comparisons: 37192573.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap":
  1610.751 ±(99.9%) 27.138 ms/op [Average]
  (min, avg, max) = (1603.936, 1610.751, 1622.315), stdev = 7.048
  CI (99.9%): [1583.613, 1637.888] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:comparisons":
  185962865.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (37192573.000, 37192573.000, 37192573.000), stdev = 0.001
  CI (99.9%): [185962865.000, 185962865.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000000)

# Run progress: 52.08% complete, ETA 00:15:28
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 34506.796 ms/op
# Warmup Iteration   2: 34167.592 ms/op
Iteration   1: 34033.920 ms/op
                 comparisons: 438658483.000 #
                 stableSort:  1.000 #

Iteration   2: 33581.570 ms/op
                 comparisons: 438658483.000 #
                 stableSort:  1.000 #

Iteration   3: 33252.771 ms/op
                 comparisons: 438658483.000 #
                 stableSort:  1.000 #

Iteration   4: 33270.921 ms/op
                 comparisons: 438658483.000 #
                 stableSort:  1.000 #

Iteration   5: 33330.274 ms/op
                 comparisons: 438658483.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap":
  33493.891 ±(99.9%) 1268.295 ms/op [Average]
  (min, avg, max) = (33252.771, 33493.891, 34033.920), stdev = 329.372
  CI (99.9%): [32225.596, 34762.186] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:comparisons":
  2193292415.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (438658483.000, 438658483.000, 438658483.000), stdev = 0.001
  CI (99.9%): [2193292415.000, 2193292415.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000)

# Run progress: 53.13% complete, ETA 00:18:42
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 0.127 ms/op
# Warmup Iteration   2: 0.120 ms/op
Iteration   1: 0.120 ms/op
                 comparisons: 10348.000 #
                 stableSort:  1.000 #

Iteration   2: 0.121 ms/op
                 comparisons: 10348.000 #
                 stableSort:  1.000 #

Iteration   3: 0.120 ms/op
                 comparisons: 10348.000 #
                 stableSort:  1.000 #

Iteration   4: 0.120 ms/op
                 comparisons: 10348.000 #
                 stableSort:  1.000 #

Iteration   5: 0.120 ms/op
                 comparisons: 10348.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap":
  0.120 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.120, 0.120, 0.121), stdev = 0.001
  CI (99.9%): [0.120, 0.121] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:comparisons":
  51740.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10348.000, 10348.000, 10348.000), stdev = 0.001
  CI (99.9%): [51740.000, 51740.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 1000000)

# Run progress: 54.17% complete, ETA 00:18:02
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 20.168 ms/op
# Warmup Iteration   2: 19.684 ms/op
Iteration   1: 19.709 ms/op
                 comparisons: 1000563.000 #
                 stableSort:  1.000 #

Iteration   2: 19.738 ms/op
                 comparisons: 1000563.000 #
                 stableSort:  1.000 #

Iteration   3: 19.716 ms/op
                 comparisons: 1000563.000 #
                 stableSort:  1.000 #

Iteration   4: 19.681 ms/op
                 comparisons: 1000563.000 #
                 stableSort:  1.000 #

Iteration   5: 19.749 ms/op
                 comparisons: 1000563.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap":
  19.719 ±(99.9%) 0.102 ms/op [Average]
  (min, avg, max) = (19.681, 19.719, 19.749), stdev = 0.026
  CI (99.9%): [19.617, 19.821] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:comparisons":
  5002815.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1000563.000, 1000563.000, 1000563.000), stdev = 0.001
  CI (99.9%): [5002815.000, 5002815.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000000)

# Run progress: 55.21% complete, ETA 00:17:24
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 199.265 ms/op
# Warmup Iteration   2: 202.830 ms/op
Iteration   1: 202.919 ms/op
                 comparisons: 10000645.000 #
                 stableSort:  1.000 #

Iteration   2: 206.180 ms/op
                 comparisons: 10000645.000 #
                 stableSort:  1.000 #

Iteration   3: 202.158 ms/op
                 comparisons: 10000645.000 #
                 stableSort:  1.000 #

Iteration   4: 204.106 ms/op
                 comparisons: 10000645.000 #
                 stableSort:  1.000 #

Iteration   5: 204.224 ms/op
                 comparisons: 10000645.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap":
  203.917 ±(99.9%) 5.885 ms/op [Average]
  (min, avg, max) = (202.158, 203.917, 206.180), stdev = 1.528
  CI (99.9%): [198.032, 209.802] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:comparisons":
  50003225.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10000645.000, 10000645.000, 10000645.000), stdev = 0.001
  CI (99.9%): [50003225.000, 50003225.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000)

# Run progress: 56.25% complete, ETA 00:17:06
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 0.274 ms/op
# Warmup Iteration   2: 0.254 ms/op
Iteration   1: 0.254 ms/op
                 comparisons: 15846.000 #
                 stableSort:  1.000 #

Iteration   2: 0.254 ms/op
                 comparisons: 15846.000 #
                 stableSort:  1.000 #

Iteration   3: 0.253 ms/op
                 comparisons: 15846.000 #
                 stableSort:  1.000 #

Iteration   4: 0.253 ms/op
                 comparisons: 15846.000 #
                 stableSort:  1.000 #

Iteration   5: 0.254 ms/op
                 comparisons: 15846.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap":
  0.254 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.253, 0.254, 0.254), stdev = 0.001
  CI (99.9%): [0.252, 0.256] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:comparisons":
  79230.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (15846.000, 15846.000, 15846.000), stdev = 0.001
  CI (99.9%): [79230.000, 79230.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 1000000)

# Run progress: 57.29% complete, ETA 00:16:28
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 19.562 ms/op
# Warmup Iteration   2: 19.699 ms/op
Iteration   1: 18.677 ms/op
                 comparisons: 1010700.000 #
                 stableSort:  1.000 #

Iteration   2: 18.645 ms/op
                 comparisons: 1010700.000 #
                 stableSort:  1.000 #

Iteration   3: 18.716 ms/op
                 comparisons: 1010700.000 #
                 stableSort:  1.000 #

Iteration   4: 18.650 ms/op
                 comparisons: 1010700.000 #
                 stableSort:  1.000 #

Iteration   5: 18.650 ms/op
                 comparisons: 1010700.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap":
  18.667 ±(99.9%) 0.115 ms/op [Average]
  (min, avg, max) = (18.645, 18.667, 18.716), stdev = 0.030
  CI (99.9%): [18.553, 18.782] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:comparisons":
  5053500.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1010700.000, 1010700.000, 1010700.000), stdev = 0.001
  CI (99.9%): [5053500.000, 5053500.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000000)

# Run progress: 58.33% complete, ETA 00:15:54
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 195.970 ms/op
# Warmup Iteration   2: 189.720 ms/op
Iteration   1: 190.297 ms/op
                 comparisons: 10013616.000 #
                 stableSort:  1.000 #

Iteration   2: 191.743 ms/op
                 comparisons: 10013616.000 #
                 stableSort:  1.000 #

Iteration   3: 190.993 ms/op
                 comparisons: 10013616.000 #
                 stableSort:  1.000 #

Iteration   4: 191.115 ms/op
                 comparisons: 10013616.000 #
                 stableSort:  1.000 #

Iteration   5: 189.992 ms/op
                 comparisons: 10013616.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap":
  190.828 ±(99.9%) 2.673 ms/op [Average]
  (min, avg, max) = (189.992, 190.828, 191.743), stdev = 0.694
  CI (99.9%): [188.155, 193.501] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:comparisons":
  50068080.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10013616.000, 10013616.000, 10013616.000), stdev = 0.001
  CI (99.9%): [50068080.000, 50068080.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000)

# Run progress: 59.38% complete, ETA 00:15:36
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 6.461 ms/op
# Warmup Iteration   2: 6.298 ms/op
Iteration   1: 6.238 ms/op
                 comparisons: 239871.000 #
                 stableSort:  1.000 #

Iteration   2: 6.224 ms/op
                 comparisons: 239871.000 #
                 stableSort:  1.000 #

Iteration   3: 6.244 ms/op
                 comparisons: 239871.000 #
                 stableSort:  1.000 #

Iteration   4: 6.194 ms/op
                 comparisons: 239871.000 #
                 stableSort:  1.000 #

Iteration   5: 6.192 ms/op
                 comparisons: 239871.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap":
  6.218 ±(99.9%) 0.093 ms/op [Average]
  (min, avg, max) = (6.192, 6.218, 6.244), stdev = 0.024
  CI (99.9%): [6.125, 6.312] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:comparisons":
  1199355.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (239871.000, 239871.000, 239871.000), stdev = 0.001
  CI (99.9%): [1199355.000, 1199355.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 1000000)

# Run progress: 60.42% complete, ETA 00:15:01
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 50.935 ms/op
# Warmup Iteration   2: 48.250 ms/op
Iteration   1: 48.205 ms/op
                 comparisons: 2315300.000 #
                 stableSort:  1.000 #

Iteration   2: 48.095 ms/op
                 comparisons: 2315300.000 #
                 stableSort:  1.000 #

Iteration   3: 48.818 ms/op
                 comparisons: 2315300.000 #
                 stableSort:  1.000 #

Iteration   4: 49.390 ms/op
                 comparisons: 2315300.000 #
                 stableSort:  1.000 #

Iteration   5: 49.595 ms/op
                 comparisons: 2315300.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap":
  48.821 ±(99.9%) 2.605 ms/op [Average]
  (min, avg, max) = (48.095, 48.821, 49.595), stdev = 0.676
  CI (99.9%): [46.216, 51.425] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:comparisons":
  11576500.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (2315300.000, 2315300.000, 2315300.000), stdev = 0.001
  CI (99.9%): [11576500.000, 11576500.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000000)

# Run progress: 61.46% complete, ETA 00:14:28
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 300.957 ms/op
# Warmup Iteration   2: 276.879 ms/op
Iteration   1: 275.792 ms/op
                 comparisons: 11859505.000 #
                 stableSort:  1.000 #

Iteration   2: 278.170 ms/op
                 comparisons: 11859505.000 #
                 stableSort:  1.000 #

Iteration   3: 278.415 ms/op
                 comparisons: 11859505.000 #
                 stableSort:  1.000 #

Iteration   4: 276.142 ms/op
                 comparisons: 11859505.000 #
                 stableSort:  1.000 #

Iteration   5: 276.308 ms/op
                 comparisons: 11859505.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap":
  276.966 ±(99.9%) 4.732 ms/op [Average]
  (min, avg, max) = (275.792, 276.966, 278.415), stdev = 1.229
  CI (99.9%): [272.233, 281.698] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:comparisons":
  59297525.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (11859505.000, 11859505.000, 11859505.000), stdev = 0.001
  CI (99.9%): [59297525.000, 59297525.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000)

# Run progress: 62.50% complete, ETA 00:14:09
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 4.359 ms/op
# Warmup Iteration   2: 4.237 ms/op
Iteration   1: 4.239 ms/op
                 comparisons: 127580.000 #
                 stableSort:  1.000 #

Iteration   2: 4.224 ms/op
                 comparisons: 127580.000 #
                 stableSort:  1.000 #

Iteration   3: 4.270 ms/op
                 comparisons: 127580.000 #
                 stableSort:  1.000 #

Iteration   4: 4.263 ms/op
                 comparisons: 127580.000 #
                 stableSort:  1.000 #

Iteration   5: 4.243 ms/op
                 comparisons: 127580.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2":
  4.248 ±(99.9%) 0.071 ms/op [Average]
  (min, avg, max) = (4.224, 4.248, 4.270), stdev = 0.019
  CI (99.9%): [4.177, 4.319] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:comparisons":
  637900.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (127580.000, 127580.000, 127580.000), stdev = 0.001
  CI (99.9%): [637900.000, 637900.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 1000000)

# Run progress: 63.54% complete, ETA 00:13:36
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 1393.244 ms/op
# Warmup Iteration   2: 1318.570 ms/op
Iteration   1: 1320.063 ms/op
                 comparisons: 19314605.000 #
                 stableSort:  1.000 #

Iteration   2: 1300.476 ms/op
                 comparisons: 19314605.000 #
                 stableSort:  1.000 #

Iteration   3: 1291.713 ms/op
                 comparisons: 19314605.000 #
                 stableSort:  1.000 #

Iteration   4: 1291.453 ms/op
                 comparisons: 19314605.000 #
                 stableSort:  1.000 #

Iteration   5: 1290.467 ms/op
                 comparisons: 19314605.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2":
  1298.834 ±(99.9%) 48.269 ms/op [Average]
  (min, avg, max) = (1290.467, 1298.834, 1320.063), stdev = 12.535
  CI (99.9%): [1250.565, 1347.104] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:comparisons":
  96573025.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (19314605.000, 19314605.000, 19314605.000), stdev = 0.001
  CI (99.9%): [96573025.000, 96573025.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000000)

# Run progress: 64.58% complete, ETA 00:13:07
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 26653.188 ms/op
# Warmup Iteration   2: 25388.079 ms/op
Iteration   1: 24730.772 ms/op
                 comparisons: 226866171.000 #
                 stableSort:  1.000 #

Iteration   2: 24617.283 ms/op
                 comparisons: 226866171.000 #
                 stableSort:  1.000 #

Iteration   3: 24730.299 ms/op
                 comparisons: 226866171.000 #
                 stableSort:  1.000 #

Iteration   4: 24761.651 ms/op
                 comparisons: 226866171.000 #
                 stableSort:  1.000 #

Iteration   5: 25027.795 ms/op
                 comparisons: 226866171.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2":
  24773.560 ±(99.9%) 586.835 ms/op [Average]
  (min, avg, max) = (24617.283, 24773.560, 25027.795), stdev = 152.399
  CI (99.9%): [24186.725, 25360.395] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:comparisons":
  1134330855.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (226866171.000, 226866171.000, 226866171.000), stdev = 0.001
  CI (99.9%): [1134330855.000, 1134330855.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000)

# Run progress: 65.63% complete, ETA 00:14:17
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 0.122 ms/op
# Warmup Iteration   2: 0.117 ms/op
Iteration   1: 0.117 ms/op
                 comparisons: 10290.000 #
                 stableSort:  1.000 #

Iteration   2: 0.117 ms/op
                 comparisons: 10290.000 #
                 stableSort:  1.000 #

Iteration   3: 0.117 ms/op
                 comparisons: 10290.000 #
                 stableSort:  1.000 #

Iteration   4: 0.117 ms/op
                 comparisons: 10290.000 #
                 stableSort:  1.000 #

Iteration   5: 0.117 ms/op
                 comparisons: 10290.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2":
  0.117 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.117, 0.117, 0.117), stdev = 0.001
  CI (99.9%): [0.116, 0.118] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:comparisons":
  51450.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10290.000, 10290.000, 10290.000), stdev = 0.001
  CI (99.9%): [51450.000, 51450.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 1000000)

# Run progress: 66.67% complete, ETA 00:13:42
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 18.998 ms/op
# Warmup Iteration   2: 18.937 ms/op
Iteration   1: 18.907 ms/op
                 comparisons: 1000488.000 #
                 stableSort:  1.000 #

Iteration   2: 18.889 ms/op
                 comparisons: 1000488.000 #
                 stableSort:  1.000 #

Iteration   3: 18.847 ms/op
                 comparisons: 1000488.000 #
                 stableSort:  1.000 #

Iteration   4: 18.888 ms/op
                 comparisons: 1000488.000 #
                 stableSort:  1.000 #

Iteration   5: 18.925 ms/op
                 comparisons: 1000488.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2":
  18.891 ±(99.9%) 0.111 ms/op [Average]
  (min, avg, max) = (18.847, 18.891, 18.925), stdev = 0.029
  CI (99.9%): [18.780, 19.002] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:comparisons":
  5002440.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1000488.000, 1000488.000, 1000488.000), stdev = 0.001
  CI (99.9%): [5002440.000, 5002440.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000000)

# Run progress: 67.71% complete, ETA 00:13:08
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 205.813 ms/op
# Warmup Iteration   2: 215.744 ms/op
Iteration   1: 214.985 ms/op
                 comparisons: 10000571.000 #
                 stableSort:  1.000 #

Iteration   2: 216.865 ms/op
                 comparisons: 10000571.000 #
                 stableSort:  1.000 #

Iteration   3: 214.500 ms/op
                 comparisons: 10000571.000 #
                 stableSort:  1.000 #

Iteration   4: 216.190 ms/op
                 comparisons: 10000571.000 #
                 stableSort:  1.000 #

Iteration   5: 214.884 ms/op
                 comparisons: 10000571.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2":
  215.485 ±(99.9%) 3.842 ms/op [Average]
  (min, avg, max) = (214.500, 215.485, 216.865), stdev = 0.998
  CI (99.9%): [211.643, 219.327] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:comparisons":
  50002855.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10000571.000, 10000571.000, 10000571.000), stdev = 0.001
  CI (99.9%): [50002855.000, 50002855.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000)

# Run progress: 68.75% complete, ETA 00:12:46
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 0.266 ms/op
# Warmup Iteration   2: 0.248 ms/op
Iteration   1: 0.248 ms/op
                 comparisons: 15135.000 #
                 stableSort:  1.000 #

Iteration   2: 0.248 ms/op
                 comparisons: 15135.000 #
                 stableSort:  1.000 #

Iteration   3: 0.248 ms/op
                 comparisons: 15135.000 #
                 stableSort:  1.000 #

Iteration   4: 0.248 ms/op
                 comparisons: 15135.000 #
                 stableSort:  1.000 #

Iteration   5: 0.248 ms/op
                 comparisons: 15135.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2":
  0.248 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.248, 0.248, 0.248), stdev = 0.001
  CI (99.9%): [0.247, 0.249] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:comparisons":
  75675.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (15135.000, 15135.000, 15135.000), stdev = 0.001
  CI (99.9%): [75675.000, 75675.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 1000000)

# Run progress: 69.79% complete, ETA 00:12:12
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 19.656 ms/op
# Warmup Iteration   2: 19.196 ms/op
Iteration   1: 18.172 ms/op
                 comparisons: 1009763.000 #
                 stableSort:  1.000 #

Iteration   2: 18.298 ms/op
                 comparisons: 1009763.000 #
                 stableSort:  1.000 #

Iteration   3: 18.244 ms/op
                 comparisons: 1009763.000 #
                 stableSort:  1.000 #

Iteration   4: 18.222 ms/op
                 comparisons: 1009763.000 #
                 stableSort:  1.000 #

Iteration   5: 18.214 ms/op
                 comparisons: 1009763.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2":
  18.230 ±(99.9%) 0.178 ms/op [Average]
  (min, avg, max) = (18.172, 18.230, 18.298), stdev = 0.046
  CI (99.9%): [18.051, 18.408] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:comparisons":
  5048815.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1009763.000, 1009763.000, 1009763.000), stdev = 0.001
  CI (99.9%): [5048815.000, 5048815.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000000)

# Run progress: 70.83% complete, ETA 00:11:40
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 201.667 ms/op
# Warmup Iteration   2: 186.984 ms/op
Iteration   1: 186.992 ms/op
                 comparisons: 10012548.000 #
                 stableSort:  1.000 #

Iteration   2: 187.644 ms/op
                 comparisons: 10012548.000 #
                 stableSort:  1.000 #

Iteration   3: 186.490 ms/op
                 comparisons: 10012548.000 #
                 stableSort:  1.000 #

Iteration   4: 186.061 ms/op
                 comparisons: 10012548.000 #
                 stableSort:  1.000 #

Iteration   5: 186.675 ms/op
                 comparisons: 10012548.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2":
  186.772 ±(99.9%) 2.280 ms/op [Average]
  (min, avg, max) = (186.061, 186.772, 187.644), stdev = 0.592
  CI (99.9%): [184.492, 189.052] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:comparisons":
  50062740.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10012548.000, 10012548.000, 10012548.000), stdev = 0.001
  CI (99.9%): [50062740.000, 50062740.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000)

# Run progress: 71.88% complete, ETA 00:11:20
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 4.908 ms/op
# Warmup Iteration   2: 4.742 ms/op
Iteration   1: 4.713 ms/op
                 comparisons: 127580.000 #
                 stableSort:  1.000 #

Iteration   2: 4.646 ms/op
                 comparisons: 127580.000 #
                 stableSort:  1.000 #

Iteration   3: 4.698 ms/op
                 comparisons: 127580.000 #
                 stableSort:  1.000 #

Iteration   4: 4.706 ms/op
                 comparisons: 127580.000 #
                 stableSort:  1.000 #

Iteration   5: 4.704 ms/op
                 comparisons: 127580.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2":
  4.694 ±(99.9%) 0.103 ms/op [Average]
  (min, avg, max) = (4.646, 4.694, 4.713), stdev = 0.027
  CI (99.9%): [4.590, 4.797] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:comparisons":
  637900.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (127580.000, 127580.000, 127580.000), stdev = 0.001
  CI (99.9%): [637900.000, 637900.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 1000000)

# Run progress: 72.92% complete, ETA 00:10:48
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 54.849 ms/op
# Warmup Iteration   2: 51.462 ms/op
Iteration   1: 51.453 ms/op
                 comparisons: 2179960.000 #
                 stableSort:  1.000 #

Iteration   2: 51.533 ms/op
                 comparisons: 2179960.000 #
                 stableSort:  1.000 #

Iteration   3: 51.968 ms/op
                 comparisons: 2179960.000 #
                 stableSort:  1.000 #

Iteration   4: 53.068 ms/op
                 comparisons: 2179960.000 #
                 stableSort:  1.000 #

Iteration   5: 52.676 ms/op
                 comparisons: 2179960.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2":
  52.140 ±(99.9%) 2.735 ms/op [Average]
  (min, avg, max) = (51.453, 52.140, 53.068), stdev = 0.710
  CI (99.9%): [49.404, 54.875] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:comparisons":
  10899800.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (2179960.000, 2179960.000, 2179960.000), stdev = 0.001
  CI (99.9%): [10899800.000, 10899800.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000000)

# Run progress: 73.96% complete, ETA 00:10:17
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 280.908 ms/op
# Warmup Iteration   2: 269.911 ms/op
Iteration   1: 270.543 ms/op
                 comparisons: 11712937.000 #
                 stableSort:  1.000 #

Iteration   2: 273.283 ms/op
                 comparisons: 11712937.000 #
                 stableSort:  1.000 #

Iteration   3: 272.904 ms/op
                 comparisons: 11712937.000 #
                 stableSort:  1.000 #

Iteration   4: 272.861 ms/op
                 comparisons: 11712937.000 #
                 stableSort:  1.000 #

Iteration   5: 272.509 ms/op
                 comparisons: 11712937.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2":
  272.420 ±(99.9%) 4.177 ms/op [Average]
  (min, avg, max) = (270.543, 272.420, 273.283), stdev = 1.085
  CI (99.9%): [268.243, 276.597] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:comparisons":
  58564685.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (11712937.000, 11712937.000, 11712937.000), stdev = 0.001
  CI (99.9%): [58564685.000, 58564685.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.topnHeap2:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000)

# Run progress: 75.00% complete, ETA 00:09:55
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 5.650 ms/op
# Warmup Iteration   2: 4.171 ms/op
Iteration   1: 4.162 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   2: 4.103 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   3: 4.089 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   4: 4.069 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   5: 4.168 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap":
  4.118 ±(99.9%) 0.171 ms/op [Average]
  (min, avg, max) = (4.069, 4.118, 4.168), stdev = 0.044
  CI (99.9%): [3.947, 4.289] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:comparisons":
  929830.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (185966.000, 185966.000, 185966.000), stdev = 0.001
  CI (99.9%): [929830.000, 929830.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 1000000)

# Run progress: 76.04% complete, ETA 00:09:25
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 1429.190 ms/op
# Warmup Iteration   2: 1377.339 ms/op
Iteration   1: 1300.260 ms/op
                 comparisons: 29704383.000 #
                 stableSort:  1.000 #

Iteration   2: 1272.091 ms/op
                 comparisons: 29704383.000 #
                 stableSort:  1.000 #

Iteration   3: 1299.916 ms/op
                 comparisons: 29704383.000 #
                 stableSort:  1.000 #

Iteration   4: 1299.296 ms/op
                 comparisons: 29704383.000 #
                 stableSort:  1.000 #

Iteration   5: 1533.909 ms/op
                 comparisons: 29704383.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap":
  1341.094 ±(99.9%) 417.618 ms/op [Average]
  (min, avg, max) = (1272.091, 1341.094, 1533.909), stdev = 108.454
  CI (99.9%): [923.477, 1758.712] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:comparisons":
  148521915.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (29704383.000, 29704383.000, 29704383.000), stdev = 0.001
  CI (99.9%): [148521915.000, 148521915.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000000)

# Run progress: 77.08% complete, ETA 00:08:56
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 31269.381 ms/op
# Warmup Iteration   2: 19641.838 ms/op
Iteration   1: 22433.014 ms/op
                 comparisons: 351674557.000 #
                 stableSort:  1.000 #

Iteration   2: 20209.870 ms/op
                 comparisons: 351674557.000 #
                 stableSort:  1.000 #

Iteration   3: 22184.200 ms/op
                 comparisons: 351674557.000 #
                 stableSort:  1.000 #

Iteration   4: 19780.217 ms/op
                 comparisons: 351674557.000 #
                 stableSort:  1.000 #

Iteration   5: 22271.679 ms/op
                 comparisons: 351674557.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap":
  21375.796 ±(99.9%) 4900.726 ms/op [Average]
  (min, avg, max) = (19780.217, 21375.796, 22433.014), stdev = 1272.703
  CI (99.9%): [16475.070, 26276.522] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:comparisons":
  1758372785.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (351674557.000, 351674557.000, 351674557.000), stdev = 0.001
  CI (99.9%): [1758372785.000, 1758372785.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000)

# Run progress: 78.13% complete, ETA 00:09:16
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 2.006 ms/op
# Warmup Iteration   2: 1.331 ms/op
Iteration   1: 1.215 ms/op
                 comparisons: 124922.000 #
                 stableSort:  1.000 #

Iteration   2: 1.227 ms/op
                 comparisons: 124922.000 #
                 stableSort:  1.000 #

Iteration   3: 1.219 ms/op
                 comparisons: 124922.000 #
                 stableSort:  1.000 #

Iteration   4: 1.204 ms/op
                 comparisons: 124922.000 #
                 stableSort:  1.000 #

Iteration   5: 1.209 ms/op
                 comparisons: 124922.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap":
  1.215 ±(99.9%) 0.034 ms/op [Average]
  (min, avg, max) = (1.204, 1.215, 1.227), stdev = 0.009
  CI (99.9%): [1.181, 1.249] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:comparisons":
  624610.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (124922.000, 124922.000, 124922.000), stdev = 0.001
  CI (99.9%): [624610.000, 624610.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 1000000)

# Run progress: 79.17% complete, ETA 00:08:45
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 193.943 ms/op
# Warmup Iteration   2: 112.369 ms/op
Iteration   1: 111.866 ms/op
                 comparisons: 12515216.000 #
                 stableSort:  1.000 #

Iteration   2: 110.378 ms/op
                 comparisons: 12515216.000 #
                 stableSort:  1.000 #

Iteration   3: 109.235 ms/op
                 comparisons: 12515216.000 #
                 stableSort:  1.000 #

Iteration   4: 107.639 ms/op
                 comparisons: 12515216.000 #
                 stableSort:  1.000 #

Iteration   5: 107.572 ms/op
                 comparisons: 12515216.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap":
  109.338 ±(99.9%) 7.072 ms/op [Average]
  (min, avg, max) = (107.572, 109.338, 111.866), stdev = 1.836
  CI (99.9%): [102.266, 116.409] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:comparisons":
  62576080.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (12515216.000, 12515216.000, 12515216.000), stdev = 0.001
  CI (99.9%): [62576080.000, 62576080.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000000)

# Run progress: 80.21% complete, ETA 00:08:14
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 2756.768 ms/op
# Warmup Iteration   2: 1468.039 ms/op
Iteration   1: 1135.750 ms/op
                 comparisons: 123633373.000 #
                 stableSort:  1.000 #

Iteration   2: 1203.660 ms/op
                 comparisons: 123633373.000 #
                 stableSort:  1.000 #

Iteration   3: 1113.253 ms/op
                 comparisons: 123633373.000 #
                 stableSort:  1.000 #

Iteration   4: 1111.061 ms/op
                 comparisons: 123633373.000 #
                 stableSort:  1.000 #

Iteration   5: 1108.466 ms/op
                 comparisons: 123633373.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap":
  1134.438 ±(99.9%) 154.786 ms/op [Average]
  (min, avg, max) = (1108.466, 1134.438, 1203.660), stdev = 40.197
  CI (99.9%): [979.652, 1289.224] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:comparisons":
  618166865.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (123633373.000, 123633373.000, 123633373.000), stdev = 0.001
  CI (99.9%): [618166865.000, 618166865.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000)

# Run progress: 81.25% complete, ETA 00:07:50
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 2.192 ms/op
# Warmup Iteration   2: 2.210 ms/op
Iteration   1: 2.196 ms/op
                 comparisons: 217697.000 #
                 stableSort:  1.000 #

Iteration   2: 2.191 ms/op
                 comparisons: 217697.000 #
                 stableSort:  1.000 #

Iteration   3: 2.190 ms/op
                 comparisons: 217697.000 #
                 stableSort:  1.000 #

Iteration   4: 2.183 ms/op
                 comparisons: 217697.000 #
                 stableSort:  1.000 #

Iteration   5: 2.139 ms/op
                 comparisons: 217697.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap":
  2.180 ±(99.9%) 0.088 ms/op [Average]
  (min, avg, max) = (2.139, 2.180, 2.196), stdev = 0.023
  CI (99.9%): [2.091, 2.268] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:comparisons":
  1088485.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (217697.000, 217697.000, 217697.000), stdev = 0.001
  CI (99.9%): [1088485.000, 1088485.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 1000000)

# Run progress: 82.29% complete, ETA 00:07:20
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 158.082 ms/op
# Warmup Iteration   2: 152.352 ms/op
Iteration   1: 163.003 ms/op
                 comparisons: 20782167.000 #
                 stableSort:  1.000 #

Iteration   2: 150.502 ms/op
                 comparisons: 20782167.000 #
                 stableSort:  1.000 #

Iteration   3: 148.393 ms/op
                 comparisons: 20782167.000 #
                 stableSort:  1.000 #

Iteration   4: 149.508 ms/op
                 comparisons: 20782167.000 #
                 stableSort:  1.000 #

Iteration   5: 146.341 ms/op
                 comparisons: 20782167.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap":
  151.549 ±(99.9%) 25.363 ms/op [Average]
  (min, avg, max) = (146.341, 151.549, 163.003), stdev = 6.587
  CI (99.9%): [126.187, 176.912] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:comparisons":
  103910835.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (20782167.000, 20782167.000, 20782167.000), stdev = 0.001
  CI (99.9%): [103910835.000, 103910835.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000000)

# Run progress: 83.33% complete, ETA 00:06:51
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 3172.952 ms/op
# Warmup Iteration   2: 2011.755 ms/op
Iteration   1: 1659.709 ms/op
                 comparisons: 221192809.000 #
                 stableSort:  1.000 #

Iteration   2: 1705.528 ms/op
                 comparisons: 221192809.000 #
                 stableSort:  1.000 #

Iteration   3: 1705.478 ms/op
                 comparisons: 221192809.000 #
                 stableSort:  1.000 #

Iteration   4: 1723.268 ms/op
                 comparisons: 221192809.000 #
                 stableSort:  1.000 #

Iteration   5: 1557.277 ms/op
                 comparisons: 221192809.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap":
  1670.252 ±(99.9%) 259.530 ms/op [Average]
  (min, avg, max) = (1557.277, 1670.252, 1723.268), stdev = 67.399
  CI (99.9%): [1410.722, 1929.782] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:comparisons":
  1105964045.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (221192809.000, 221192809.000, 221192809.000), stdev = 0.001
  CI (99.9%): [1105964045.000, 1105964045.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000)

# Run progress: 84.38% complete, ETA 00:06:27
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 5.624 ms/op
# Warmup Iteration   2: 4.411 ms/op
Iteration   1: 4.415 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   2: 4.380 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   3: 4.062 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   4: 4.079 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   5: 4.096 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap":
  4.206 ±(99.9%) 0.675 ms/op [Average]
  (min, avg, max) = (4.062, 4.206, 4.415), stdev = 0.175
  CI (99.9%): [3.532, 4.881] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:comparisons":
  929830.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (185966.000, 185966.000, 185966.000), stdev = 0.001
  CI (99.9%): [929830.000, 929830.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 1000000)

# Run progress: 85.42% complete, ETA 00:05:58
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 350.728 ms/op
# Warmup Iteration   2: 281.805 ms/op
Iteration   1: 280.596 ms/op
                 comparisons: 40658987.000 #
                 stableSort:  1.000 #

Iteration   2: 286.980 ms/op
                 comparisons: 40658987.000 #
                 stableSort:  1.000 #

Iteration   3: 305.579 ms/op
                 comparisons: 40658987.000 #
                 stableSort:  1.000 #

Iteration   4: 301.398 ms/op
                 comparisons: 40658987.000 #
                 stableSort:  1.000 #

Iteration   5: 302.648 ms/op
                 comparisons: 40658987.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap":
  295.440 ±(99.9%) 42.276 ms/op [Average]
  (min, avg, max) = (280.596, 295.440, 305.579), stdev = 10.979
  CI (99.9%): [253.164, 337.716] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:comparisons":
  203294935.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (40658987.000, 40658987.000, 40658987.000), stdev = 0.001
  CI (99.9%): [203294935.000, 203294935.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000000)

# Run progress: 86.46% complete, ETA 00:05:30
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 7116.456 ms/op
# Warmup Iteration   2: 3564.023 ms/op
Iteration   1: 2496.906 ms/op
                 comparisons: 406131633.000 #
                 stableSort:  1.000 #

Iteration   2: 2495.613 ms/op
                 comparisons: 406131633.000 #
                 stableSort:  1.000 #

Iteration   3: 2480.713 ms/op
                 comparisons: 406131633.000 #
                 stableSort:  1.000 #

Iteration   4: 2606.328 ms/op
                 comparisons: 406131633.000 #
                 stableSort:  1.000 #

Iteration   5: 2500.895 ms/op
                 comparisons: 406131633.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap":
  2516.091 ±(99.9%) 196.464 ms/op [Average]
  (min, avg, max) = (2480.713, 2516.091, 2606.328), stdev = 51.021
  CI (99.9%): [2319.626, 2712.555] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:comparisons":
  2030658165.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (406131633.000, 406131633.000, 406131633.000), stdev = 0.001
  CI (99.9%): [2030658165.000, 2030658165.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000)

# Run progress: 87.50% complete, ETA 00:05:08
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 6.671 ms/op
# Warmup Iteration   2: 4.911 ms/op
Iteration   1: 4.964 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   2: 4.917 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   3: 4.858 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   4: 4.817 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   5: 4.802 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2":
  4.872 ±(99.9%) 0.263 ms/op [Average]
  (min, avg, max) = (4.802, 4.872, 4.964), stdev = 0.068
  CI (99.9%): [4.609, 5.135] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:comparisons":
  929830.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (185966.000, 185966.000, 185966.000), stdev = 0.001
  CI (99.9%): [929830.000, 929830.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 1000000)

# Run progress: 88.54% complete, ETA 00:04:40
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 1430.593 ms/op
# Warmup Iteration   2: 1362.800 ms/op
Iteration   1: 1292.177 ms/op
                 comparisons: 29704383.000 #
                 stableSort:  1.000 #

Iteration   2: 1246.872 ms/op
                 comparisons: 29704383.000 #
                 stableSort:  1.000 #

Iteration   3: 1288.386 ms/op
                 comparisons: 29704383.000 #
                 stableSort:  1.000 #

Iteration   4: 1289.771 ms/op
                 comparisons: 29704383.000 #
                 stableSort:  1.000 #

Iteration   5: 1520.169 ms/op
                 comparisons: 29704383.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2":
  1327.475 ±(99.9%) 421.040 ms/op [Average]
  (min, avg, max) = (1246.872, 1327.475, 1520.169), stdev = 109.343
  CI (99.9%): [906.435, 1748.515] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:comparisons":
  148521915.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (29704383.000, 29704383.000, 29704383.000), stdev = 0.001
  CI (99.9%): [148521915.000, 148521915.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = -1, tupleNumber = 10000000)

# Run progress: 89.58% complete, ETA 00:04:13
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 21954.822 ms/op
# Warmup Iteration   2: 21051.324 ms/op
Iteration   1: 24666.078 ms/op
                 comparisons: 351674557.000 #
                 stableSort:  1.000 #

Iteration   2: 20039.199 ms/op
                 comparisons: 351674557.000 #
                 stableSort:  1.000 #

Iteration   3: 19464.623 ms/op
                 comparisons: 351674557.000 #
                 stableSort:  1.000 #

Iteration   4: 22418.613 ms/op
                 comparisons: 351674557.000 #
                 stableSort:  1.000 #

Iteration   5: 19840.305 ms/op
                 comparisons: 351674557.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2":
  21285.764 ±(99.9%) 8538.907 ms/op [Average]
  (min, avg, max) = (19464.623, 21285.764, 24666.078), stdev = 2217.527
  CI (99.9%): [12746.857, 29824.670] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:comparisons":
  1758372785.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (351674557.000, 351674557.000, 351674557.000), stdev = 0.001
  CI (99.9%): [1758372785.000, 1758372785.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000)

# Run progress: 90.63% complete, ETA 00:04:03
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 0.156 ms/op
# Warmup Iteration   2: 0.148 ms/op
Iteration   1: 0.149 ms/op
                 comparisons: 10904.000 #
                 stableSort:  1.000 #

Iteration   2: 0.147 ms/op
                 comparisons: 10904.000 #
                 stableSort:  1.000 #

Iteration   3: 0.148 ms/op
                 comparisons: 10904.000 #
                 stableSort:  1.000 #

Iteration   4: 0.148 ms/op
                 comparisons: 10904.000 #
                 stableSort:  1.000 #

Iteration   5: 0.147 ms/op
                 comparisons: 10904.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2":
  0.148 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.147, 0.148, 0.149), stdev = 0.001
  CI (99.9%): [0.144, 0.152] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:comparisons":
  54520.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10904.000, 10904.000, 10904.000), stdev = 0.001
  CI (99.9%): [54520.000, 54520.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 1000000)

# Run progress: 91.67% complete, ETA 00:03:34
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 19.323 ms/op
# Warmup Iteration   2: 18.271 ms/op
Iteration   1: 18.133 ms/op
                 comparisons: 1001536.000 #
                 stableSort:  1.000 #

Iteration   2: 18.064 ms/op
                 comparisons: 1001536.000 #
                 stableSort:  1.000 #

Iteration   3: 19.408 ms/op
                 comparisons: 1001536.000 #
                 stableSort:  1.000 #

Iteration   4: 18.048 ms/op
                 comparisons: 1001536.000 #
                 stableSort:  1.000 #

Iteration   5: 17.994 ms/op
                 comparisons: 1001536.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2":
  18.329 ±(99.9%) 2.330 ms/op [Average]
  (min, avg, max) = (17.994, 18.329, 19.408), stdev = 0.605
  CI (99.9%): [15.999, 20.659] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:comparisons":
  5007680.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1001536.000, 1001536.000, 1001536.000), stdev = 0.001
  CI (99.9%): [5007680.000, 5007680.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10, tupleNumber = 10000000)

# Run progress: 92.71% complete, ETA 00:03:06
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 196.202 ms/op
# Warmup Iteration   2: 190.733 ms/op
Iteration   1: 190.696 ms/op
                 comparisons: 10001743.000 #
                 stableSort:  1.000 #

Iteration   2: 191.348 ms/op
                 comparisons: 10001743.000 #
                 stableSort:  1.000 #

Iteration   3: 190.754 ms/op
                 comparisons: 10001743.000 #
                 stableSort:  1.000 #

Iteration   4: 190.436 ms/op
                 comparisons: 10001743.000 #
                 stableSort:  1.000 #

Iteration   5: 190.221 ms/op
                 comparisons: 10001743.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2":
  190.691 ±(99.9%) 1.635 ms/op [Average]
  (min, avg, max) = (190.221, 190.691, 191.348), stdev = 0.425
  CI (99.9%): [189.056, 192.326] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:comparisons":
  50008715.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10001743.000, 10001743.000, 10001743.000), stdev = 0.001
  CI (99.9%): [50008715.000, 50008715.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000)

# Run progress: 93.75% complete, ETA 00:02:40
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 0.428 ms/op
# Warmup Iteration   2: 0.330 ms/op
Iteration   1: 0.330 ms/op
                 comparisons: 21234.000 #
                 stableSort:  1.000 #

Iteration   2: 0.332 ms/op
                 comparisons: 21234.000 #
                 stableSort:  1.000 #

Iteration   3: 0.363 ms/op
                 comparisons: 21234.000 #
                 stableSort:  1.000 #

Iteration   4: 0.356 ms/op
                 comparisons: 21234.000 #
                 stableSort:  1.000 #

Iteration   5: 0.329 ms/op
                 comparisons: 21234.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2":
  0.342 ±(99.9%) 0.062 ms/op [Average]
  (min, avg, max) = (0.329, 0.342, 0.363), stdev = 0.016
  CI (99.9%): [0.280, 0.404] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:comparisons":
  106170.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (21234.000, 21234.000, 21234.000), stdev = 0.001
  CI (99.9%): [106170.000, 106170.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 1000000)

# Run progress: 94.79% complete, ETA 00:02:12
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 22.484 ms/op
# Warmup Iteration   2: 21.010 ms/op
Iteration   1: 20.858 ms/op
                 comparisons: 1022264.000 #
                 stableSort:  1.000 #

Iteration   2: 20.784 ms/op
                 comparisons: 1022264.000 #
                 stableSort:  1.000 #

Iteration   3: 20.881 ms/op
                 comparisons: 1022264.000 #
                 stableSort:  1.000 #

Iteration   4: 21.050 ms/op
                 comparisons: 1022264.000 #
                 stableSort:  1.000 #

Iteration   5: 20.928 ms/op
                 comparisons: 1022264.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2":
  20.900 ±(99.9%) 0.380 ms/op [Average]
  (min, avg, max) = (20.784, 20.900, 21.050), stdev = 0.099
  CI (99.9%): [20.520, 21.281] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:comparisons":
  5111320.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1022264.000, 1022264.000, 1022264.000), stdev = 0.001
  CI (99.9%): [5111320.000, 5111320.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 100, tupleNumber = 10000000)

# Run progress: 95.83% complete, ETA 00:01:45
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 232.867 ms/op
# Warmup Iteration   2: 222.466 ms/op
Iteration   1: 223.016 ms/op
                 comparisons: 10029007.000 #
                 stableSort:  1.000 #

Iteration   2: 223.748 ms/op
                 comparisons: 10029007.000 #
                 stableSort:  1.000 #

Iteration   3: 223.074 ms/op
                 comparisons: 10029007.000 #
                 stableSort:  1.000 #

Iteration   4: 222.630 ms/op
                 comparisons: 10029007.000 #
                 stableSort:  1.000 #

Iteration   5: 222.209 ms/op
                 comparisons: 10029007.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2":
  222.935 ±(99.9%) 2.201 ms/op [Average]
  (min, avg, max) = (222.209, 222.935, 223.748), stdev = 0.572
  CI (99.9%): [220.735, 225.136] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:comparisons":
  50145035.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (10029007.000, 10029007.000, 10029007.000), stdev = 0.001
  CI (99.9%): [50145035.000, 50145035.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000)

# Run progress: 96.88% complete, ETA 00:01:19
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 5.584 ms/op
# Warmup Iteration   2: 4.132 ms/op
Iteration   1: 4.098 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   2: 4.051 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   3: 4.070 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   4: 4.061 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #

Iteration   5: 4.040 ms/op
                 comparisons: 185966.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2":
  4.064 ±(99.9%) 0.085 ms/op [Average]
  (min, avg, max) = (4.040, 4.064, 4.098), stdev = 0.022
  CI (99.9%): [3.979, 4.149] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:comparisons":
  929830.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (185966.000, 185966.000, 185966.000), stdev = 0.001
  CI (99.9%): [929830.000, 929830.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 1000000)

# Run progress: 97.92% complete, ETA 00:00:52
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 68.137 ms/op
# Warmup Iteration   2: 65.240 ms/op
Iteration   1: 64.374 ms/op
                 comparisons: 3222200.000 #
                 stableSort:  1.000 #

Iteration   2: 64.703 ms/op
                 comparisons: 3222200.000 #
                 stableSort:  1.000 #

Iteration   3: 63.792 ms/op
                 comparisons: 3222200.000 #
                 stableSort:  1.000 #

Iteration   4: 64.467 ms/op
                 comparisons: 3222200.000 #
                 stableSort:  1.000 #

Iteration   5: 63.768 ms/op
                 comparisons: 3222200.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2":
  64.221 ±(99.9%) 1.617 ms/op [Average]
  (min, avg, max) = (63.768, 64.221, 64.703), stdev = 0.420
  CI (99.9%): [62.603, 65.838] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:comparisons":
  16111000.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (3222200.000, 3222200.000, 3222200.000), stdev = 0.001
  CI (99.9%): [16111000.000, 16111000.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.22
# VM version: JDK 1.8.0_241, Java HotSpot(TM) 64-Bit Server VM, 25.241-b07
# VM invoker: /home/tre/JTools/jdk/java-8-oracle-1.8.0.241/jre/bin/java
# VM options: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 1 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2
# Parameters: (fieldType = INT, fieldsNumber = 2, limit = 10000, tupleNumber = 10000000)

# Run progress: 98.96% complete, ETA 00:00:25
# Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre -Dpvr.debug=true -Debx.properties=../_ebx-eclipse/ebx.properties.tre 
# Warmup Iteration   1: 388.116 ms/op
# Warmup Iteration   2: 335.627 ms/op
Iteration   1: 332.660 ms/op
                 comparisons: 13298182.000 #
                 stableSort:  1.000 #

Iteration   2: 339.912 ms/op
                 comparisons: 13298182.000 #
                 stableSort:  1.000 #

Iteration   3: 621.275 ms/op
                 comparisons: 13298182.000 #
                 stableSort:  1.000 #

Iteration   4: 334.451 ms/op
                 comparisons: 13298182.000 #
                 stableSort:  1.000 #

Iteration   5: 334.080 ms/op
                 comparisons: 13298182.000 #
                 stableSort:  1.000 #



Result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2":
  392.476 ±(99.9%) 492.622 ms/op [Average]
  (min, avg, max) = (332.660, 392.476, 621.275), stdev = 127.932
  CI (99.9%): [≈ 0, 885.098] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:comparisons":
  66490910.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (13298182.000, 13298182.000, 13298182.000), stdev = 0.001
  CI (99.9%): [66490910.000, 66490910.000] (assumes normal distribution)

Secondary result "com.github.zabetak.benchmark.PartialSortBenchmark.treeMap2:stableSort":
  5.000 ±(99.9%) 0.001 # [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# Run complete. Total time: 00:41:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (fieldType)  (fieldsNumber)  (limit)  (tupleNumber)  Mode  Cnt           Score      Error  Units
PartialSortBenchmark.collectionSort                      INT               2       -1          10000  avgt    5           2.677 ±    0.050  ms/op
PartialSortBenchmark.limitSort                           INT               2       -1          10000  avgt    5           3.217 ±    0.026  ms/op
PartialSortBenchmark.priorityQueue                       INT               2       -1          10000  avgt    5           3.240 ±    0.118  ms/op
PartialSortBenchmark.treeMap                             INT               2       -1          10000  avgt    5           4.118 ±    0.171  ms/op
PartialSortBenchmark.topnHeap2                           INT               2       -1          10000  avgt    5           4.248 ±    0.071  ms/op
PartialSortBenchmark.treeMap2                            INT               2       -1          10000  avgt    5           4.872 ±    0.263  ms/op
PartialSortBenchmark.collectionSort:stableSort           INT               2       -1          10000  avgt    5           5.000                 #
PartialSortBenchmark.limitSort:stableSort                INT               2       -1          10000  avgt    5           5.000                 #
PartialSortBenchmark.priorityQueue:stableSort            INT               2       -1          10000  avgt    5           5.000                 #
PartialSortBenchmark.topnHeap2:stableSort                INT               2       -1          10000  avgt    5           5.000                 #
PartialSortBenchmark.topnHeap:stableSort                 INT               2       -1          10000  avgt    5           5.000                 #
PartialSortBenchmark.treeMap2:stableSort                 INT               2       -1          10000  avgt    5           5.000                 #
PartialSortBenchmark.treeMap:stableSort                  INT               2       -1          10000  avgt    5           5.000                 #
PartialSortBenchmark.topnHeap                            INT               2       -1          10000  avgt    5           5.765 ±    0.144  ms/op
PartialSortBenchmark.collectionSort:comparisons          INT               2       -1          10000  avgt    5      602180.000                 #
PartialSortBenchmark.limitSort:comparisons               INT               2       -1          10000  avgt    5      602180.000                 #
PartialSortBenchmark.topnHeap2:comparisons               INT               2       -1          10000  avgt    5      637900.000                 #
PartialSortBenchmark.priorityQueue:comparisons           INT               2       -1          10000  avgt    5      688805.000                 #
PartialSortBenchmark.treeMap2:comparisons                INT               2       -1          10000  avgt    5      929830.000                 #
PartialSortBenchmark.treeMap:comparisons                 INT               2       -1          10000  avgt    5      929830.000                 #
PartialSortBenchmark.topnHeap:comparisons                INT               2       -1          10000  avgt    5     1199355.000                 #

PartialSortBenchmark.priorityQueue:stableSort            INT               2       10          10000  avgt    5             ≈ 0                 #
PartialSortBenchmark.topnHeap2                           INT               2       10          10000  avgt    5           0.117 ±    0.001  ms/op
PartialSortBenchmark.topnHeap                            INT               2       10          10000  avgt    5           0.120 ±    0.001  ms/op
PartialSortBenchmark.array                               INT               2       10          10000  avgt    5           0.125 ±    0.002  ms/op
PartialSortBenchmark.priorityQueue                       INT               2       10          10000  avgt    5           0.130 ±    0.001  ms/op
PartialSortBenchmark.limitSort                           INT               2       10          10000  avgt    5           0.134 ±    0.006  ms/op
PartialSortBenchmark.treeMap2                            INT               2       10          10000  avgt    5           0.148 ±    0.004  ms/op
PartialSortBenchmark.treeMap                             INT               2       10          10000  avgt    5           1.215 ±    0.034  ms/op
PartialSortBenchmark.array:stableSort                    INT               2       10          10000  avgt    5           5.000                 #
PartialSortBenchmark.limitSort:stableSort                INT               2       10          10000  avgt    5           5.000                 #
PartialSortBenchmark.topnHeap2:stableSort                INT               2       10          10000  avgt    5           5.000                 #
PartialSortBenchmark.topnHeap:stableSort                 INT               2       10          10000  avgt    5           5.000                 #
PartialSortBenchmark.treeMap2:stableSort                 INT               2       10          10000  avgt    5           5.000                 #
PartialSortBenchmark.treeMap:stableSort                  INT               2       10          10000  avgt    5           5.000                 #
PartialSortBenchmark.array:comparisons                   INT               2       10          10000  avgt    5       51295.000                 #
PartialSortBenchmark.limitSort:comparisons               INT               2       10          10000  avgt    5       51335.000                 #
PartialSortBenchmark.topnHeap2:comparisons               INT               2       10          10000  avgt    5       51450.000                 #
PartialSortBenchmark.topnHeap:comparisons                INT               2       10          10000  avgt    5       51740.000                 #
PartialSortBenchmark.priorityQueue:comparisons           INT               2       10          10000  avgt    5       52365.000                 #
PartialSortBenchmark.treeMap2:comparisons                INT               2       10          10000  avgt    5       54520.000                 #
PartialSortBenchmark.treeMap:comparisons                 INT               2       10          10000  avgt    5      624610.000                 #

PartialSortBenchmark.limitSort:stableSort                INT               2      100          10000  avgt    5             ≈ 0                 #
PartialSortBenchmark.priorityQueue:stableSort            INT               2      100          10000  avgt    5             ≈ 0                 #
PartialSortBenchmark.array                               INT               2      100          10000  avgt    5           0.210 ±    0.001  ms/op
PartialSortBenchmark.limitSort                           INT               2      100          10000  avgt    5           0.225 ±    0.030  ms/op
PartialSortBenchmark.priorityQueue                       INT               2      100          10000  avgt    5           0.242 ±    0.033  ms/op
PartialSortBenchmark.topnHeap2                           INT               2      100          10000  avgt    5           0.248 ±    0.001  ms/op
PartialSortBenchmark.topnHeap                            INT               2      100          10000  avgt    5           0.254 ±    0.002  ms/op
PartialSortBenchmark.treeMap2                            INT               2      100          10000  avgt    5           0.342 ±    0.062  ms/op
PartialSortBenchmark.treeMap                             INT               2      100          10000  avgt    5           2.180 ±    0.088  ms/op
PartialSortBenchmark.array:stableSort                    INT               2      100          10000  avgt    5           5.000                 #
PartialSortBenchmark.topnHeap2:stableSort                INT               2      100          10000  avgt    5           5.000                 #
PartialSortBenchmark.topnHeap:stableSort                 INT               2      100          10000  avgt    5           5.000                 #
PartialSortBenchmark.treeMap2:stableSort                 INT               2      100          10000  avgt    5           5.000                 #
PartialSortBenchmark.treeMap:stableSort                  INT               2      100          10000  avgt    5           5.000                 #
PartialSortBenchmark.array:comparisons                   INT               2      100          10000  avgt    5       67825.000                 #
PartialSortBenchmark.limitSort:comparisons               INT               2      100          10000  avgt    5       67855.000                 #
PartialSortBenchmark.topnHeap2:comparisons               INT               2      100          10000  avgt    5       75675.000                 #
PartialSortBenchmark.topnHeap:comparisons                INT               2      100          10000  avgt    5       79230.000                 #
PartialSortBenchmark.priorityQueue:comparisons           INT               2      100          10000  avgt    5       82725.000                 #
PartialSortBenchmark.treeMap2:comparisons                INT               2      100          10000  avgt    5      106170.000                 #
PartialSortBenchmark.treeMap:comparisons                 INT               2      100          10000  avgt    5     1088485.000                 #

PartialSortBenchmark.collectionSort                      INT               2    10000          10000  avgt    5           2.696 ±    0.069  ms/op
PartialSortBenchmark.limitSort                           INT               2    10000          10000  avgt    5           2.926 ±    0.033  ms/op
PartialSortBenchmark.priorityQueue                       INT               2    10000          10000  avgt    5           3.269 ±    0.475  ms/op
PartialSortBenchmark.treeMap2                            INT               2    10000          10000  avgt    5           4.064 ±    0.085  ms/op
PartialSortBenchmark.treeMap                             INT               2    10000          10000  avgt    5           4.206 ±    0.675  ms/op
PartialSortBenchmark.topnHeap2                           INT               2    10000          10000  avgt    5           4.694 ±    0.103  ms/op
PartialSortBenchmark.array:stableSort                    INT               2    10000          10000  avgt    5           5.000                 #
PartialSortBenchmark.collectionSort:stableSort           INT               2    10000          10000  avgt    5           5.000                 #
PartialSortBenchmark.limitSort:stableSort                INT               2    10000          10000  avgt    5           5.000                 #
PartialSortBenchmark.priorityQueue:stableSort            INT               2    10000          10000  avgt    5           5.000                 #
PartialSortBenchmark.topnHeap2:stableSort                INT               2    10000          10000  avgt    5           5.000                 #
PartialSortBenchmark.topnHeap:stableSort                 INT               2    10000          10000  avgt    5           5.000                 #
PartialSortBenchmark.treeMap2:stableSort                 INT               2    10000          10000  avgt    5           5.000                 #
PartialSortBenchmark.treeMap:stableSort                  INT               2    10000          10000  avgt    5           5.000                 #
PartialSortBenchmark.array                               INT               2    10000          10000  avgt    5           5.374 ±    0.183  ms/op
PartialSortBenchmark.topnHeap                            INT               2    10000          10000  avgt    5           6.218 ±    0.093  ms/op
PartialSortBenchmark.array:comparisons                   INT               2    10000          10000  avgt    5      595065.000                 #
PartialSortBenchmark.collectionSort:comparisons          INT               2    10000          10000  avgt    5      602180.000                 #
PartialSortBenchmark.limitSort:comparisons               INT               2    10000          10000  avgt    5      602180.000                 #
PartialSortBenchmark.topnHeap2:comparisons               INT               2    10000          10000  avgt    5      637900.000                 #
PartialSortBenchmark.priorityQueue:comparisons           INT               2    10000          10000  avgt    5      688805.000                 #
PartialSortBenchmark.treeMap2:comparisons                INT               2    10000          10000  avgt    5      929830.000                 #
PartialSortBenchmark.treeMap:comparisons                 INT               2    10000          10000  avgt    5      929830.000                 #
PartialSortBenchmark.topnHeap:comparisons                INT               2    10000          10000  avgt    5     1199355.000                 #

PartialSortBenchmark.collectionSort:stableSort           INT               2       -1        1000000  avgt    5           5.000                 #
PartialSortBenchmark.limitSort:stableSort                INT               2       -1        1000000  avgt    5           5.000                 #
PartialSortBenchmark.priorityQueue:stableSort            INT               2       -1        1000000  avgt    5           5.000                 #
PartialSortBenchmark.topnHeap2:stableSort                INT               2       -1        1000000  avgt    5           5.000                 #
PartialSortBenchmark.topnHeap:stableSort                 INT               2       -1        1000000  avgt    5           5.000                 #
PartialSortBenchmark.treeMap2:stableSort                 INT               2       -1        1000000  avgt    5           5.000                 #
PartialSortBenchmark.treeMap:stableSort                  INT               2       -1        1000000  avgt    5           5.000                 #
PartialSortBenchmark.collectionSort                      INT               2       -1        1000000  avgt    5         675.715 ±    8.140  ms/op
PartialSortBenchmark.limitSort                           INT               2       -1        1000000  avgt    5         695.830 ±   24.271  ms/op
PartialSortBenchmark.priorityQueue                       INT               2       -1        1000000  avgt    5         807.479 ±   44.496  ms/op
PartialSortBenchmark.topnHeap2                           INT               2       -1        1000000  avgt    5        1298.834 ±   48.269  ms/op
PartialSortBenchmark.treeMap2                            INT               2       -1        1000000  avgt    5        1327.475 ±  421.040  ms/op
PartialSortBenchmark.treeMap                             INT               2       -1        1000000  avgt    5        1341.094 ±  417.618  ms/op
PartialSortBenchmark.topnHeap                            INT               2       -1        1000000  avgt    5        1610.751 ±   27.138  ms/op
PartialSortBenchmark.collectionSort:comparisons          INT               2       -1        1000000  avgt    5    93203005.000                 #
PartialSortBenchmark.limitSort:comparisons               INT               2       -1        1000000  avgt    5    93203005.000                 #
PartialSortBenchmark.topnHeap2:comparisons               INT               2       -1        1000000  avgt    5    96573025.000                 #
PartialSortBenchmark.priorityQueue:comparisons           INT               2       -1        1000000  avgt    5   101762120.000                 #
PartialSortBenchmark.treeMap2:comparisons                INT               2       -1        1000000  avgt    5   148521915.000                 #
PartialSortBenchmark.treeMap:comparisons                 INT               2       -1        1000000  avgt    5   148521915.000                 #
PartialSortBenchmark.topnHeap:comparisons                INT               2       -1        1000000  avgt    5   185962865.000                 #

PartialSortBenchmark.limitSort:stableSort                INT               2       10        1000000  avgt    5             ≈ 0                 #
PartialSortBenchmark.array:stableSort                    INT               2       10        1000000  avgt    5           5.000                 #
PartialSortBenchmark.priorityQueue:stableSort            INT               2       10        1000000  avgt    5           5.000                 #
PartialSortBenchmark.topnHeap2:stableSort                INT               2       10        1000000  avgt    5           5.000                 #
PartialSortBenchmark.topnHeap:stableSort                 INT               2       10        1000000  avgt    5           5.000                 #
PartialSortBenchmark.treeMap2:stableSort                 INT               2       10        1000000  avgt    5           5.000                 #
PartialSortBenchmark.treeMap:stableSort                  INT               2       10        1000000  avgt    5           5.000                 #
PartialSortBenchmark.treeMap2                            INT               2       10        1000000  avgt    5          18.329 ±    2.330  ms/op
PartialSortBenchmark.topnHeap2                           INT               2       10        1000000  avgt    5          18.891 ±    0.111  ms/op
PartialSortBenchmark.limitSort                           INT               2       10        1000000  avgt    5          19.120 ±    0.192  ms/op
PartialSortBenchmark.array                               INT               2       10        1000000  avgt    5          19.129 ±    0.213  ms/op
PartialSortBenchmark.priorityQueue                       INT               2       10        1000000  avgt    5          19.382 ±    0.239  ms/op
PartialSortBenchmark.topnHeap                            INT               2       10        1000000  avgt    5          19.719 ±    0.102  ms/op
PartialSortBenchmark.treeMap                             INT               2       10        1000000  avgt    5         109.338 ±    7.072  ms/op
PartialSortBenchmark.array:comparisons                   INT               2       10        1000000  avgt    5     5002160.000                 #
PartialSortBenchmark.limitSort:comparisons               INT               2       10        1000000  avgt    5     5002195.000                 #
PartialSortBenchmark.topnHeap2:comparisons               INT               2       10        1000000  avgt    5     5002440.000                 #
PartialSortBenchmark.topnHeap:comparisons                INT               2       10        1000000  avgt    5     5002815.000                 #
PartialSortBenchmark.priorityQueue:comparisons           INT               2       10        1000000  avgt    5     5003950.000                 #
PartialSortBenchmark.treeMap2:comparisons                INT               2       10        1000000  avgt    5     5007680.000                 #
PartialSortBenchmark.treeMap:comparisons                 INT               2       10        1000000  avgt    5    62576080.000                 #

PartialSortBenchmark.priorityQueue:stableSort            INT               2      100        1000000  avgt    5             ≈ 0                 #
PartialSortBenchmark.array:stableSort                    INT               2      100        1000000  avgt    5           5.000                 #
PartialSortBenchmark.limitSort:stableSort                INT               2      100        1000000  avgt    5           5.000                 #
PartialSortBenchmark.topnHeap2:stableSort                INT               2      100        1000000  avgt    5           5.000                 #
PartialSortBenchmark.topnHeap:stableSort                 INT               2      100        1000000  avgt    5           5.000                 #
PartialSortBenchmark.treeMap2:stableSort                 INT               2      100        1000000  avgt    5           5.000                 #
PartialSortBenchmark.treeMap:stableSort                  INT               2      100        1000000  avgt    5           5.000                 #
PartialSortBenchmark.limitSort                           INT               2      100        1000000  avgt    5          17.494 ±    0.312  ms/op
PartialSortBenchmark.priorityQueue                       INT               2      100        1000000  avgt    5          18.101 ±    0.504  ms/op
PartialSortBenchmark.topnHeap2                           INT               2      100        1000000  avgt    5          18.230 ±    0.178  ms/op
PartialSortBenchmark.topnHeap                            INT               2      100        1000000  avgt    5          18.667 ±    0.115  ms/op
PartialSortBenchmark.array                               INT               2      100        1000000  avgt    5          18.987 ±    0.192  ms/op
PartialSortBenchmark.treeMap2                            INT               2      100        1000000  avgt    5          20.900 ±    0.380  ms/op
PartialSortBenchmark.treeMap                             INT               2      100        1000000  avgt    5         151.549 ±   25.363  ms/op
PartialSortBenchmark.array:comparisons                   INT               2      100        1000000  avgt    5     5033020.000                 #
PartialSortBenchmark.limitSort:comparisons               INT               2      100        1000000  avgt    5     5033400.000                 #
PartialSortBenchmark.topnHeap2:comparisons               INT               2      100        1000000  avgt    5     5048815.000                 #
PartialSortBenchmark.topnHeap:comparisons                INT               2      100        1000000  avgt    5     5053500.000                 #
PartialSortBenchmark.priorityQueue:comparisons           INT               2      100        1000000  avgt    5     5061570.000                 #
PartialSortBenchmark.treeMap2:comparisons                INT               2      100        1000000  avgt    5     5111320.000                 #
PartialSortBenchmark.treeMap:comparisons                 INT               2      100        1000000  avgt    5   103910835.000                 #

PartialSortBenchmark.limitSort:stableSort                INT               2    10000        1000000  avgt    5             ≈ 0                 #
PartialSortBenchmark.priorityQueue:stableSort            INT               2    10000        1000000  avgt    5             ≈ 0                 #
PartialSortBenchmark.array:stableSort                    INT               2    10000        1000000  avgt    5           5.000                 #
PartialSortBenchmark.topnHeap2:stableSort                INT               2    10000        1000000  avgt    5           5.000                 #
PartialSortBenchmark.topnHeap:stableSort                 INT               2    10000        1000000  avgt    5           5.000                 #
PartialSortBenchmark.treeMap2:stableSort                 INT               2    10000        1000000  avgt    5           5.000                 #
PartialSortBenchmark.treeMap:stableSort                  INT               2    10000        1000000  avgt    5           5.000                 #
PartialSortBenchmark.limitSort                           INT               2    10000        1000000  avgt    5          44.511 ±    0.960  ms/op
PartialSortBenchmark.topnHeap                            INT               2    10000        1000000  avgt    5          48.821 ±    2.605  ms/op
PartialSortBenchmark.priorityQueue                       INT               2    10000        1000000  avgt    5          51.985 ±    0.380  ms/op
PartialSortBenchmark.topnHeap2                           INT               2    10000        1000000  avgt    5          52.140 ±    2.735  ms/op
PartialSortBenchmark.treeMap2                            INT               2    10000        1000000  avgt    5          64.221 ±    1.617  ms/op
PartialSortBenchmark.array                               INT               2    10000        1000000  avgt    5          65.285 ±    1.108  ms/op
PartialSortBenchmark.treeMap                             INT               2    10000        1000000  avgt    5         295.440 ±   42.276  ms/op
PartialSortBenchmark.array:comparisons                   INT               2    10000        1000000  avgt    5     8600800.000                 #
PartialSortBenchmark.limitSort:comparisons               INT               2    10000        1000000  avgt    5     8607905.000                 #
PartialSortBenchmark.topnHeap2:comparisons               INT               2    10000        1000000  avgt    5    10899800.000                 #
PartialSortBenchmark.priorityQueue:comparisons           INT               2    10000        1000000  avgt    5    11403415.000                 #
PartialSortBenchmark.topnHeap:comparisons                INT               2    10000        1000000  avgt    5    11576500.000                 #
PartialSortBenchmark.treeMap2:comparisons                INT               2    10000        1000000  avgt    5    16111000.000                 #
PartialSortBenchmark.treeMap:comparisons                 INT               2    10000        1000000  avgt    5   203294935.000                 #

PartialSortBenchmark.collectionSort:stableSort           INT               2       -1       10000000  avgt    5           5.000                 #
PartialSortBenchmark.limitSort:stableSort                INT               2       -1       10000000  avgt    5           5.000                 #
PartialSortBenchmark.priorityQueue:stableSort            INT               2       -1       10000000  avgt    5           5.000                 #
PartialSortBenchmark.topnHeap2:stableSort                INT               2       -1       10000000  avgt    5           5.000                 #
PartialSortBenchmark.topnHeap:stableSort                 INT               2       -1       10000000  avgt    5           5.000                 #
PartialSortBenchmark.treeMap2:stableSort                 INT               2       -1       10000000  avgt    5           5.000                 #
PartialSortBenchmark.treeMap:stableSort                  INT               2       -1       10000000  avgt    5           5.000                 #
PartialSortBenchmark.limitSort                           INT               2       -1       10000000  avgt    5       12227.528 ±  688.756  ms/op
PartialSortBenchmark.priorityQueue                       INT               2       -1       10000000  avgt    5       13687.224 ±  490.889  ms/op
PartialSortBenchmark.collectionSort                      INT               2       -1       10000000  avgt    5       14991.689 ±  582.505  ms/op
PartialSortBenchmark.treeMap2                            INT               2       -1       10000000  avgt    5       21285.764 ± 8538.907  ms/op
PartialSortBenchmark.treeMap                             INT               2       -1       10000000  avgt    5       21375.796 ± 4900.726  ms/op
PartialSortBenchmark.topnHeap2                           INT               2       -1       10000000  avgt    5       24773.560 ±  586.835  ms/op
PartialSortBenchmark.topnHeap                            INT               2       -1       10000000  avgt    5       33493.891 ± 1268.295  ms/op
PartialSortBenchmark.collectionSort:comparisons          INT               2       -1       10000000  avgt    5  1101232840.000                 #
PartialSortBenchmark.limitSort:comparisons               INT               2       -1       10000000  avgt    5  1101232840.000                 #
PartialSortBenchmark.topnHeap2:comparisons               INT               2       -1       10000000  avgt    5  1134330855.000                 #
PartialSortBenchmark.priorityQueue:comparisons           INT               2       -1       10000000  avgt    5  1188369640.000                 #
PartialSortBenchmark.treeMap2:comparisons                INT               2       -1       10000000  avgt    5  1758372785.000                 #
PartialSortBenchmark.treeMap:comparisons                 INT               2       -1       10000000  avgt    5  1758372785.000                 #
PartialSortBenchmark.topnHeap:comparisons                INT               2       -1       10000000  avgt    5  2193292415.000                 #

PartialSortBenchmark.array:stableSort                    INT               2       10       10000000  avgt    5           5.000                 #
PartialSortBenchmark.limitSort:stableSort                INT               2       10       10000000  avgt    5           5.000                 #
PartialSortBenchmark.priorityQueue:stableSort            INT               2       10       10000000  avgt    5           5.000                 #
PartialSortBenchmark.topnHeap2:stableSort                INT               2       10       10000000  avgt    5           5.000                 #
PartialSortBenchmark.topnHeap:stableSort                 INT               2       10       10000000  avgt    5           5.000                 #
PartialSortBenchmark.treeMap2:stableSort                 INT               2       10       10000000  avgt    5           5.000                 #
PartialSortBenchmark.treeMap:stableSort                  INT               2       10       10000000  avgt    5           5.000                 #
PartialSortBenchmark.priorityQueue                       INT               2       10       10000000  avgt    5         189.578 ±    1.390  ms/op
PartialSortBenchmark.treeMap2                            INT               2       10       10000000  avgt    5         190.691 ±    1.635  ms/op
PartialSortBenchmark.array                               INT               2       10       10000000  avgt    5         199.443 ±    2.441  ms/op
PartialSortBenchmark.topnHeap                            INT               2       10       10000000  avgt    5         203.917 ±    5.885  ms/op
PartialSortBenchmark.limitSort                           INT               2       10       10000000  avgt    5         209.656 ±    3.066  ms/op
PartialSortBenchmark.topnHeap2                           INT               2       10       10000000  avgt    5         215.485 ±    3.842  ms/op
PartialSortBenchmark.treeMap                             INT               2       10       10000000  avgt    5        1134.438 ±  154.786  ms/op
PartialSortBenchmark.limitSort:comparisons               INT               2       10       10000000  avgt    5    50002425.000                 #
PartialSortBenchmark.array:comparisons                   INT               2       10       10000000  avgt    5    50002510.000                 #
PartialSortBenchmark.topnHeap2:comparisons               INT               2       10       10000000  avgt    5    50002855.000                 #
PartialSortBenchmark.topnHeap:comparisons                INT               2       10       10000000  avgt    5    50003225.000                 #
PartialSortBenchmark.priorityQueue:comparisons           INT               2       10       10000000  avgt    5    50004305.000                 #
PartialSortBenchmark.treeMap2:comparisons                INT               2       10       10000000  avgt    5    50008715.000                 #
PartialSortBenchmark.treeMap:comparisons                 INT               2       10       10000000  avgt    5   618166865.000                 #

PartialSortBenchmark.limitSort:stableSort                INT               2      100       10000000  avgt    5             ≈ 0                 #
PartialSortBenchmark.array:stableSort                    INT               2      100       10000000  avgt    5           5.000                 #
PartialSortBenchmark.priorityQueue:stableSort            INT               2      100       10000000  avgt    5           5.000                 #
PartialSortBenchmark.topnHeap2:stableSort                INT               2      100       10000000  avgt    5           5.000                 #
PartialSortBenchmark.topnHeap:stableSort                 INT               2      100       10000000  avgt    5           5.000                 #
PartialSortBenchmark.treeMap2:stableSort                 INT               2      100       10000000  avgt    5           5.000                 #
PartialSortBenchmark.treeMap:stableSort                  INT               2      100       10000000  avgt    5           5.000                 #
PartialSortBenchmark.topnHeap2                           INT               2      100       10000000  avgt    5         186.772 ±    2.280  ms/op
PartialSortBenchmark.limitSort                           INT               2      100       10000000  avgt    5         190.760 ±    1.849  ms/op
PartialSortBenchmark.topnHeap                            INT               2      100       10000000  avgt    5         190.828 ±    2.673  ms/op
PartialSortBenchmark.priorityQueue                       INT               2      100       10000000  avgt    5         195.269 ±   16.674  ms/op
PartialSortBenchmark.array                               INT               2      100       10000000  avgt    5         202.739 ±   12.578  ms/op
PartialSortBenchmark.treeMap2                            INT               2      100       10000000  avgt    5         222.935 ±    2.201  ms/op
PartialSortBenchmark.treeMap                             INT               2      100       10000000  avgt    5        1670.252 ±  259.530  ms/op
PartialSortBenchmark.array:comparisons                   INT               2      100       10000000  avgt    5    50042465.000                 #
PartialSortBenchmark.limitSort:comparisons               INT               2      100       10000000  avgt    5    50042915.000                 #
PartialSortBenchmark.topnHeap2:comparisons               INT               2      100       10000000  avgt    5    50062740.000                 #
PartialSortBenchmark.topnHeap:comparisons                INT               2      100       10000000  avgt    5    50068080.000                 #
PartialSortBenchmark.priorityQueue:comparisons           INT               2      100       10000000  avgt    5    50079585.000                 #
PartialSortBenchmark.treeMap2:comparisons                INT               2      100       10000000  avgt    5    50145035.000                 #
PartialSortBenchmark.treeMap:comparisons                 INT               2      100       10000000  avgt    5  1105964045.000                 #

PartialSortBenchmark.limitSort:stableSort                INT               2    10000       10000000  avgt    5             ≈ 0                 #
PartialSortBenchmark.priorityQueue:stableSort            INT               2    10000       10000000  avgt    5             ≈ 0                 #
PartialSortBenchmark.array:stableSort                    INT               2    10000       10000000  avgt    5           5.000                 #
PartialSortBenchmark.topnHeap2:stableSort                INT               2    10000       10000000  avgt    5           5.000                 #
PartialSortBenchmark.topnHeap:stableSort                 INT               2    10000       10000000  avgt    5           5.000                 #
PartialSortBenchmark.treeMap2:stableSort                 INT               2    10000       10000000  avgt    5           5.000                 #
PartialSortBenchmark.treeMap:stableSort                  INT               2    10000       10000000  avgt    5           5.000                 #
PartialSortBenchmark.limitSort                           INT               2    10000       10000000  avgt    5         264.085 ±    3.486  ms/op
PartialSortBenchmark.topnHeap2                           INT               2    10000       10000000  avgt    5         272.420 ±    4.177  ms/op
PartialSortBenchmark.priorityQueue                       INT               2    10000       10000000  avgt    5         273.024 ±    2.851  ms/op
PartialSortBenchmark.topnHeap                            INT               2    10000       10000000  avgt    5         276.966 ±    4.732  ms/op
PartialSortBenchmark.array                               INT               2    10000       10000000  avgt    5         308.001 ±    6.237  ms/op
PartialSortBenchmark.treeMap2                            INT               2    10000       10000000  avgt    5         392.476 ±  492.622  ms/op
PartialSortBenchmark.treeMap                             INT               2    10000       10000000  avgt    5        2516.091 ±  196.464  ms/op
PartialSortBenchmark.array:comparisons                   INT               2    10000       10000000  avgt    5    55136190.000                 #
PartialSortBenchmark.limitSort:comparisons               INT               2    10000       10000000  avgt    5    55145260.000                 #
PartialSortBenchmark.topnHeap2:comparisons               INT               2    10000       10000000  avgt    5    58564685.000                 #
PartialSortBenchmark.topnHeap:comparisons                INT               2    10000       10000000  avgt    5    59297525.000                 #
PartialSortBenchmark.priorityQueue:comparisons           INT               2    10000       10000000  avgt    5    59304740.000                 #
PartialSortBenchmark.treeMap2:comparisons                INT               2    10000       10000000  avgt    5    66490910.000                 #
PartialSortBenchmark.treeMap:comparisons                 INT               2    10000       10000000  avgt    5  2030658165.000                 #

